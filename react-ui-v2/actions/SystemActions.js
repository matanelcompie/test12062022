import Axios from 'axios';
import * as GlobalActions from './GlobalActions';
import * as VoterActions from './VoterActions';
import * as CrmActions from './CrmActions';

import * as ElectionsActions  from './ElectionsActions';
import errors from '../libs/errors'

export const DragTypes = {
    EXAMPLE_DND_SORT: "EXAMPLE_DND_SORT",
    REQUEST_STATUS_DND_ROW: "REQUEST_STATUS_DND_ROW"
}

/*Action types for system*/
export const ActionTypes = {
    SET_INITIAL_URL_BASE_SEGMENT: "SET_INITIAL_URL_BASE_SEGMENT",
    SET_SCROLLBAR_WIDTH: "SET_SCROLLBAR_WIDTH",
    TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY: 'TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY',
    LOADED_CURRENT_USER_GEOGRAPHIC_FILTERED_LISTS: 'LOADED_CURRENT_USER_GEOGRAPHIC_FILTERED_LISTS',
    CLEAN_CURRENT_USER_GEOGRAPHIC_FILTERED_LISTS: 'CLEAN_CURRENT_USER_GEOGRAPHIC_FILTERED_LISTS',

    LOADING_CITIES: "LOADING_CITIES",
    LOADED_GENERAL_CITIES: "LOADED_GENERAL_CITIES",
    LOADED_GENERAL_AREAS: "LOADED_GENERAL_AREAS",
    LOADING_TEAMS: "LOADING_TEAMS",
    LOADING_USERS: "LOADING_USERS",
    LOADED_MODULES: "LOADED_MODULES",
    LOADED_USERS: "LOADED_USERS",
    LOADED_TEAMS: "LOADED_TEAMS",
    RESET_USER_HANDLERS: "RESET_USER_HANDLERS",
    RESET_TEAM_HANDLERS: "RESET_TEAM_HANDLERS",
    LOADED_MINIMAL_TEAMS: "LOADED_MINIMAL_TEAMS",
    LOADED_ROLES: "LOADED_ROLES",
    LOADED_TEAM_DEPARTMENTS: "LOADED_TEAM_DEPARTMENTS",
    SET_INNER_COMPONENT_HEIGHT: "SET_INNER_COMPONENT_HEIGHT",
    SET_MOBILE_SIZE: "SET_MOBILE_SIZE",
    LOADING_CURRENT_USER: "LOADING_CURRENT_USER",
    LOADED_CURRENT_USER: "LOADED_CURRENT_USER",
    LOADED_CURRENT_CAMPAIGN: "LOADED_CURRENT_CAMPAIGN",
    TOGGLE_HEADER_SEARCH: "TOGGLE_HEADER_SEARCH",
    CHANGES_NOT_SAVED: "CHANGES_NOT_SAVED",
    CHANGES_SAVED: "CHANGES_SAVED",
    SAVING_CHANGES: "SAVING_CHANGES",
    UNSAVING_CHANGES: "UNSAVING_CHANGES",
    CLEAR_CHANGES_SAVED: "CLEAR_CHANGES_SAVED",
    CLEAR_CHANGES_NOT_SAVED: "CLEAR_CHANGES_NOT_SAVED",
    LAST_API_CALL: "LAST_API_CALL",
    SET_SYSTEM_TITLE: "SET_SYSTEM_TITLE",
    RESET_BREADCRUMBS: "RESET_BREADCRUMBS",
    UPDATE_BREADCRUMBS: "UPDATE_BREADCRUMBS",
    ADD_BREADCRUMBS: "ADD_BREADCRUMBS",
    LOADED_SYSTEM_SETTINGS: "LOADED_SYSTEM_SETTINGS",
    SET_DIRTY: "SET_DIRTY",
    CLEAR_DIRTY: "CLEAR_DIRTY",
    IGNORE_DIRTY: "IGNORE_DIRTY",
    LOADING_ERRORS: "LOADING_ERRORS",
    LOADED_ERRORS: "LOADED_ERRORS",
    SAVE_CHANGES_MODAL_SHOW: "SAVE_CHANGES_MODAL_SHOW",
    SAVE_CHANGES_MODAL_HIDE: "SAVE_CHANGES_MODAL_HIDE",
    MAINTENANCE_MODE: "MAINTENANCE_MODE",
    MAINTENANCE_DATE: "MAINTENANCE_DATE",
    SET_AUDIO_STATE: "SET_AUDIO_STATE",   
    HEADER: {
        LOADING_LAST_VIEWED_VOTERS: "HEADER.LOADING_LAST_VIEWED_VOTERS",
        LOADED_LAST_VIEWED_VOTERS: "HEADER.LOADED_LAST_VIEWED_VOTERS",
        TOGGLE_LAST_VIEWED_VOTERS_MENU: "HEADER.TOGGLE_LAST_VIEWED_VOTERS_MENU",
        ADDING_LAST_VIEWED_VOTERS: "HEADER.ADDING_LAST_VIEWED_VOTERS",
        ADDED_LAST_VIEWED_VOTERS: "HEADER.ADDED_LAST_VIEWED_VOTERS",
        SET_SEARCH_TYPE: "HEADER.SET_SEARCH_TYPE",
        SET_SEARCH_INPUT: "HEADER.SET_SEARCH_INPUT",
        SEARCHING: "HEADER.SEARCHING",
        SEARCHED: "HEADER.SEARCHED",
        CLEAR_SEARCH: "HEADER.CLEAR_SEARCH",
        LOADED_FAVORITES: "HEADER.LOADED_FAVORITES",
        TOGGLE_FAVORITES_MENU: "HEADER.TOGGLE_FAVORITES_MENU",
        TOGGLE_CURRENT_CAMPAIGN_NAME: "HEADER.TOGGLE_CURRENT_CAMPAIGN_NAME",
        OPEN_CHANGE_PASSWORD_MODAL: "HEADER.OPEN_CHANGE_PASSWORD_MODAL",
        CLOSE_CHANGE_PASSWORD_MODAL: "HEADER.CLOSE_CHANGE_PASSWORD_MODAL",
        UPDATE_ALL_VOTERS_MODE: "HEADER.UPDATE_ALL_VOTERS_MODE",
    },

    MENU: {
        LOADING_MENU: "MENU.LOADING_MENU",
        LOADED_MENU: "MENU.LOADED_MENU",
        TOGGLE_MENU: "MENU.TOGGLE_MENU",
        TOGGLE_USER_MENU: "MENU.TOGGLE_USER_MENU",
        TOGGLE_MENU_ITEM: "MENU.TOGGLE_MENU_ITEM",
        SEARCH_NAV_TEXT_CHANGE: 'SEARCH_NAV_TEXT_CHANGE',
        SEARCH_IN_MENU: 'SEARCH_IN_MENU',
    },
    FILES: {
        LOADED_FILES_AND_GROUPS_DATA: "FILES.LOADED_FILES_AND_GROUPS_DATA",
        CHANGE_GLOBAL_WINDOW_VALUE: "FILES.CHANGE_GLOBAL_WINDOW_VALUE",
        SHOW_HIDE_ADD_EDIT_FILE_GROUP: "FILES.SHOW_HIDE_ADD_EDIT_FILE_GROUP",
        FILE_GROUP_SCREEN_FIELD_CHANGE: "FILES.FILE_GROUP_SCREEN_FIELD_CHANGE",
        MODIFY_FILE_GROUPS_ARRAY: "FILES.MODIFY_FILE_GROUPS_ARRAY",
        SHOW_HIDE_ADD_EDIT_FILE: "FILES.SHOW_HIDE_ADD_EDIT_FILE",
        FILE_SCREEN_FIELD_CHANGE: "FILES.FILE_SCREEN_FIELD_CHANGE",
        MODIFY_FILES_ARRAY: "FILES.MODIFY_FILES_ARRAY",
    },
    USERS: {
        LOADED_USER_TOPICS: "LOADED_USER_TOPICS",
        USER_SCREEN_COLLAPSE_CHANGE: 'USERS.USER_SCREEN_COLLAPSE_CHANGE',
        LOADING_USER: "USERS.LOADING_USER",
        LOADED_USER: "USERS.LOADED_USER",
        RESET_LOADED_USER: "USERS.RESET_LOADED_USER",
        OPEN_MISSING_USER_MODAL: "USERS.OPEN_MISSING_USER_MODAL",
        CLOSE_MODAL_DIALOG: "USERS.CLOSE_MODAL_DIALOG",
        OPEN_GLOBAL_ERROR_MODAL: "USERS.OPEN_GLOBAL_ERROR_MODAL",
        OPEN_MISSING_USER_DETAILS: "USERS.OPEN_MISSING_USER_DETAILS",
        OPEN_MISSING_USER_PHONES: "USERS.OPEN_MISSING_USER_PHONES",
        OPEN_MISSING_MAIN_ROLE: "USERS.OPEN_MISSING_MAIN_ROLE",
        ADDING_USER: "USERS.ADDING_USER",
        CLEAN_ADDING_USER: "USERS.CLEAN_ADDING_USER",
        ADDING_USER_FAILED: "USERS.ADDING_USER_FAILED",
        ADDED_USER: "USERS.ADDED_USER",
        SAVING_USER: "USERS.SAVING_USER",
        SAVED_USER: "USERS.SAVED_USER",
        USER_T_Z_CHANGE: "USERS.USER_T_Z_CHANGE",
        USER_NEIGHBORHOOD_CHANGE: "USERS.USER_NEIGHBORHOOD_CHANGE",
        USER_CITY_CHANGE: "USERS.USER_CITY_CHANGE",
        USER_TEAM_DEPARTMENT_CHANGE: "USERS.USER_TEAM_DEPARTMENT_CHANGE",
        USER_TEAM_CHANGE: "USERS.USER_TEAM_CHANGE",
        USER_HOUSENUMBER_CHANGE: "USERS.USER_HOUSENUMBER_CHANGE",
        USER_HOUSEENTRY_CHANGE: "USERS.USER_HOUSEENTRY_CHANGE",
        USER_STREET_CHANGE: "USERS.USER_STREET_CHANGE",
        USER_FLAT_CHANGE: "USERS.USER_FLAT_CHANGE",
        USER_ACTIVE_CHANGE: "USERS.USER_ACTIVE_CHANGE",
        USER_MANAGER_PAYMENT_CHANGE: "USERS.USER_MANAGER_PAYMENT_CHANGE",
        USER_TWO_STEP_AUTH_CHANGE: "USERS.USER_TWO_STEP_AUTH_CHANGE",
        USER_IS_SHAS_CHANGE: "USERS.USER_IS_SHAS_CHANGE",
        USER_EMAIL_CHANGE: "USERS.USER_EMAIL_CHANGE",
        USER_PHONE_CHANGE: "USERS.USER_PHONE_CHANGE",
        USER_CELLPHONE_CHANGE: "USERS.USER_CELLPHONE_CHANGE",
        USER_EXTRAPHONE_CHANGE: "USERS.USER_EXTRAPHONE_CHANGE",
        OPEN_RESET_PASSWORD_MODAL: "USERS.OPEN_RESET_PASSWORD_MODAL",
        OPEN_MISSING_PASSWORDS_MODAL: "USERS.OPEN_MISSING_PASSWORDS_MODAL",
        CLOSE_RESET_PASSWORD_MODAL: "USERS.CLOSE_RESET_PASSWORD_MODAL",
        USER_CHANGE_PASSWORD: "USERS.USER_CHANGE_PASSWORD",
        PASSWORD_CHANGED_SUCCESSFULLY: "USERS.PASSWORD_CHANGED_SUCCESSFULLY",
        PASSWORD_CHANGED_FAILED: "USERS.PASSWORD_CHANGED_FAILED",
        CHANGE_PASSWORD_ERROR_MESSAGE: "USERS.CHANGE_PASSWORD_ERROR_MESSAGE",
        RESET_CURRENT_USER: "USERS.RESET_CURRENT_USER",
        FIRST_VALIDATION_FAILED: "USERS.FIRST_VALIDATION_FAILED",
        CLEAR_USERS_FORM: "USERS.CLEAR_USERS_FORM",
        USER_TAB_LOWER_CHANGE: "USERS.USER_TAB_LOWER_CHANGE",
        SHOW_RESET_PASSWORD_MODAL: 'USERS.SHOW_RESET_PASSWORD_MODAL',
        HIDE_RESET_PASSWORD_MODAL: 'USERS.HIDE_RESET_PASSWORD_MODAL',
        USER_RESET_PASSWORD_CHANGE_OLD_PASSWORD: 'USERS.USER_RESET_PASSWORD_CHANGE_OLD_PASSWORD',
        USER_RESET_PASSWORD_CHANGE_PASSWORD: 'USERS.USER_RESET_PASSWORD_CHANGE_PASSWORD',
        USER_RESET_PASSWORD_CHANGE_CONFIRM_PASSWORD: 'USERS.USER_RESET_PASSWORD_CHANGE_CONFIRM_PASSWORD',
        SHOW_ADD_USER_ROLE: 'USERS.SHOW_ADD_USER_ROLE',
        HIDE_ADD_USER_ROLE: 'USERS.HIDE_ADD_USER_ROLE',
        NEW_ROLE_USER_ROLE_NAME_CHANGE: 'USERS.NEW_ROLE_USER_ROLE_NAME_CHANGE',
        NEW_ROLE_USER_TEAM_NAME_CHANGE: 'USERS.NEW_ROLE_USER_TEAM_NAME_CHANGE',
        NEW_ROLE_USER_DEP_NAME_CHANGE: 'USERS.NEW_ROLE_USER_DEP_NAME_CHANGE',
        NEW_ROLE_ADDED: 'USERS.NEW_ROLE_ADDED',
        NEW_ROLE_USER_FROM_DATE_CHANGE: 'USERS.NEW_ROLE_USER_FROM_DATE_CHANGE',
        NEW_ROLE_USER_TO_DATE_CHANGE: 'USERS.NEW_ROLE_USER_TO_DATE_CHANGE',
        SHOW_CONFIRM_DELETE_MODAL: 'USERS.SHOW_CONFIRM_DELETE_MODAL',
        HIDE_CONFIRM_DELETE_MODAL: 'USERS.HIDE_CONFIRM_DELETE_MODAL',
        DELETED_ROLE_BY_ID: 'USERS.DELETED_ROLE_BY_ID',
        SET_ROLE_USER_ROW_EDITING: 'USERS.SET_ROLE_USER_ROW_EDITING',
        EDIT_FROM_DATE_CHANGE: 'USERS.EDIT_FROM_DATE_CHANGE',
        EDIT_TO_DATE_CHANGE: 'USERS.EDIT_TO_DATE_CHANGE',
        EDIT_IS_MAIN_CHANGE: 'USERS.EDIT_IS_MAIN_CHANGE',
        EDIT_MODULE_CHANGE: 'USERS.EDIT_MODULE_CHANGE',
        EDIT_ROLE_CHANGE: 'USERS.EDIT_ROLE_CHANGE',
        EDIT_TEAM_NAME_CHANGE: 'USERS.EDIT_TEAM_NAME_CHANGE',
        EDIT_DEPARTMENT_NAME_CHANGE: 'USERS.EDIT_DEPARTMENT_NAME_CHANGE',
        ROLE_USER_FINISH_EDITING: 'USERS.ROLE_USER_FINISH_EDITING',
        LOADED_PHONE_TYPES: 'USERS.LOADED_PHONE_TYPES',
        SET_ADDING_NEW_PHONE: 'USERS.SET_ADDING_NEW_PHONE',
        CLOSE_ADDING_NEW_PHONE: 'USERS.CLOSE_ADDING_NEW_PHONE',
        NEW_USER_PHONE_TYPE_CHANGE: 'USERS.NEW_USER_PHONE_TYPE_CHANGE',
        NEW_USER_PHONE_NUMBER_CHANGE: 'USERS.NEW_USER_PHONE_NUMBER_CHANGE',
        ADDED_NEW_PHONE: 'USERS.ADDED_NEW_PHONE',
        TOGGLE_PHONE_DELETE_MODAL_DIALOG_DISPLAY: 'USERS.TOGGLE_PHONE_DELETE_MODAL_DIALOG_DISPLAY',
        DELETED_USER_PHONE: 'USERS.DELETED_USER_PHONE',
        USER_PHONE_EDIT_MODE_UPDATED: 'USERS.USER_PHONE_EDIT_MODE_UPDATED',
        EXISTING_USER_PHONE_NUMBER_CHANGED: 'USERS.EXISTING_USER_PHONE_NUMBER_CHANGED',
        EXISTING_USER_PHONE_NUMBER_TYPE_CHANGED: 'USERS.EXISTING_USER_PHONE_NUMBER_TYPE_CHANGED',
        UPDATED_USER_PHONE: 'USERS.UPDATED_USER_PHONE',
        ADD_NEW_PHONE_TO_TEMP_ARRAY: 'USERS.ADD_NEW_PHONE_TO_TEMP_ARRAY',
        DELETE_PHONE_FROM_TEMP_ARRAY: 'USERS.DELETE_PHONE_FROM_TEMP_ARRAY',
        EDIT_PHONE_FROM_TEMP_ARRAY: 'USERS.EDIT_PHONE_FROM_TEMP_ARRAY',
        ADD_NEW_ROLE_TO_TEMP_ARRAY: 'USERS.ADD_NEW_ROLE_TO_TEMP_ARRAY',
        DELETE_ROLE_FROM_TEMP_ARRAY: 'USERS.DELETE_ROLE_FROM_TEMP_ARRAY',
        SAVE_USER_ROLE_TO_TEMP_ARRAY: 'USERS.SAVE_USER_ROLE_TO_TEMP_ARRAY',
        OPEN_MISSING_USER_ROLES: 'USERS.OPEN_MISSING_USER_ROLES',
        ADD_NEW_GEO_FILTER_TO_ROLE: 'USERS.ADD_NEW_GEO_FILTER_TO_ROLE',
        CLOSE_GEO_FILTER_DIALOG: 'USERS.CLOSE_GEO_FILTER_DIALOG',
        MAIN_MODAL_GEO_FILTER_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_CHANGED',
        GEO_FILTER_LOADED_CITIES_BY_AREA: 'USERS.GEO_FILTER_LOADED_CITIES_BY_AREA',
        GEO_FILTER_LOADED_NEIGHBORHOODS_BY_CITY: 'USERS.GEO_FILTER_LOADED_NEIGHBORHOODS_BY_CITY',
        GEO_FILTER_LOADED_CLUSTERS_BY_CITY: 'USERS.GEO_FILTER_LOADED_CLUSTERS_BY_CITY',
        MAIN_MODAL_GEO_FILTER_CITY_NAME_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_CITY_NAME_CHANGED',
        MAIN_MODAL_GEO_FILTER_NEIGHBORHOOD_NAME_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_NEIGHBORHOOD_NAME_CHANGED',
        MAIN_MODAL_GEO_FILTER_CLUSTER_NAME_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_CLUSTER_NAME_CHANGED',
        GEO_FILTER_LOADED_BALLOTS_BY_CLUSTER: 'USERS.GEO_FILTER_LOADED_BALLOTS_BY_CLUSTER',
        MAIN_MODAL_GEO_FILTER_BALLOT_NAME_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_BALLOT_NAME_CHANGED',
        GEO_FILTER_LOADED_CLUSTERS_BY_NEIGHBORHOOD: 'USERS.GEO_FILTER_LOADED_CLUSTERS_BY_NEIGHBORHOOD',
        ADDED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE: 'USERS.ADDED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE',
        SHOW_CONFIRM_DELETE_GEO_FILTER_MODAL: 'USERS.SHOW_CONFIRM_DELETE_GEO_FILTER_MODAL',
        DELETED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE: 'USERS.DELETED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE',
        MAIN_MODAL_GEO_FILTER_LABEL_NAME_CHANGED: 'USERS.MAIN_MODAL_GEO_FILTER_LABEL_NAME_CHANGED',
        ADD_NEW_GEO_FILTER_TO_TEMP_ROLE_ARRAY: 'USERS.ADD_NEW_GEO_FILTER_TO_TEMP_ROLE_ARRAY',
        ADD_GEO_FILTER_TO_TEMP_USER_ROLES_ARR: 'USERS.ADD_GEO_FILTER_TO_TEMP_USER_ROLES_ARR',
        DELETE_ROLE_GEO_FILTER_FROM_TEMP_ARRAY: 'USERS.DELETE_ROLE_GEO_FILTER_FROM_TEMP_ARRAY',
        EDIT_GEO_FILTER_TO_TEMP_USER_ROLES_ARR: 'USERS.EDIT_GEO_FILTER_TO_TEMP_USER_ROLES_ARR',
        ADD_GEO_FILTER_TO_TEMP_ARRAY_OF_USER_ROLES: 'USERS.ADD_GEO_FILTER_TO_TEMP_ARRAY_OF_USER_ROLES',
        DELETE_GEO_FILTER_FROM_TEMP_ARRAY_OF_USER_ROLES: 'USERS.DELETE_GEO_FILTER_FROM_TEMP_ARRAY_OF_USER_ROLES',
        EDIT_GEO_FILTER_TO_NEW_USER_ROLES_TEMP_ARR: 'USERS.EDIT_GEO_FILTER_TO_NEW_USER_ROLES_TEMP_ARR',
        USER_ROLE_ADDED_SECTORIAL_FILTER: 'USERS.USER_ROLE_ADDED_SECTORIAL_FILTER',
        SHOW_CONFIRM_DELETE_SECTORIAL_FILTER_MODAL: 'USERS.SHOW_CONFIRM_DELETE_SECTORIAL_FILTER_MODAL',
        NEW_ROLE_MODULE_NAME_CHANGE: 'USERS.NEW_ROLE_MODULE_NAME_CHANGE',
        DELETE_SECTORIAL_FILTER_FROM_TEMP_ARRAY_OF_USER_ROLES: 'USERS.DELETE_SECTORIAL_FILTER_FROM_TEMP_ARRAY_OF_USER_ROLES',
        SHOW_HIDE_COPY_VOTER_DETAILS_DLG: 'USERS.SHOW_HIDE_COPY_VOTER_DETAILS_DLG',
        USER_ADMIN_CHANGE: 'USERS.USER_ADMIN_CHANGE',
        GEO_FILTER_LOADED_INITIAL_CITIES: 'USERS.GEO_FILTER_LOADED_INITIAL_CITIES',
        GEO_FILTER_LOADED_CITIES_BY_AREA_AND_SUB_AREA: 'USERS.GEO_FILTER_LOADED_CITIES_BY_AREA_AND_SUB_AREA',
        UNLOCK_USER: 'USERS.UNLOCK_USER',
        LOADED_REQUESTS_TOPICS: 'USERS.LOADED_REQUESTS_TOPICS',
    },

    TEAMS: {
        CHANGE_CHOOSE_TEAM_NAME: 'TEAMS.CHANGE_CHOOSE_TEAM_NAME',
        LOADED_MINIMAL_DATA: 'TEAMS.LOADED_MINIMAL_DATA',
        CHANGE_CHOOSE_TEAM_USER_LEADER: 'TEAMS.CHANGE_CHOOSE_TEAM_USER_LEADER',
        CHANGE_CHOOSE_TEAM_TEXT_NAME: 'TEAMS.CHANGE_CHOOSE_TEAM_TEXT_NAME',
        CHANGE_TEAM_FIELD: 'TEAMS.CHANGE_TEAM_FIELD',
        TEAM_TAB_CHANGE: 'TEAMS.TEAM_TAB_CHANGE',
        SET_ADDING_DEPARTMENT: 'TEAMS.SET_ADDING_DEPARTMENT',
        NEW_DEP_NAME_CHANGE: 'TEAMS.NEW_DEP_NAME_CHANGE',
        UPDATE_EXISTING_DEPARTMENTS: 'TEAMS.UPDATE_EXISTING_DEPARTMENTS',
        SHOW_CONFIRM_DELETE_DEPARTMENT: 'TEAMS.SHOW_CONFIRM_DELETE_DEPARTMENT',
        HIDE_CONFIRM_DELETE_DELETES: 'TEAMS.HIDE_CONFIRM_DELETE_DELETES',
        SET_DEPARTMENT_ROW_EDITING: 'TEAMS.SET_DEPARTMENT_ROW_EDITING',
        UNSET_DEPARTMENT_ROW_EDITING: 'TEAMS.UNSET_DEPARTMENT_ROW_EDITING',
        EDIT_DEP_NAME_CHANGE: 'TEAMS.EDIT_DEP_NAME_CHANGE',
        EDITED_DEP_ROW_SUCCESFULLY: 'TEAMS.EDITED_DEP_ROW_SUCCESFULLY',
        GEO_FILTER_COLLAPSE_CHANGE: 'TEAMS.GEO_FILTER_COLLAPSE_CHANGE',
        SECTORIAL_FILTER_COLLAPSE_CHANGE: 'TEAMS.SECTORIAL_FILTER_COLLAPSE_CHANGE',
        SHOW_CONFIRM_DELETE_GEO_TEMPLATE: 'TEAMS.SHOW_CONFIRM_DELETE_GEO_TEMPLATE',
        SHOW_ADD_NEW_GEO_TPL_MODAL: 'TEAMS.SHOW_ADD_NEW_GEO_TPL_MODAL',
        HIDE_ADD_NEW_GEO_TPL_MODAL: 'TEAMS.HIDE_ADD_NEW_GEO_TPL_MODAL',
        NEW_GEO_TPL_LABEL_CHANGE: 'TEAMS.NEW_GEO_TPL_LABEL_CHANGE',
        NEW_GEO_TPL_AREA_CHANGE: 'TEAMS.NEW_GEO_TPL_AREA_CHANGE',
        NEW_GEO_TPL_AREA_GROUP_CHANGE: 'TEAMS.NEW_GEO_TPL_AREA_GROUP_CHANGE',
        NEW_GEO_TPL_SUB_AREA_CHANGE: 'TEAMS.NEW_GEO_TPL_SUB_AREA_CHANGE',
        NEW_GEO_TPL_CITY_CHANGE: 'TEAMS.NEW_GEO_TPL_CITY_CHANGE',
        NEW_GEO_TPL_NEIGHBORHOOD_CHANGE: 'TEAMS.NEW_GEO_TPL_NEIGHBORHOOD_CHANGE',
        NEW_GEO_TPL_CLUSTER_CHANGE: 'TEAMS.NEW_GEO_TPL_CLUSTER_CHANGE',
        NEW_GEO_TPL_BALLOT_CHANGE: 'TEAMS.NEW_GEO_TPL_BALLOT_CHANGE',
        SHOW_EDIT_GEO_TPL_MODAL: 'TEAMS.SHOW_EDIT_GEO_TPL_MODAL',
        SHOW_CONFIRM_DELETE_SECTORIAL_TEMPLATE: 'TEAMS.SHOW_CONFIRM_DELETE_SECTORIAL_TEMPLATE',
        SHOW_ADD_NEW_SECTORIAL_TPL_MODAL: 'TEAMS.SHOW_ADD_NEW_SECTORIAL_TPL_MODAL',
        HIDE_ADD_NEW_SECTORIAL_TPL_MODAL: 'TEAMS.HIDE_ADD_NEW_SECTORIAL_TPL_MODAL',
        SHOW_EDIT_SECTORIAL_TPL_MODAL: 'TEAMS.SHOW_EDIT_SECTORIAL_TPL_MODAL',
        CHANGE_TEAM_NAME_IN_TEAMS_LIST_ONLY: 'TEAMS.CHANGE_TEAM_NAME_IN_TEAMS_LIST_ONLY',
        CLEAR_TEAMS_DATA: 'TEAMS.CLEAR_TEAMS_DATA',
        TABLE_CONTENT_HAS_UPDATED: 'TEAMS.TABLE_CONTENT_HAS_UPDATED',
        INIT_TEAM_SCREEN: 'TEAMS.INIT_TEAM_SCREEN',
        REQUESTS_TOPICS: 'TEAMS.REQUESTS_TOPICS',
    },
    /**
     * User home page dispatch stuff.
     */
    USER_HOME: {
        LOADED_SUMMARY: "USER_HOME.LOADED_SUMMARY",
        CHANGE_DISPLAYED_RESULTS: "USER_HOME.CHANGE_DISPLAYED_RESULTS",
        UPDATE_UNREAD_REQUESTS_COUNT: "USER_HOME.UPDATE_UNREAD_REQUESTS_COUNT",
        ORDER_RESULTS: "USER_HOME.ORDER_RESULTS",
        OPEN_REQUEST: "USER_HOME.OPEN_REQUEST",
    },

    LISTS: {
        /* COUNTRY */
        LOADED_COUNTRIES: "LISTS.LOADED_COUNTRIES",
        ORDER_COUNTRIES: "LISTS.ORDER_COUNTRIES",
        UPDATE_COUNTRY_SEARCH_VALUE: "LISTS.UPDATE_COUNTRY_SEARCH_VALUE",
        TOGGLE_DELETE_COUNTRY_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_COUNTRY_MODAL_DIALOG_DISPLAY",
        COUNTRY_DELETE_MODE_UPDATED: "LISTS.COUNTRY_DELETE_MODE_UPDATED",
        COUNTRY_EDIT_MODE_UPDATED: "LISTS.COUNTRY_EDIT_MODE_UPDATED",
        COUNTRY_EDIT_VALUE_CHANGED: "LISTS.COUNTRY_EDIT_VALUE_CHANGED",

        /* ETHNIC */
        LOADED_ETHNIC: "LISTS.LOADED_ETHNIC",
        ORDER_ETHNIC: "LISTS.ORDER_ETHNIC",
        UPDATE_ETHNIC_SEARCH_VALUE: "LISTS.UPDATE_ETHNIC_SEARCH_VALUE",
        TOGGLE_DELETE_ETHNIC_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_ETHNIC_MODAL_DIALOG_DISPLAY",
        ETHNIC_DELETE_MODE_UPDATED: "LISTS.ETHNIC_DELETE_MODE_UPDATED",
        ETHNIC_EDIT_MODE_UPDATED: "LISTS.ETHNIC_EDIT_MODE_UPDATED",
        ETHNIC_EDIT_VALUE_CHANGED: "LISTS.ETHNIC_EDIT_VALUE_CHANGED",
        ETHNIC_SEPHARDI_VALUE_CHANGED: "LISTS.ETHNIC_SEPHARDI_VALUE_CHANGED",

        /* RELIGIOUS GROUP */
        LOADED_RELIGIOUS_GROUPS: "LISTS.LOADED_RELIGIOUS_GROUPS",
        ORDER_RELIGIOUS_GROUPS: "LISTS.ORDER_RELIGIOUS_GROUPS",
        UPDATE_RELIGIOUS_GROUPS_SEARCH_VALUE: "LISTS.UPDATE_RELIGIOUS_GROUPS_SEARCH_VALUE",
        TOGGLE_DELETE_RELIGIOUS_GROUP_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_RELIGIOUS_GROUP_MODAL_DIALOG_DISPLAY",
        RELIGIOUS_GROUPS_DELETE_MODE_UPDATED: "LISTS.RELIGIOUS_GROUPS_DELETE_MODE_UPDATED",
        RELIGIOUS_GROUPS_EDIT_MODE_UPDATED: "LISTS.RELIGIOUS_GROUPS_EDIT_MODE_UPDATED",
        RELIGIOUS_GROUPS_EDIT_VALUE_CHANGED: "LISTS.RELIGIOUS_GROUPS_EDIT_VALUE_CHANGED",

        /* CITY */
        CITIES_LOADED: "LISTS.CITIES_LOADED",
        ORDER_CITIES: "LISTS.ORDER_CITIES",
        UPDATE_CITY_SEARCH_VALUE: "LISTS.UPDATE_CITY_SEARCH_VALUE",
        TOGGLE_DELETE_CITY_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_CITY_MODAL_DIALOG_DISPLAY",
        CITY_DELETE_MODE_UPDATED: "LISTS.CITY_DELETE_MODE_UPDATED",
        CITY_EDIT_MODE_UPDATED: "LISTS.CITY_EDIT_MODE_UPDATED",
        CITY_EDIT_VALUE_CHANGED: "LISTS.CITY_EDIT_VALUE_CHANGED",
        UPDATE_CURRENT_DISPLAYED_CITIES: "LISTS.UPDATE_CURRENT_DISPLAYED_CITIES",
        LOAD_MORE_CITIES: "LISTS.LOAD_MORE_CITIES",
        CITY_MIID_VALUE_CHANGED: "LISTS.CITY_MIID_VALUE_CHANGED",
        ADD_CITY_MODE_UPDATED: "LISTS.ADD_CITY_MODE_UPDATED",

        /* AREA */
        LOADED_AREAS: "LISTS.LOADED_AREAS",
        LOADED_AREAS_GROUPS: "LISTS.LOADED_AREAS_GROUPS",
        ORDER_AREAS: "LISTS.ORDER_AREAS",
        UPDATE_AREA_SEARCH_VALUE: "LISTS.UPDATE_AREA_SEARCH_VALUE",
        TOGGLE_DELETE_AREA_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_AREA_MODAL_DIALOG_DISPLAY",
        AREA_DELETE_MODE_UPDATED: "LISTS.AREA_DELETE_MODE_UPDATED",
        AREA_EDIT_MODE_UPDATED: "LISTS.AREA_EDIT_MODE_UPDATED",
        AREA_EDIT_VALUE_CHANGED: "LISTS.AREA_EDIT_VALUE_CHANGED",
        LOAD_SUBAREAS: "LISTS.LOAD_SUBAREAS",

        /* SUBAREA */
        LOADED_SUBAREAS: "LISTS.LOADED_SUBAREAS",
        ORDER_SUBAREAS: "LISTS.ORDER_SUBAREAS",
        UPDATE_SUBAREA_SEARCH_VALUE: "LISTS.UPDATE_SUBAREA_SEARCH_VALUE",
        TOGGLE_DELETE_SUBAREA_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_SUBAREA_MODAL_DIALOG_DISPLAY",
        SUBAREA_DELETE_MODE_UPDATED: "LISTS.SUBAREA_DELETE_MODE_UPDATED",
        SUBAREA_EDIT_MODE_UPDATED: "LISTS.SUBAREA_EDIT_MODE_UPDATED",
        SUBAREA_EDIT_VALUE_CHANGED: "LISTS.SUBAREA_EDIT_VALUE_CHANGED",

        /* NEIGHBORHOOD */
        LOAD_NEIGHBORHOODS: "LISTS.LOAD_NEIGHBORHOODS",
        LOADED_NEIGHBORHOODS: "LISTS.LOADED_NEIGHBORHOODS",
        ORDER_NEIGHBORHOODS: "LISTS.ORDER_NEIGHBORHOODS",
        UPDATE_NEIGHBORHOOD_SEARCH_VALUE: "LISTS.UPDATE_NEIGHBORHOOD_SEARCH_VALUE",
        TOGGLE_DELETE_NEIGHBORHOOD_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_NEIGHBORHOOD_MODAL_DIALOG_DISPLAY",
        NEIGHBORHOOD_DELETE_MODE_UPDATED: "LISTS.NEIGHBORHOOD_DELETE_MODE_UPDATED",
        NEIGHBORHOOD_EDIT_MODE_UPDATED: "LISTS.NEIGHBORHOOD_EDIT_MODE_UPDATED",
        NEIGHBORHOOD_EDIT_VALUE_CHANGED: "LISTS.NEIGHBORHOOD_EDIT_VALUE_CHANGED",
        //BULLOT_BOXES
        LOADED_BULLOTS_BOXES: "LISTS.LOADED_BULLOTS_BOXES",

        //clusters
        LOADED_CLUSTERS: "LISTS.LOADED_CLUSTERS",
        LOAD_NEIGHBORHOOD_CLUSTERS: "LISTS.LOAD_NEIGHBORHOOD_CLUSTERS",
        LOADED_NEIGHBORHOOD_CLUSTERS: "LISTS.LOADED_NEIGHBORHOOD_CLUSTERS",
        ORDER_NEIGHBORHOOD_CLUSTERS: "LISTS.ORDER_NEIGHBORHOOD_CLUSTERS",
        UPDATE_NEIGHBORHOOD_CLUSTER_SEARCH_VALUE: "LISTS.UPDATE_NEIGHBORHOOD_CLUSTER_SEARCH_VALUE",
        NEIGHBORHOOD_CLUSTER_SELECTED: "LISTS.NEIGHBORHOOD_CLUSTER_SELECTED",
        NEIGHBORHOOD_CLUSTER_DELETE_MODE_UPDATED: "LISTS.NEIGHBORHOOD_CLUSTER_DELETE_MODE_UPDATED",
        TOGGLE_DELETE_NEIGHBORHOOD_CLUSTER_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_NEIGHBORHOOD_CLUSTER_MODAL_DIALOG_DISPLAY",
        TOGGLE_DISPLAY_UPDATE_CLUSTERS_MODALS: 'LISTS.TOGGLE_DISPLAY_UPDATE_CLUSTERS_MODALS',
        /* STREET */
        LOAD_STREETS: "LISTS.LOAD_STREETS",
        LOADED_STREETS: "LISTS.LOADED_STREETS",
        ORDER_STREETS: "LISTS.ORDER_STREETS",
        UPDATE_STREET_SEARCH_VALUE: "LISTS.UPDATE_STREET_SEARCH_VALUE",
        TOGGLE_DELETE_STREET_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_STREET_MODAL_DIALOG_DISPLAY",
        STREET_DELETE_MODE_UPDATED: "LISTS.STREET_DELETE_MODE_UPDATED",
        STREET_EDIT_MODE_UPDATED: "LISTS.STREET_EDIT_MODE_UPDATED",
        STREET_EDIT_VALUE_CHANGED: "LISTS.STREET_EDIT_VALUE_CHANGED",
        STREET_MIID_VALUE_CHANGED: "LISTS.STREET_MIID_VALUE_CHANGED",
        RESET_STREETS_LIST: "LISTS.RESET_STREETS_LIST",
        ADD_STREET_MODE_UPDATED: "LISTS.ADD_STREET_MODE_UPDATED",

        /* PHONE_TYPE */
        LOADED_PHONE_TYPES: "LISTS.LOADED_PHONE_TYPES",
        ORDER_PHONE_TYPES: "LISTS.ORDER_PHONE_TYPES",
        UPDATE_PHONE_TYPE_SEARCH_VALUE: "LISTS.UPDATE_PHONE_TYPE_SEARCH_VALUE",
        TOGGLE_DELETE_PHONE_TYPE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_PHONE_TYPE_MODAL_DIALOG_DISPLAY",
        PHONE_TYPE_DELETE_MODE_UPDATED: "LISTS.PHONE_TYPE_DELETE_MODE_UPDATED",
        PHONE_TYPE_EDIT_MODE_UPDATED: "LISTS.PHONE_TYPE_EDIT_MODE_UPDATED",
        PHONE_TYPE_EDIT_VALUE_CHANGED: "LISTS.PHONE_TYPE_EDIT_VALUE_CHANGED",

        /* VOTER_TITLE */
        LOADED_VOTER_TITLE: "LISTS.LOADED_VOTER_TITLE",
        ORDER_VOTER_TITLE: "LISTS.ORDER_VOTER_TITLE",
        UPDATE_VOTER_TITLE_SEARCH_VALUE: "LISTS.UPDATE_VOTER_TITLE_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_TITLE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_TITLE_MODAL_DIALOG_DISPLAY",
        VOTER_TITLE_DELETE_MODE_UPDATED: "LISTS.VOTER_TITLE_DELETE_MODE_UPDATED",
        VOTER_TITLE_EDIT_MODE_UPDATED: "LISTS.VOTER_TITLE_EDIT_MODE_UPDATED",
        VOTER_TITLE_EDIT_VALUE_CHANGED: "LISTS.VOTER_TITLE_EDIT_VALUE_CHANGED",

        /* VOTER_ENDING */
        LOADED_VOTER_ENDING: "LISTS.LOADED_VOTER_ENDING",
        ORDER_VOTER_ENDING: "LISTS.ORDER_VOTER_ENDING",
        UPDATE_VOTER_ENDING_SEARCH_VALUE: "LISTS.UPDATE_VOTER_ENDING_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_ENDING_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_ENDING_MODAL_DIALOG_DISPLAY",
        VOTER_ENDING_DELETE_MODE_UPDATED: "LISTS.VOTER_ENDING_DELETE_MODE_UPDATED",
        VOTER_ENDING_EDIT_MODE_UPDATED: "LISTS.VOTER_ENDING_EDIT_MODE_UPDATED",
        VOTER_ENDING_EDIT_VALUE_CHANGED: "LISTS.VOTER_ENDING_EDIT_VALUE_CHANGED",

        /* SUPPORT_STATUS */
        LOADED_SUPPORT_STATUS: "LISTS.LOADED_SUPPORT_STATUS",
        UPDATE_SUPPORT_STATUS_SEARCH_VALUE: "LISTS.UPDATE_SUPPORT_STATUS_SEARCH_VALUE",
        TOGGLE_DELETE_SUPPORT_STATUS_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_SUPPORT_STATUS_MODAL_DIALOG_DISPLAY",
        SUPPORT_STATUS_DELETE_MODE_UPDATED: "LISTS.SUPPORT_STATUS_DELETE_MODE_UPDATED",
        SUPPORT_STATUS_EDIT_MODE_UPDATED: "LISTS.SUPPORT_STATUS_EDIT_MODE_UPDATED",
        SUPPORT_STATUS_EDIT_VALUE_CHANGED: "LISTS.SUPPORT_STATUS_EDIT_VALUE_CHANGED",
        DND_SORT_SUPPORT_STATUS: "LISTS.DND_SORT_SUPPORT_STATUS",
        DND_SORT_SUPPORT_STATUS_MODE: "LISTS.DND_SORT_SUPPORT_STATUS_MODE",
        DND_SORT_SUPPORT_STATUS_DROP: "LISTS.DND_SORT_SUPPORT_STATUS_DROP",
        DND_SUPPORT_STATUS_REVERT_TO_ORIGINAL: "LISTS.DND_SUPPORT_STATUS_REVERT_TO_ORIGINAL",

        /* VOTER_ACTION_TYPE */
        LOADED_VOTER_ACTION_TYPE: "LISTS.LOADED_VOTER_ACTION_TYPE",
        ORDER_VOTER_ACTION_TYPE: "LISTS.ORDER_VOTER_ACTION_TYPE",
        UPDATE_VOTER_ACTION_TYPE_SEARCH_VALUE: "LISTS.UPDATE_VOTER_ACTION_TYPE_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_ACTION_TYPE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_ACTION_TYPE_MODAL_DIALOG_DISPLAY",
        VOTER_ACTION_TYPE_DELETE_MODE_UPDATED: "LISTS.VOTER_ACTION_TYPE_DELETE_MODE_UPDATED",
        VOTER_ACTION_TYPE_EDIT_MODE_UPDATED: "LISTS.VOTER_ACTION_TYPE_EDIT_MODE_UPDATED",
        VOTER_ACTION_TYPE_EDIT_VALUE_CHANGED: "LISTS.VOTER_ACTION_TYPE_EDIT_VALUE_CHANGED",
        LOAD_VOTER_ACTION_TYPE_TOPICS: "LISTS.LOAD_VOTER_ACTION_TYPE_TOPICS",

        /* VOTER_ACTION_TOPIC */
        LOADED_VOTER_ACTION_TOPIC: "LISTS.LOADED_VOTER_ACTION_TOPIC",
        ORDER_VOTER_ACTION_TOPIC: "LISTS.ORDER_VOTER_ACTION_TOPIC",
        UPDATE_VOTER_ACTION_TOPIC_SEARCH_VALUE: "LISTS.UPDATE_VOTER_ACTION_TOPIC_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_ACTION_TOPIC_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_ACTION_TOPIC_MODAL_DIALOG_DISPLAY",
        VOTER_ACTION_TOPIC_DELETE_MODE_UPDATED: "LISTS.VOTER_ACTION_TOPIC_DELETE_MODE_UPDATED",
        VOTER_ACTION_TOPIC_EDIT_MODE_UPDATED: "LISTS.VOTER_ACTION_TOPIC_EDIT_MODE_UPDATED",
        VOTER_ACTION_TOPIC_EDIT_VALUE_CHANGED: "LISTS.VOTER_ACTION_TOPIC_EDIT_VALUE_CHANGED",

        /* VOTER_META_KEY */
        LOADED_VOTER_META_KEY: "LISTS.LOADED_VOTER_META_KEY",
        ORDER_VOTER_META_KEY: "LISTS.ORDER_VOTER_META_KEY",
        UPDATE_VOTER_META_KEY_SEARCH_VALUE: "LISTS.UPDATE_VOTER_META_KEY_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_META_KEY_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_META_KEY_MODAL_DIALOG_DISPLAY",
        VOTER_META_KEY_DELETE_MODE_UPDATED: "LISTS.VOTER_META_KEY_DELETE_MODE_UPDATED",
        VOTER_META_KEY_EDIT_MODE_UPDATED: "LISTS.VOTER_META_KEY_EDIT_MODE_UPDATED",
        VOTER_META_KEY_EDIT_VALUE_CHANGED: "LISTS.VOTER_META_KEY_EDIT_VALUE_CHANGED",
        LOAD_VOTER_META_KEY_VALUES: "LISTS.LOAD_VOTER_META_KEY_VALUES",

        /* VOTER_META_VALUE */
        LOADED_VOTER_META_VALUES: "LISTS.LOADED_VOTER_META_VALUES",
        ORDER_VOTER_META_VALUES: "LISTS.ORDER_VOTER_META_VALUES",
        UPDATE_VOTER_META_VALUE_SEARCH_VALUE: "LISTS.UPDATE_VOTER_META_VALUE_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_META_VALUE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_META_VALUE_MODAL_DIALOG_DISPLAY",
        VOTER_META_VALUE_DELETE_MODE_UPDATED: "LISTS.VOTER_META_VALUE_DELETE_MODE_UPDATED",
        VOTER_META_VALUE_EDIT_MODE_UPDATED: "LISTS.VOTER_META_VALUE_EDIT_MODE_UPDATED",
        VOTER_META_VALUE_EDIT_VALUE_CHANGED: "LISTS.VOTER_META_VALUE_EDIT_VALUE_CHANGED",

        /* VOTER_ELECTION_ROLES */
        LOADED_VOTER_ELECTION_ROLES: "LISTS.LOADED_VOTER_ELECTION_ROLES",
        ORDER_VOTER_ELECTION_ROLES: "LISTS.ORDER_VOTER_ELECTION_ROLES",
        UPDATE_VOTER_ELECTION_ROLES_SEARCH_VALUE: "LISTS.UPDATE_VOTER_ELECTION_ROLES_SEARCH_VALUE",
        TOGGLE_DELETE_VOTER_ELECTION_ROLES_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_ELECTION_ROLES_MODAL_DIALOG_DISPLAY",
        VOTER_ELECTION_ROLES_DELETE_MODE_UPDATED: "LISTS.VOTER_ELECTION_ROLES_DELETE_MODE_UPDATED",
        VOTER_ELECTION_ROLES_EDIT_MODE_UPDATED: "LISTS.VOTER_ELECTION_ROLES_EDIT_MODE_UPDATED",
        VOTER_ELECTION_ROLES_EDIT_VALUE_CHANGED: "LISTS.VOTER_ELECTION_ROLES_EDIT_VALUE_CHANGED",

        /* USER_ROLE */
        USER_ROLES_LOADED: "LISTS.USER_ROLES_LOADED",
        ORDER_USER_ROLES: "LISTS.ORDER_USER_ROLES",
        UPDATE_USER_ROLE_SEARCH_VALUE: "LISTS.UPDATE_USER_ROLE_SEARCH_VALUE",
        TOGGLE_DELETE_USER_ROLE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_USER_ROLE_MODAL_DIALOG_DISPLAY",
        USER_ROLE_DELETE_MODE_UPDATED: "LISTS.USER_ROLE_DELETE_MODE_UPDATED",
        USER_ROLE_ADD_MODE_UPDATED: "LISTS.USER_ROLE_ADD_MODE_UPDATED",
        USER_ROLE_EDIT_MODE_UPDATED: "LISTS.USER_ROLE_EDIT_MODE_UPDATED",
        USER_ROLE_EDIT_VALUE_CHANGED: "LISTS.USER_ROLE_EDIT_VALUE_CHANGED",

        PERMISSION_GROUPS_LOADED: "LISTS.PERMISSION_GROUPS_LOADED",
        SYSTEM_MODULES_LOADED: "LISTS.SYSTEM_MODULES_LOADED",

        /* TEAMS */
        TEAMS_LOADED: "LISTS.TEAMS_LOADED",
        ORDER_TEAMS: "LISTS.ORDER_TEAMS",
        UPDATE_TEAM_SEARCH_VALUE: "LISTS.UPDATE_TEAM_SEARCH_VALUE",
        TOGGLE_DELETE_TEAM_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_TEAM_MODAL_DIALOG_DISPLAY",
        TEAM_DELETE_MODE_UPDATED: "LISTS.TEAM_DELETE_MODE_UPDATED",

        /* SMS PROVIDERS */
        SMS_PROVIDERS_LOADED: "LISTS.SMS_PROVIDERS_LOADED",
        UPDATE_PROVIDER: "LISTS.UPDATE_PROVIDER",

        /* SHAS_REPRESENTATIVE_ROLES */
        LOADED_SHAS_REPRESENTATIVE_ROLES: "LISTS.LOADED_SHAS_REPRESENTATIVE_ROLES",
        ORDER_SHAS_REPRESENTATIVE_ROLES: "LISTS.ORDER_SHAS_REPRESENTATIVE_ROLES",
        UPDATE_SHAS_REPRESENTATIVE_ROLES_SEARCH_VALUE: "LISTS.UPDATE_SHAS_REPRESENTATIVE_ROLES_SEARCH_VALUE",
        TOGGLE_DELETE_SHAS_REPRESENTATIVE_ROLES_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_SHAS_REPRESENTATIVE_ROLES_MODAL_DIALOG_DISPLAY",
        SHAS_REPRESENTATIVE_ROLES_DELETE_MODE_UPDATED: "LISTS.SHAS_REPRESENTATIVE_ROLES_DELETE_MODE_UPDATED",
        SHAS_REPRESENTATIVE_ROLES_EDIT_MODE_UPDATED: "LISTS.SHAS_REPRESENTATIVE_ROLES_EDIT_MODE_UPDATED",
        SHAS_REPRESENTATIVE_ROLES_EDIT_VALUE_CHANGED: "LISTS.SHAS_REPRESENTATIVE_ROLES_EDIT_VALUE_CHANGED",

        /* RELIGIOUS_COUNCIL_ROLES */
        LOADED_RELIGIOUS_COUNCIL_ROLES: "LISTS.LOADED_RELIGIOUS_COUNCIL_ROLES",
        ORDER_RELIGIOUS_COUNCIL_ROLES: "LISTS.ORDER_RELIGIOUS_COUNCIL_ROLES",
        UPDATE_RELIGIOUS_COUNCIL_ROLES_SEARCH_VALUE: "LISTS.UPDATE_RELIGIOUS_COUNCIL_ROLES_SEARCH_VALUE",
        TOGGLE_DELETE_RELIGIOUS_COUNCIL_ROLES_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_RELIGIOUS_COUNCIL_ROLES_MODAL_DIALOG_DISPLAY",
        RELIGIOUS_COUNCIL_ROLES_DELETE_MODE_UPDATED: "LISTS.RELIGIOUS_COUNCIL_ROLES_DELETE_MODE_UPDATED",
        RELIGIOUS_COUNCIL_ROLES_EDIT_MODE_UPDATED: "LISTS.RELIGIOUS_COUNCIL_ROLES_EDIT_MODE_UPDATED",
        RELIGIOUS_COUNCIL_ROLES_EDIT_VALUE_CHANGED: "LISTS.RELIGIOUS_COUNCIL_ROLES_EDIT_VALUE_CHANGED",

        /* CITY_SHAS_ROLES */
        LOADED_CITY_SHAS_ROLES: "LISTS.LOADED_CITY_SHAS_ROLES",
        ORDER_CITY_SHAS_ROLES: "LISTS.ORDER_CITY_SHAS_ROLES",
        UPDATE_CITY_SHAS_ROLES_SEARCH_VALUE: "LISTS.UPDATE_CITY_SHAS_ROLES_SEARCH_VALUE",
        TOGGLE_DELETE_CITY_SHAS_ROLES_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_CITY_SHAS_ROLES_MODAL_DIALOG_DISPLAY",
        CITY_SHAS_ROLES_DELETE_MODE_UPDATED: "LISTS.CITY_SHAS_ROLES_DELETE_MODE_UPDATED",
        CITY_SHAS_ROLES_EDIT_MODE_UPDATED: "LISTS.CITY_SHAS_ROLES_EDIT_MODE_UPDATED",
        CITY_SHAS_ROLES_EDIT_VALUE_CHANGED: "LISTS.CITY_SHAS_ROLES_EDIT_VALUE_CHANGED",

        /* INSTITUTES */
        LOADED_INSTITUTE: "LISTS.LOADED_INSTITUTE",
        ORDER_INSTITUTE: "LISTS.ORDER_INSTITUTE",
        UPDATE_INSTITUTE_SEARCH_VALUE: "LISTS.UPDATE_INSTITUTE_SEARCH_VALUE",
        TOGGLE_DELETE_INSTITUTE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_INSTITUTE_MODAL_DIALOG_DISPLAY",
        INSTITUTE_DELETE_MODE_UPDATED: "LISTS.INSTITUTE_DELETE_MODE_UPDATED",
        INSTITUTE_EDIT_MODE_UPDATED: "LISTS.INSTITUTE_EDIT_MODE_UPDATED",
        INSTITUTE_EDIT_VALUE_CHANGED: "LISTS.INSTITUTE_EDIT_VALUE_CHANGED",
        INSTITUTE_ADD_MODE_UPDATED: "LISTS.INSTITUTE_ADD_MODE_UPDATED",
        //LOAD_INSTITUTE_VALUES: "LISTS.LOAD_INSTITUTE_VALUES",

        /* INSTITUTE_GROUP */
        LOADED_INSTITUTE_GROUP: "LISTS.LOADED_INSTITUTE_GROUP",
        ORDER_INSTITUTE_GROUP: "LISTS.ORDER_INSTITUTE_GROUP",
        UPDATE_INSTITUTE_GROUP_SEARCH_VALUE: "LISTS.UPDATE_INSTITUTE_GROUP_SEARCH_VALUE",
        TOGGLE_DELETE_INSTITUTE_GROUP_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_INSTITUTE_GROUP_MODAL_DIALOG_DISPLAY",
        INSTITUTE_GROUP_DELETE_MODE_UPDATED: "LISTS.INSTITUTE_GROUP_DELETE_MODE_UPDATED",
        INSTITUTE_GROUP_EDIT_MODE_UPDATED: "LISTS.INSTITUTE_GROUP_EDIT_MODE_UPDATED",
        INSTITUTE_GROUP_EDIT_VALUE_CHANGED: "LISTS.INSTITUTE_GROUP_EDIT_VALUE_CHANGED",
        LOAD_INSTITUTE_GROUP_VALUES: "LISTS.LOAD_INSTITUTE_GROUP_VALUES",

        /* INSTITUTE_TYPE */
        LOADED_ALL_INSTITUTE_TYPE: "LISTS.LOADED_ALL_INSTITUTE_TYPE",
        LOADED_INSTITUTE_TYPE: "LISTS.LOADED_INSTITUTE_TYPE",
        ORDER_INSTITUTE_TYPE: "LISTS.ORDER_INSTITUTE_TYPE",
        UPDATE_INSTITUTE_TYPE_SEARCH_VALUE: "LISTS.UPDATE_INSTITUTE_TYPE_SEARCH_VALUE",
        TOGGLE_DELETE_INSTITUTE_TYPE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_INSTITUTE_TYPE_MODAL_DIALOG_DISPLAY",
        INSTITUTE_TYPE_DELETE_MODE_UPDATED: "LISTS.INSTITUTE_TYPE_DELETE_MODE_UPDATED",
        INSTITUTE_TYPE_EDIT_MODE_UPDATED: "LISTS.INSTITUTE_TYPE_EDIT_MODE_UPDATED",
        INSTITUTE_TYPE_EDIT_VALUE_CHANGED: "LISTS.INSTITUTE_TYPE_EDIT_VALUE_CHANGED",

        /* INSTITUTE_NETWORK */
        LOADED_INSTITUTE_NETWORK: "LISTS.LOADED_INSTITUTE_NETWORK",
        ORDER_INSTITUTE_NETWORK: "LISTS.ORDER_INSTITUTE_NETWORK",
        UPDATE_INSTITUTE_NETWORK_SEARCH_VALUE: "LISTS.UPDATE_INSTITUTE_NETWORK_SEARCH_VALUE",
        TOGGLE_DELETE_INSTITUTE_NETWORK_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_INSTITUTE_NETWORK_MODAL_DIALOG_DISPLAY",
        INSTITUTE_NETWORK_DELETE_MODE_UPDATED: "LISTS.INSTITUTE_NETWORK_DELETE_MODE_UPDATED",
        INSTITUTE_NETWORK_EDIT_MODE_UPDATED: "LISTS.INSTITUTE_NETWORK_EDIT_MODE_UPDATED",
        INSTITUTE_NETWORK_EDIT_VALUE_CHANGED: "LISTS.INSTITUTE_NETWORK_EDIT_VALUE_CHANGED",

        /* INSTITUTE_ROLE */
        LOAD_INSTITUTE_ROLES: "LISTS.LOAD_INSTITUTE_ROLES",
        LOADED_INSTITUTE_ROLES: "LISTS.LOADED_INSTITUTE_ROLES",
        ORDER_INSTITUTE_ROLES: "LISTS.ORDER_INSTITUTE_ROLES",
        UPDATE_INSTITUTE_ROLE_SEARCH_VALUE: "LISTS.UPDATE_INSTITUTE_ROLE_SEARCH_VALUE",
        TOGGLE_DELETE_INSTITUTE_ROLE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_INSTITUTE_ROLE_MODAL_DIALOG_DISPLAY",
        INSTITUTE_ROLE_DELETE_MODE_UPDATED: "LISTS.INSTITUTE_ROLE_DELETE_MODE_UPDATED",
        INSTITUTE_ROLE_EDIT_MODE_UPDATED: "LISTS.INSTITUTE_ROLE_EDIT_MODE_UPDATED",
        INSTITUTE_ROLE_EDIT_VALUE_CHANGED: "LISTS.INSTITUTE_ROLE_EDIT_VALUE_CHANGED",

        /* VOTER_GROUPS */
        LOADED_VOTER_GROUP: "LISTS.LOADED_VOTER_GROUP",
        GENERATE_HIERATICAL_VOTER_GROUP: "LISTS.GENERATE_HIERATICAL_VOTER_GROUP",
        TOGGLE_VOTER_GROUP_OPEN_STSTUS: "LISTS.TOGGLE_VOTER_GROUP_OPEN_STSTUS",
		EXPAND_OR_SHRINK_ALL: "LISTS.EXPAND_OR_SHRINK_ALL",
        VOTER_GROUP_DELETE_MODE_UPDATED: "LISTS.VOTER_GROUP_DELETE_MODE_UPDATED",
        TOGGLE_DELETE_VOTER_GROUP_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_VOTER_GROUP_MODAL_DIALOG_DISPLAY",
        VOTER_GROUP_EDIT_MODE_UPDATED: "LISTS.VOTER_GROUP_EDIT_MODE_UPDATED",
        VOTER_GROUP_ADD_MODE_UPDATED: "LISTS.VOTER_GROUP_ADD_MODE_UPDATED",
        VOTER_GROUP_EDIT_VALUE_CHANGED: "LISTS.VOTER_GROUP_EDIT_VALUE_CHANGED",

        DND_SORT_VOTER_GROUP: "LISTS.DND_SORT_VOTER_GROUP",
        DND_SORT_VOTER_GROUP_MODE_STARTED: "LISTS.DND_SORT_VOTER_GROUP_MODE_STARTED",
        DND_SORT_VOTER_GROUP_DROP: "LISTS.DND_SORT_VOTER_GROUP_DROP",
        DND_VOTER_GROUP_REVERT_TO_ORIGINAL: "LISTS.DND_VOTER_GROUP_REVERT_TO_ORIGINAL",

        /* PARTY_LIST */
        LOADED_PARTY_LISTS: "LISTS.LOADED_PARTY_LISTS",
        ORDER_PARTY_LISTS: "LISTS.ORDER_PARTY_LISTS",
        UPDATE_PARTY_LIST_SEARCH_VALUE: "LISTS.UPDATE_PARTY_LIST_SEARCH_VALUE",
        TOGGLE_DELETE_PARTY_LIST_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_PARTY_LIST_MODAL_DIALOG_DISPLAY",
        PARTY_LIST_DELETE_MODE_UPDATED: "LISTS.PARTY_LIST_DELETE_MODE_UPDATED",
        PARTY_LIST_EDIT_MODE_UPDATED: "LISTS.PARTY_LIST_EDIT_MODE_UPDATED",
        PARTY_LIST_EDIT_VALUE_CHANGED: "LISTS.PARTY_LIST_EDIT_VALUE_CHANGED",
        RESET_PARTY_LISTS: "LISTS.RESET_PARTY_LISTS",
        ADD_PARTY_LIST_MODE_UPDATED: "LISTS.ADD_PARTY_LIST_MODE_UPDATED",

        /* LANGUAGE */
        LOADED_LANGUAGES: "LISTS.LOADED_LANGUAGES",
        ORDER_LANGUAGES: "LISTS.ORDER_LANGUAGES",
        UPDATE_LANGUAGE_SEARCH_VALUE: "LISTS.UPDATE_LANGUAGE_SEARCH_VALUE",
        TOGGLE_DELETE_LANGUAGE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_LANGUAGE_MODAL_DIALOG_DISPLAY",
        LANGUAGE_DELETE_MODE_UPDATED: "LISTS.LANGUAGE_DELETE_MODE_UPDATED",
        LANGUAGE_EDIT_MODE_UPDATED: "LISTS.LANGUAGE_EDIT_MODE_UPDATED",
        LANGUAGE_EDIT_VALUE_CHANGED: "LISTS.LANGUAGE_EDIT_VALUE_CHANGED",

        /* CITY_DEPARTMENT */
        LOADED_CITY_DEPARTMENT: "LISTS.LOADED_CITY_DEPARTMENT",
        ORDER_CITY_DEPARTMENT: "LISTS.ORDER_CITY_DEPARTMENT",
        UPDATE_CITY_DEPARTMENT_SEARCH_VALUE: "LISTS.UPDATE_CITY_DEPARTMENT_SEARCH_VALUE",
        TOGGLE_DELETE_CITY_DEPARTMENT_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_CITY_DEPARTMENT_MODAL_DIALOG_DISPLAY",
        CITY_DEPARTMENT_DELETE_MODE_UPDATED: "LISTS.CITY_DEPARTMENT_DELETE_MODE_UPDATED",
        CITY_DEPARTMENT_EDIT_MODE_UPDATED: "LISTS.CITY_DEPARTMENT_EDIT_MODE_UPDATED",
        CITY_DEPARTMENT_EDIT_VALUE_CHANGED: "LISTS.CITY_DEPARTMENT_EDIT_VALUE_CHANGED",

        /* CSV_SOURCE */
        LOADED_CSV_SOURCE: "LISTS.LOADED_CSV_SOURCE",
        ORDER_CSV_SOURCE: "LISTS.ORDER_CSV_SOURCE",
        UPDATE_CSV_SOURCE_SEARCH_VALUE: "LISTS.UPDATE_CSV_SOURCE_SEARCH_VALUE",
        TOGGLE_DELETE_CSV_SOURCE_MODAL_DIALOG_DISPLAY: "LISTS.TOGGLE_DELETE_CSV_SOURCE_MODAL_DIALOG_DISPLAY",
        CSV_SOURCE_DELETE_MODE_UPDATED: "LISTS.CSV_SOURCE_DELETE_MODE_UPDATED",
        CSV_SOURCE_EDIT_MODE_UPDATED: "LISTS.CSV_SOURCE_EDIT_MODE_UPDATED",
        CSV_SOURCE_EDIT_VALUE_CHANGED: "LISTS.CSV_SOURCE_EDIT_VALUE_CHANGED",

        REQUESTS: {
            /* REQUEST TOPICS */
            LOADED_ALL_REQUESTS_TOPICS: 'LISTS.REQUESTS.LOADED_ALL_REQUESTS_TOPICS',

            LOADED_REQUEST_TOPICS: 'LISTS.REQUESTS.LOADED_REQUEST_TOPICS',
            LOADED_REQUEST_SUB_TOPICS: 'LISTS.REQUESTS.LOADED_REQUEST_SUB_TOPICS',
            LOAD_SUB_TOPICS: 'LISTS.REQUESTS.LOAD_SUB_TOPICS',
            ORDER_REQUEST_TOPICS: "LISTS.REQUESTS.ORDER_REQUEST_TOPICS",
            ORDER_REQUEST_SUB_TOPICS: "LISTS.REQUESTS.ORDER_REQUEST_SUB_TOPICS",
            UPDATE_REQUEST_TOPIC_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_TOPIC_SEARCH_VALUE",
            UPDATE_REQUEST_SUB_TOPIC_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_SUB_TOPIC_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_TOPIC_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_TOPIC_MODAL_DIALOG_DISPLAY",
            TOPIC_DELETE_MODE_UPDATED: "LISTS.REQUESTS.TOPIC_DELETE_MODE_UPDATED",
            TOPIC_EDIT_MODE_UPDATED: "LISTS.REQUESTS.TOPIC_EDIT_MODE_UPDATED",
            TOPIC_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.TOPIC_EDIT_VALUE_CHANGED",
            SUB_TOPIC_ADD_MODE_UPDATED: "LISTS.REQUESTS.SUB_TOPIC_ADD_MODE_UPDATED",
            MODULE_USERS: "LISTS.REQUESTS.MODULE_USERS",

            /* REQUEST TOPICS DND SORT */
            DND_SORT_TOPICS_MODE: "LISTS.REQUESTS.DND_SORT_TOPICS_MODE",
            DND_SORT_SUB_TOPICS_MODE: "LISTS.REQUESTS.DND_SORT_SUB_TOPICS_MODE",
            DND_SORT_TOPICS: "LISTS.REQUESTS.DND_SORT_TOPICS",
            DND_SORT_SUB_TOPICS: "LISTS.REQUESTS.DND_SORT_SUB_TOPICS",
            DND_SORT_TOPICS_DROP: "LISTS.REQUESTS.DND_SORT_TOPICS_DROP",
            DND_SORT_SUB_TOPICS_DROP: "LISTS.REQUESTS.DND_SORT_SUB_TOPICS_DROP",
            DND_TOPICS_REVERT_TO_ORIGINAL: "LISTS.REQUESTS.DND_TOPICS_REVERT_TO_ORIGINAL",
            DND_SUB_TOPICS_REVERT_TO_ORIGINAL: "LISTS.REQUESTS.DND_SUB_TOPICS_REVERT_TO_ORIGINAL",

            /* REQUEST_ACTION_TYPE */
            LOADED_REQUEST_ACTION_TYPE: "LISTS.REQUESTS.LOADED_REQUEST_ACTION_TYPE",
            ORDER_REQUEST_ACTION_TYPE: "LISTS.REQUESTS.ORDER_REQUEST_ACTION_TYPE",
            UPDATE_REQUEST_ACTION_TYPE_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_ACTION_TYPE_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_ACTION_TYPE_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_ACTION_TYPE_MODAL_DIALOG_DISPLAY",
            REQUEST_ACTION_TYPE_DELETE_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_ACTION_TYPE_DELETE_MODE_UPDATED",
            REQUEST_ACTION_TYPE_EDIT_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_ACTION_TYPE_EDIT_MODE_UPDATED",
            REQUEST_ACTION_TYPE_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.REQUEST_ACTION_TYPE_EDIT_VALUE_CHANGED",
            LOAD_REQUEST_ACTION_TYPE_TOPICS: "LISTS.REQUESTS.LOAD_REQUEST_ACTION_TYPE_TOPICS",

            /* REQUEST_ACTION_TOPIC */
            LOADED_REQUEST_ACTION_TOPIC: "LISTS.REQUESTS.LOADED_REQUEST_ACTION_TOPIC",
            ORDER_REQUEST_ACTION_TOPIC: "LISTS.REQUESTS.ORDER_REQUEST_ACTION_TOPIC",
            UPDATE_REQUEST_ACTION_TOPIC_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_ACTION_TOPIC_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_ACTION_TOPIC_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_ACTION_TOPIC_MODAL_DIALOG_DISPLAY",
            REQUEST_ACTION_TOPIC_DELETE_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_ACTION_TOPIC_DELETE_MODE_UPDATED",
            REQUEST_ACTION_TOPIC_EDIT_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_ACTION_TOPIC_EDIT_MODE_UPDATED",
            REQUEST_ACTION_TOPIC_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.REQUEST_ACTION_TOPIC_EDIT_VALUE_CHANGED",

            /* REQUEST_STATUS */
            REQUEST_STATUS_LOADED: "LISTS.REQUESTS.REQUEST_STATUS_LOADED",
            ORDER_REQUEST_STATUS: "LISTS.REQUESTS.ORDER_REQUEST_STATUS",
            UPDATE_REQUEST_STATUS_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_STATUS_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_STATUS_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_STATUS_MODAL_DIALOG_DISPLAY",
            REQUEST_STATUS_DELETE_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_STATUS_DELETE_MODE_UPDATED",
            REQUEST_STATUS_EDIT_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_STATUS_EDIT_MODE_UPDATED",
            REQUEST_STATUS_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.REQUEST_STATUS_EDIT_VALUE_CHANGED",
            ADD_REQUEST_STATUS_MODE_UPDATED: "LISTS.ADD_REQUEST_STATUS_MODE_UPDATED",
            LOADED_REQUEST_STATUS_TYPES: "LISTS.REQUESTS.LOADED_REQUEST_STATUS_TYPES",
            DND_SORT_REQUEST_STATUS: "LISTS.REQUESTS.DND_SORT_REQUEST_STATUS",
            DND_SORT_REQUEST_STATUS_MODE: "LISTS.REQUESTS.DND_SORT_REQUEST_STATUS_MODE",
            DND_SORT_REQUEST_STATUS_DROP: "LISTS.REQUESTS.DND_SORT_REQUEST_STATUS_DROP",
            DND_REQUEST_STATUS_REVERT_TO_ORIGINAL: "LISTS.REQUESTS.DND_REQUEST_STATUS_REVERT_TO_ORIGINAL",

            /* REQUEST_SOURCE */
            LOADED_REQUEST_SOURCE: "LISTS.REQUESTS.LOADED_REQUEST_SOURCE",
            ORDER_REQUEST_SOURCE: "LISTS.REQUESTS.ORDER_REQUEST_SOURCE",
            UPDATE_REQUEST_SOURCE_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_SOURCE_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_SOURCE_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_SOURCE_MODAL_DIALOG_DISPLAY",
            REQUEST_SOURCE_DELETE_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_SOURCE_DELETE_MODE_UPDATED",
            REQUEST_SOURCE_EDIT_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_SOURCE_EDIT_MODE_UPDATED",
            REQUEST_SOURCE_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.REQUEST_SOURCE_EDIT_VALUE_CHANGED",

            /* REQUEST_CLOSURE_REASON */
            LOADED_REQUEST_CLOSURE_REASON: "LISTS.REQUESTS.LOADED_REQUEST_CLOSURE_REASON",
            ORDER_REQUEST_CLOSURE_REASON: "LISTS.REQUESTS.ORDER_REQUEST_CLOSURE_REASON",
            UPDATE_REQUEST_CLOSURE_REASON_SEARCH_VALUE: "LISTS.REQUESTS.UPDATE_REQUEST_CLOSURE_REASON_SEARCH_VALUE",
            TOGGLE_DELETE_REQUEST_CLOSURE_REASON_MODAL_DIALOG_DISPLAY: "LISTS.REQUESTS.TOGGLE_DELETE_REQUEST_CLOSURE_REASON_MODAL_DIALOG_DISPLAY",
            REQUEST_CLOSURE_REASON_DELETE_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_CLOSURE_REASON_DELETE_MODE_UPDATED",
            REQUEST_CLOSURE_REASON_EDIT_MODE_UPDATED: "LISTS.REQUESTS.REQUEST_CLOSURE_REASON_EDIT_MODE_UPDATED",
            REQUEST_CLOSURE_REASON_EDIT_VALUE_CHANGED: "LISTS.REQUESTS.REQUEST_CLOSURE_REASON_EDIT_VALUE_CHANGED",
        },
        TABLE_CONTENT_UPDATED: "LISTS.TABLE_CONTENT_UPDATED",
        LIST_TAB_CHANGE: 'LISTS.LIST_TAB_CHANGE',
        LIST_CONTAINER_COLLAPSE_CHANGED: 'LISTS.LIST_CONTAINER_COLLAPSE_CHANGED',
        UPDATED_CURRENT_TABLE_SCROLLER_POSITION: 'LISTS.UPDATED_CURRENT_TABLE_SCROLLER_POSITION',
        TOGGLE_EDIT_MODE_MODAL_DIALOG_DISPLAY: 'LISTS.TOGGLE_EDIT_MODE_MODAL_DIALOG_DISPLAY',
    },

    PERMISSIONS: {
        LOADING_PERMISSION_GROUP: "PERMISSIONS.LOADING_PERMISSION_GROUP",
        LOADED_PERMISSION_GROUP: "PERMISSIONS.LOADED_PERMISSION_GROUP",
        PERMISSIONS_OPEN_MISSING_GROUP_MODAL: "PERMISSIONS.PERMISSIONS_OPEN_MISSING_GROUP_MODAL",
        LOADING_PERMISSIONS: "PERMISSIONS.LOADING_PERMISSIONS",
        LOADED_PERMISSIONS: "PERMISSIONS.LOADED_PERMISSIONS",
        TOGGLE_OPEN_PERMISSION_CHILDREN: "PERMISSIONS.TOGGLE_OPEN_PERMISSION_CHILDREN",
        TOGGLE_SELECT_PERMISSION: "PERMISSIONS.TOGGLE_SELECT_PERMISSION",
        SAVING_GROUP_PERMISSIONS: "PERMISSIONS.SAVING_GROUP_PERMISSIONS",
        SAVED_GROUP_PERMISSIONS: "PERMISSIONS.SAVED_GROUP_PERMISSIONS",
        GROUP_PERMISSION_EDIT_MODE_UPDATED: "PERMISSIONS.GROUP_PERMISSION_EDIT_MODE_UPDATED",
        CHANGE_GROUP_INPUT: "PERMISSIONS.CHANGE_GROUP_INPUT",
        CHANGED_INPUT: "PERMISSIONS.CHANGED_INPUT",
        CHANGE_CURRENT_URL_KEY: "PERMISSIONS.CHANGE_CURRENT_URL_KEY",
        SAVING_PERMISSION_NEW_GROUP: "PERMISSIONS.SAVING_PERMISSION_NEW_GROUP",
        SAVED_PERMISSION_NEW_GROUP: "PERMISSIONS.SAVED_PERMISSION_NEW_GROUP",
        SHOW_DELETE_MODAL: "permissions.SHOW_DELETE_MODAL",
        HIDE_DELETE_MODAL: "PERMISSIONS.HIDE_DELETE_MODAL",
        DELETING_PERMISSION_GROUP: "PERMISSIONS.DELETING_PERMISSION_GROUP",
        DELETED_PERMISSION_GROUP: "PERMISSIONS.DELETED_PERMISSION_GROUP",
        SHOW_CANT_DELETE_MODAL: "PERMISSIONS.SHOW_CANT_DELETE_MODAL",
        HIDE_CANT_DELETE_MODAL: "PERMISSIONS.HIDE_CANT_DELETE_MODAL",
        SHOW_MISSING_GROUP_MODAL: "PERMISSIONS.SHOW_MISSING_GROUP_MODAL",
        HIDE_MISSING_GROUP_MODAL: "PERMISSIONS.HIDE_MISSING_GROUP_MODAL",
        TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY: "PERMISSIONS.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY"
    },
    POLLS: {
        CALCULATING_PORTION: 'POLLS.CALCULATING_PORTION',
        UPDATE_CALCULATE_PORTION: 'POLLS.UPDATE_CALCULATE_PORTION',
    },
    EXAMPLES: {
        LOAD_DND_SORT_ITEMS: 'EXAMPLES.LOAD_DND_SORT_ITEMS',
        SORT_ITEMS: 'EXAMPLES.SORT_ITEMS',
        SORT_ITEMS_REVERT_TO_ORIGINAL: 'EXAMPLES.SORT_ITEMS_REVERT_TO_ORIGINAL',
        SORT_ITEMS_DROP: 'EXAMPLES.SORT_ITEMS_DROP'
    }
};

export function loadMenu(store) {
    store.dispatch({ type: ActionTypes.MENU.LOADING_MENU });
    Axios({
        url: window.Laravel.baseURL + 'api/system/side_menu',
        method: 'get'
    }).then(function (result) {
        //parse side menu from list to tree
        var sideMenuData = result.data.data;
        var menuHashMap = [];
        var menuArray = [];
        sideMenuData.forEach(function (sideMenu) {
            menuHashMap[sideMenu.id] = sideMenu;
            sideMenu.children = [];
            sideMenu.showSearch = true;

        });
        sideMenuData.forEach(function (sideMenu) {
            if (sideMenu.parent_id == 0) {
                menuArray.push(sideMenu);
            } else {
                var parentId = sideMenu.parent_id;
                menuHashMap[parentId].children.push(sideMenu);
            }
        });

        store.dispatch({ type: ActionTypes.MENU.LOADED_MENU, menu: menuArray });
    });
}

export function loadSystemSettings(store) {

    Axios({
        url: window.Laravel.baseURL + 'api/system/settings',
        method: 'get'
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LOADED_SYSTEM_SETTINGS, data: result.data.data });
    });
}

/*
Load user area , sub-areas and cities by user's geographic filters
*/
export function loadUserGeographicFilteredLists(store, screenPermission, geoListRequsted = null, inCurrentElectionCampaign = false) {
    store.dispatch({ type: ActionTypes.LOADING_CURRENT_USER });
    let defaultGeoList = { cities: true, areas: true, sub_areas: true }
    let data = geoListRequsted ? geoListRequsted : defaultGeoList;
    data.screen_permission = screenPermission;
    if (inCurrentElectionCampaign) { data.in_current_election_campaign = true; }
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current/geographic_lists',
        method: 'get',
        params: data
    }).then(function (response) {
 
        store.dispatch({ type: ActionTypes.LOADED_CURRENT_USER_GEOGRAPHIC_FILTERED_LISTS, data: response.data.data });
    }, function (error) {

    });
}

/**
 * load current user.
 *
 * @param store
 */
export function loadCurrentUser(store) {
    store.dispatch({ type: ActionTypes.LOADING_CURRENT_USER });
    Axios({
        //add timestamp: so the browser will not load the user from the cashe when user clicks back ...
        url: window.Laravel.baseURL + 'api/system/users/current?time=' + Date.now(),
        method: 'get'
    }).then(function (result) {
        var user = result.data.data;
        var permissions = {};
        user.permissions.forEach(function (permission) {
            permissions[permission.operation_name] = true;
        });
        user.permissions = permissions;
        store.dispatch({ type: ActionTypes.LOADED_CURRENT_USER, user: user });
    }, function (error) {
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response.status == '401') {
            // window.location.href = window.Laravel.baseLoginURL
            // sessionStorage.removeItem('access_token');
        }
    });
}

/**
 * change user password
 * @param dispatch
 * @param oldPassword
 * @param newPassword
 */
export function changeUserPassword(dispatch, oldPassword, newPassword, otherUserKey) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    let dataObj = {
        old_password: oldPassword,
        new_password: newPassword,
        type: 1
    }
    let urlPath = 'current';
    if(otherUserKey){
        delete dataObj.old_password;
        dataObj.other_user_key = otherUserKey;
        urlPath = 'other/password';
    }
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + urlPath,
        method: 'put',
        data: dataObj 
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.HIDE_RESET_PASSWORD_MODAL });
        dispatch({ type: ActionTypes.USERS.CHANGE_PASSWORD_ERROR_MESSAGE, errorMessage: '' });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.USERS.CHANGE_PASSWORD_ERROR_MESSAGE, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}
/**
 * change user password
 * @param dispatch
 * @param newPassword
 */
export function changeOtherUserPassword(dispatch, newPassword) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/other',
        method: 'put',
        data: {
            new_password: newPassword,
            type: 1
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.HIDE_RESET_PASSWORD_MODAL });
        dispatch({ type: ActionTypes.USERS.CHANGE_PASSWORD_ERROR_MESSAGE, errorMessage: '' });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;
                if (errorCode) {
                    dispatch({ type: ActionTypes.USERS.CHANGE_PASSWORD_ERROR_MESSAGE, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

/*
updates whether an admin user can see all voters

*/
export function updateViewAllVoters(dispatch, isViewAllVoters) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current',
        method: "put",
        data: {
            is_view_all_voters: isViewAllVoters,
            type: 2
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.HEADER.UPDATE_ALL_VOTERS_MODE, value: isViewAllVoters });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function loadCurrentCampaign(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/current/campaign',
        method: 'get'
    }).then(function (result) {
        dispatch({ type: ActionTypes.LOADED_CURRENT_CAMPAIGN, campaign: result.data.data });
    });
}

/**
 * load errors and put them in errors module
 *
 * @param store
 */
export function loadErrors(store) {
    store.dispatch({ type: ActionTypes.LOADING_ERRORS });
    Axios({
        url: window.Laravel.baseURL + 'api/system/errors',
        method: 'get'
    }).then(function (result) {
        var errorsArray = result.data.data;
        errorsArray.forEach(function (error) {
            errors[error.code] = error.message;
        });
        store.dispatch({ type: ActionTypes.LOADED_ERRORS });
    });
}

/**
 * Load permision group by key.
 *
 * @param dispatch
 * @param router
 * @param roleKey
 */
export function loadUserRolePermissions(dispatch, router, roleKey) {
    dispatch({ type: ActionTypes.PERMISSIONS.LOADING_PERMISSION_GROUP });
    Axios.get(window.Laravel.baseURL + `api/system/user/role/${roleKey}/permissions`)
        .then(function (result) {
            var selectedUserRole = result.data.data;
            var selectedPermissions = {};
            selectedUserRole.permissions.map(function (permission) {
                selectedPermissions[permission.key] = true;
            });
            dispatch({ type: ActionTypes.PERMISSIONS.LOADED_PERMISSION_GROUP, selectedUserRole, selectedPermissions: selectedPermissions })
        }).catch(function (error) {
            router.push('system/permission_groups/');
            dispatch({ type: ActionTypes.PERMISSIONS.LOADED_PERMISSION_GROUP, selectedUserRole: { key: null, name: null, permissions: [] }, selectedPermissions: {} });
            dispatch({ type: ActionTypes.PERMISSIONS.SHOW_MISSING_GROUP_MODAL });
        });
}
/**
 * Load all system permissions.
 *
 * @param dispatch
 */
export function loadPermissions(dispatch) {
    dispatch({ type: ActionTypes.PERMISSIONS.LOADING_PERMISSIONS });
    Axios.get(window.Laravel.baseURL + "api/system/permissions")
        .then(function (result) {
            var permissions = result.data.data;
            var permissionHashMap = [];
            var permissionArray = [];
            permissions.forEach(function (permission) {
                permissionHashMap[permission.id] = permission;
                permission.children = [];
            });
            permissions.forEach(function (permission) {
                if (permission.parent_id == 0) {
                    permissionArray.push(permission);
                    permission.parent = 0;
                } else {
                    var parentId = permission.parent_id;
                    permissionHashMap[parentId].children.push(permission);
                    permission.parent = permissionHashMap[parentId];
                }
            });
            dispatch({ type: ActionTypes.PERMISSIONS.LOADED_PERMISSIONS, permissions: permissionArray })
        });
}

/**
 * Update permissions of permission group.
 * Receives array of integers that corresponds to permission ids
 *
 * @param dispatch
 * @param groupKey
 * @param permissions
 */
export function updateUserRolePermissions(dispatch, groupKey, userPermissions, groupName) {
    dispatch({ type: ActionTypes.PERMISSIONS.SAVING_GROUP_PERMISSIONS });
    let permissions = [];
    for (let key in userPermissions) {
        if (userPermissions.hasOwnProperty(key) && (userPermissions[key] != false)) permissions.push(key);
    }
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + `api/system/user/role/${groupKey}/permissions`,
        method: 'put',
        data: {
            permissions: permissions,
            group_name: groupName,
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.permissionGroups.Items' });
        dispatch({ type: ActionTypes.PERMISSIONS.SAVED_GROUP_PERMISSIONS });
        dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.PERMISSIONS.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}



/* COUNTRIES */
export function loadCountries(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/countries',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_COUNTRIES, countries: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_COUNTRIES });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteCountry(store, countryKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/countries/' + countryKey,
        method: "delete"
    }).then(function () {
        loadCountries(store.dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateCountry(store, countrykey, countryName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/countries/' + countrykey,
        method: "put",
        data: {
            name: countryName
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'country' });
        loadCountries(store.dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function loadTeamDataByKey(dispatch, teamKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/team/' + teamKey,
        method: "get",

    }).then(function (result) {
        if (result.data.data) {
            dispatch({ type: ActionTypes.TEAMS.CHANGE_CHOOSE_TEAM_NAME, data: result.data.data });
        }
    });
}
export function loadTeamRequestsTopic(dispatch, teamKey) {
    Axios({
        url: window.Laravel.baseURL + `api/system/team/${teamKey}/requests-topics`,
        method: "get",

    }).then(function (result) {
        dispatch({ type: ActionTypes.TEAMS.REQUESTS_TOPICS, requestsTopicsData: result.data.data });
    });
}

export function deleteExistingDepartment(dispatch, teamKey, depID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/team/' + teamKey + '/department/' + depID,
        method: "delete",

    }).then(function (result) {
        dispatch({ type: ActionTypes.TEAMS.UPDATE_EXISTING_DEPARTMENTS, data: result.data.data });
    });
}

export function editExistingDepartmentName(dispatch, teamKey, depID, newDepName, editRowIndex) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/team/' + teamKey + '/department/' + depID,
        method: "put",
        data: {
            dep_name: newDepName
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.teams.departments' });
        dispatch({ type: ActionTypes.TEAMS.EDITED_DEP_ROW_SUCCESFULLY, data: editRowIndex, newName: newDepName });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function deleteExistingGeoTemplate(dispatch, teamKey, filterID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/geoTemplates/' + filterID,
        method: "delete",

    }).then(function (result) {
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({ type: ActionTypes.TEAMS.HIDE_CONFIRM_DELETE_DELETES });
    });
}

export function deleteExistingSectorialTemplate(dispatch, teamKey, filterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/sectorialTemplates/' + filterKey,
        method: "delete",

    }).then(function (result) {
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({ type: ActionTypes.TEAMS.HIDE_CONFIRM_DELETE_DELETES });
    });
}

export function addNewGeoTemplate(dispatch, teamKey, labelName, entityType, entityID) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/geoTemplates',
        method: "post",
        data: {
            label_name: labelName,
            entity_type: entityType,
            entity_id: entityID,
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({
            type: ActionTypes.TEAMS.HIDE_ADD_NEW_GEO_TPL_MODAL
        });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}


export function editExistingGeoTemplate(dispatch, teamKey, geoKey, labelName, entityType, entityID) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/geoTemplates/' + geoKey,
        method: "put",
        data: {
            label_name: labelName,
            entity_type: entityType,
            entity_id: entityID,
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({
            type: ActionTypes.TEAMS.HIDE_ADD_NEW_GEO_TPL_MODAL
        });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function addNewTeamDepartment(dispatch, teamKey, depName) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/departments',
        method: "post",
        data: {
            dep_name: depName
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.teams.departments' });
        dispatch({ type: ActionTypes.TEAMS.UPDATE_EXISTING_DEPARTMENTS, data: result.data.data });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function addNewTeam(store, router, teamName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams',
        method: "post",
        data: {
            team_name: teamName
        }

    }).then(function (result) {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        router.push('system/teams/' + result.data.data);
        loadTeams(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

    });

}

export function editTeamData(dispatch, teamKey, teamName, leaderID, viewable, crm_center) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    crm_center = crm_center ? 1 : 0;
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey,
        method: "put",
        data: {
            team_name: teamName,
            leader_id: leaderID,
            viewable,
            crm_center,
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.teams.general' });
        dispatch({ type: ActionTypes.TEAMS.CHANGE_TEAM_NAME_IN_TEAMS_LIST_ONLY, teamKey, teamName });
        loadTeamDataByKey(dispatch, teamKey);
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function loadMinimalUsersForTeam(dispatch, teamKey = null, hasRequestModuleRole,system_name_module=null,only_active_user=null) {
    let setStaticData = true;
    let teamPath = ''
    if (teamKey != null && teamKey != undefined) {
        teamPath = '/' + teamKey;
        setStaticData = false;
    }
    let theUrl = window.Laravel.baseURL + `api/system/teams${teamPath}/users`;
    Axios({
        url: theUrl,
        method: "get",
        params: {only_users_with_crm_role: hasRequestModuleRole,'system_name_module':system_name_module,'only_active_user':only_active_user?1:0}
    }).then(function (result) {
        dispatch({ type: ActionTypes.TEAMS.LOADED_MINIMAL_DATA, data: result.data.data, setStaticData });
    });

}

export function addCountry(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/countries',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    }).catch(function (error) {
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/* ETHNIC */
export function loadEthnic(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic',
        method: "get"
    }).then(function (result) {
        loadCountries(dispatch);
        dispatch({ type: ActionTypes.LISTS.LOADED_ETHNIC, ethnic: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_ETHNIC });
    }, function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteEthnic(store, ethnickey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic/' + ethnickey,
        method: "delete"
    }).then(function () {
        loadEthnic(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateEthnic(store, ethnicGroup) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic/' + ethnicGroup.key,
        method: "put",
        data: {
            name: ethnicGroup.name,
            sephardi: ethnicGroup.sephardi
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'Ethnic' });
        loadEthnic(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addEthnic(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadEthnic(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    }).catch(function (error) {
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/* RELIGIOUS GROUPS */
export function loadReligiousGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups',
        method: "get"
    }).then(function (result) {
        loadCountries(dispatch);
        dispatch({ type: ActionTypes.LISTS.LOADED_RELIGIOUS_GROUPS, religiousGroups: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_RELIGIOUS_GROUPS });
    }, function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteReligiousGroup(store, religiousGroupKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups/' + religiousGroupKey,
        method: "delete"
    }).then(function () {
        loadReligiousGroups(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateReligiousGroup(store, religiousGroup) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups/' + religiousGroup.key,
        method: "put",
        data: {
            name: religiousGroup.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'ReligiousGroup' });
        loadReligiousGroups(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addReligiousGroup(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadReligiousGroups(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/* CITIES */
export function loadCities(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.CITIES_LOADED, cities: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_CITIES });
        dispatch({ type: ActionTypes.LISTS.UPDATE_CURRENT_DISPLAYED_CITIES });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteCity(store, citykey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities/' + citykey,
        method: "delete"
    }).then(function () {
        loadCities(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateCity(store, citykey, city) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities/' + citykey,
        method: "put",
        data: {
            city
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'city' });
        loadCities(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addCity(store, city) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities',
        method: "post",
        data: {
            city
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadCities(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* Areas Groups*/
export function loadAreasGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/areas-groups',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_AREAS_GROUPS, areasGroups: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_AREAS_GROUPS });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

/* AREAS */

export function loadAllAreas(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/areas',
        method: 'get',
        params: {}
    }).then(function (response) {
        dispatch({ type: ActionTypes.LOADED_GENERAL_AREAS, areas: response.data.data });
    });
}

export function loadAreas(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/areas',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_AREAS, areas: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_AREAS });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}


export function deleteArea(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/areas/' + key,
        method: "delete"
    }).then(function () {
        loadAreas(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let message = data.message || false;
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateArea(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/areas/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'area' });
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadAreas(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addArea(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/areas',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadAreas(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* SUBAREAS */
export function loadSubAreas(store, areaKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sub_areas/' + areaKey,
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_SUBAREAS, subAreas: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_SUBAREAS });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteSubArea(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sub_areas/' + key,
        method: "delete"
    }).then(function () {
        loadSubAreas(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateSubArea(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sub_areas/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'subArea' });
        loadSubAreas(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addSubArea(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sub_areas',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadSubAreas(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* NEIGHBORHOODS */
export function loadNeighborhoods(store, key , loadFromLists = true, requestData = {}) {
    let urlLink = window.Laravel.baseURL + 'api/system';
	if(loadFromLists){
		urlLink += '/lists/cities/' + key + '/neighborhoods';
	}else{
		urlLink += '/cities/' + key + '/neighborhoods';
    }

    Axios({
        url: urlLink,
        method: "get",
        params: requestData
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_NEIGHBORHOODS, neighborhoods: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_NEIGHBORHOODS });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteNeighborhood(store, neighborhoodKey, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey,
        method: "delete"
    }).then(function () {
        loadNeighborhoods(store, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateNeighborhood(store, item, cityKey) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'neighborhood' });
        loadNeighborhoods(store, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addNeighborhood(store, item, cityKey) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadNeighborhoods(store, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* NEIGHBORHOOD CLUSTERS */

/** Global function for get list of ballotBoxes with cluster id */
export function loadBallotsByClusterKey(dispatch, clusterKey) {

    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: 'get',
    }).then(function (result) {
        let ballotBoxes = result.data.data;
        for (let i in ballotBoxes) {
            ballotBoxes[i].name = 'קלפי ' + ballotBoxes[i].name;
        }
        dispatch({ type: ActionTypes.LISTS.LOADED_BULLOTS_BOXES, ballotBoxes: result.data.data });
    });
}
export function loadClusters(dispatch, cityKey , loadFromLists = true, requestData = {}) {
    let loadURL = window.Laravel.baseURL +  'api/system';
	if(loadFromLists){
		loadURL += '/lists/cities/' + cityKey + '/clusters';
	}else{
        loadURL += '/cities/' + cityKey + '/clusters';
    }

    Axios({
        url: loadURL,
        method: "get",
        params: requestData
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_CLUSTERS, clusters: result.data.data });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function loadNeighborhoodClusters(store, key) {

    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + key + '/clusters',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_NEIGHBORHOOD_CLUSTERS, clusters: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_NEIGHBORHOOD_CLUSTERS });
        store.dispatch({ type: ActionTypes.LISTS.LOAD_NEIGHBORHOOD_CLUSTERS, key: key });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}
export function loadCityClusters(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities/' + key + '/clusters',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_NEIGHBORHOOD_CLUSTERS, clusters: result.data.data, key:null });
        dispatch({ type: ActionTypes.LISTS.ORDER_NEIGHBORHOOD_CLUSTERS });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch)
    });
}

export function loadDashboardNeighborhoodClusters(store, key, requestData = {}) {

    Axios({
        url: window.Laravel.baseURL + 'api/system/neighborhoods/' + key + '/clusters',
        method: "get",
        params: requestData
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_CLUSTERS, clusters: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_CLUSTERS });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch)
    });
}


export function addNeighborhoodClusters(store, neighborhoodKey, data) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey + '/clusters',
        method: "post",
        data: data
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadNeighborhoodClusters(store, neighborhoodKey);
    },function (error) {
        displayErrorMessage(error,store.dispatch)
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}
export function transferNeighborhoodClusters(store, neighborhoodTransfer, currentNeighborhoodKey, data, modalName, cityKey = null) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodTransfer + '/clusters',
        method: "put",
        data: data
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        if (currentNeighborhoodKey != null) {
            loadNeighborhoodClusters(store, currentNeighborhoodKey);
        }else if(cityKey != null){
            loadCityClusters(store.dispatch, cityKey);
        }
        store.dispatch({ type: ActionTypes.LISTS.TOGGLE_DISPLAY_UPDATE_CLUSTERS_MODALS, modalName: modalName, displayModal: false });

    }, function (error) {
        displayErrorMessage(error, store.dispatch)
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}
export function deleteNeighborhoodClusterList(store, neighborhoodKey, requestData, modalName) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey + '/clusters',
        method: "delete",
        data: requestData
    }).then(function () {
        loadNeighborhoodClusters(store, neighborhoodKey);
        store.dispatch({ type: ActionTypes.LISTS.TOGGLE_DISPLAY_UPDATE_CLUSTERS_MODALS, modalName: modalName, displayModal: false });
    },function (error) {
        displayErrorMessage(error,store.dispatch)
    });
}
export function deleteNeighborhoodCluster(store, neighborhoodKey, clusterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey + '/clusters/' + clusterKey,
        method: "delete"
    }).then(function () {
        loadNeighborhoodClusters(store, neighborhoodKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch)
    });
}

export function changeClustersPrefix(store, neighborhoodKey,cityKey, requestData, modalName) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey + '/clusters/prefix',
        method: "put",
        data: requestData
    }).then(function () {
        store.dispatch({ type: ActionTypes.LISTS.TOGGLE_DISPLAY_UPDATE_CLUSTERS_MODALS, modalName: modalName, displayModal: false });
        if (neighborhoodKey != null) {
            loadNeighborhoodClusters(store, neighborhoodKey);
        }else if(cityKey != null){
            loadCityClusters(store.dispatch, cityKey);
        }
    } ,function (error) {
        displayErrorMessage(error,store.dispatch)
    });
}
export function updateCluster(store, neighborhoodKey, cityKey, clusterKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/neighborhoods/' + neighborhoodKey + '/cluster/' + clusterKey,
        method: "put",
        data: requestData
    }).then(function () {
        if (neighborhoodKey != null) {
            loadNeighborhoodClusters(store, neighborhoodKey);
        }else if(cityKey != null){
            loadCityClusters(store.dispatch, cityKey);
        }
    } ,function (error) {
        displayErrorMessage(error,store.dispatch)
    });
}

/* STREETS */
export function loadStreets(dispatch, key) {
    if (key == undefined) {
        dispatch({ type: ActionTypes.LISTS.LOADED_STREETS, streets: [] });
    } else {
        Axios({
            url: window.Laravel.baseURL + 'api/system/lists/cities/' + key + '/streets',
            method: "get"
        }).then(function (result) {
            dispatch({ type: ActionTypes.LISTS.LOADED_STREETS, streets: result.data.data });
            dispatch({ type: ActionTypes.LISTS.ORDER_STREETS });
        }).catch(function (error) {
            let response = error.response || false;
            if (response) {
                let data = response.data || false;
                if (data) {
                    let errorCode = data.error_code || false;

                    if (errorCode) {
                        dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                    }
                }
            }
        });
    }
}


export function loadStreetsWithoutPermission(dispatch, key) {
    if (key == undefined) {
        dispatch({ type: ActionTypes.LISTS.LOADED_STREETS, streets: [] });
    } else {
        Axios({
            url: window.Laravel.baseURL + 'api/system/cities/' + key + '/streets',
            method: "get"
        }).then(function (result) {
            dispatch({ type: ActionTypes.LISTS.LOADED_STREETS, streets: result.data.data });
            dispatch({ type: ActionTypes.LISTS.ORDER_STREETS });
        }).catch(function (error) {
            let response = error.response || false;
            if (response) {
                let data = response.data || false;
                if (data) {
                    let errorCode = data.error_code || false;

                    if (errorCode) {
                        dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                    }
                }
            }
        });
    }
}

export function deleteStreet(dispatch, streetKey, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/streets/' + streetKey,
        method: "delete"
    }).then(function () {
        loadStreets(dispatch, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateStreet(dispatch, item, cityKey) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/streets/' + item.key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadStreets(dispatch, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addStreet(dispatch, item, cityKey) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/streets',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadStreets(dispatch, cityKey);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}


/* PHONE_TYPES */
export function loadPhoneType(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/phone_type',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_PHONE_TYPES, types: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_PHONE_TYPES });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deletePhoneType(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/phone_type/' + key,
        method: "delete"
    }).then(function () {
        loadPhoneType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updatePhoneType(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/phone_type/' + key,
        method: "put",
        data: {
            name: name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'phoneType' });
        loadPhoneType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addPhoneType(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/phone_type',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadPhoneType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_TITLE */
export function loadVoterTitle(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/titles',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_TITLE, titles: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_TITLE });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterTitle(store, voterTitleKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/titles/' + voterTitleKey,
        method: "delete"
    }).then(function () {
        loadVoterTitle(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterTitle(store, voterTitlekey, voterTitleName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/titles/' + voterTitlekey,
        method: "put",
        data: {
            name: voterTitleName
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterTitle(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterTitle(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/titles',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterTitle(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_ENDING */
export function loadVoterEnding(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/endings',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_ENDING, endings: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_ENDING });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterEnding(store, voterEndingKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/endings/' + voterEndingKey,
        method: "delete"
    }).then(function () {
        loadVoterEnding(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterEnding(store, voterEndingkey, voterEndingName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/endings/' + voterEndingkey,
        method: "put",
        data: {
            name: voterEndingName
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterEnding' });
        loadVoterEnding(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterEnding(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/endings',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterEnding(store.dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* SUPPORT_STATUS */
export function loadSupportStatus(store , loadFromLists=true) {
    Axios({
        url: window.Laravel.baseURL + 'api/system' + (loadFromLists ? '/lists' : '') + '/support/status',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_SUPPORT_STATUS, endings: result.data.data });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteSupportStatus(store, supportStatusKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/support/status/' + supportStatusKey,
        method: "delete"
    }).then(function () {
        loadSupportStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateSupportStatus(store, supportStatuskey, supportStatusName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/support/status/' + supportStatuskey,
        method: "put",
        data: {
            name: supportStatusName
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'SupportStatus' });
        loadSupportStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function updateSupportStatusOrder(store, list) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/support/status',
        method: "put",
        data: {
            list
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'SupportStatus' });
        loadSupportStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addSupportStatus(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/support/status',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadSupportStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_ACTION_TYPE */
export function loadVoterActionType(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/types',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_ACTION_TYPE, types: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_ACTION_TYPE });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterActionType(store, voterEndingKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/types/' + voterEndingKey,
        method: "delete"
    }).then(function () {
        loadVoterActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterActionType(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/types/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterActionType' });
        loadVoterActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterActionType(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/types',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_ACTION_TOPIC */
export function loadVoterActionTopics(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/topics/' + key,
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_ACTION_TOPIC, topics: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_ACTION_TOPIC });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterActionTopic(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/topics/' + key,
        method: "delete"
    }).then(function () {
        loadVoterActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterActionTopic(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/topics/' + item.key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterActionTopic' });
        loadVoterActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterActionTopic(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/action/topics',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* REQUEST_ACTION_TYPE */
export function loadRequestActionType(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/types',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_ACTION_TYPE, types: result.data.data });
        dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_ACTION_TYPE });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteRequestActionType(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/types/' + key,
        method: "delete"
    }).then(function () {
        loadRequestActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateRequestActionType(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/types/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'requestActionType' });
        loadRequestActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addRequestActionType(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/types',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestActionType(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* REQUEST_ACTION_TOPIC */
export function loadRequestActionTopics(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/topics/' + key,
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_ACTION_TOPIC, topics: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_ACTION_TOPIC });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteRequestActionTopic(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/topics/' + key,
        method: "delete"
    }).then(function () {
        loadRequestActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateRequestActionTopic(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/topics/' + item.key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'requestActionTopic' });
        loadRequestActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addRequestActionTopic(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/action/topics',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestActionTopics(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }


        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_META_KEY */
export function loadVoterMetaKeys(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/keys',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_META_KEY, keys: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_META_KEY });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterMetaKey(store, voterEndingKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/keys/' + voterEndingKey,
        method: "delete"
    }).then(function () {
        loadVoterMetaKeys(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterMetaKey(store, metaKey) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/keys/' + metaKey.key,
        method: "put",
        data: {
            metaKey
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterMetaKey' });
        loadVoterMetaKeys(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterMetaKey(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/keys',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterMetaKeys(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}


/* VOTER_META_VALUES */
export function loadVoterMetaValues(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/values/' + key,
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_META_VALUES, values: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_META_VALUES });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteVoterMetaValue(store, itemKey, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/values/' + itemKey,
        method: "delete"
    }).then(function () {
        loadVoterMetaValues(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateVoterMetaValue(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/values/' + item.key,
        method: "put",
        data: {
            value: item.value
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterMetaValue' });
        loadVoterMetaValues(store, key);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addVoterMetaValue(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/meta/values',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterMetaValues(store, key);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* INSTITUTE */
export function loadInstitute(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institutes',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_INSTITUTE, data: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_INSTITUTE });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteInstitute(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institutes/' + key,
        method: "delete"
    }).then(function () {
        loadInstitute(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateInstitute(dispatch, itemKey, institute) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institutes/' + itemKey,
        method: "put",
        data: {
            institute
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'institute' });
        loadInstitute(dispatch);
    }, function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addInstitute(dispatch, institute) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institutes',
        method: "post",
        data: {
            institute
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'institute' });
        loadInstitute(dispatch);
    }, function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* INSTITUTE_GROUP */
export function loadInstituteGroups(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/groups',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_INSTITUTE_GROUP, keys: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_INSTITUTE_GROUP });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteInstituteGroup(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/groups/' + key,
        method: "delete"
    }).then(function () {
        loadInstituteGroups(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateInstituteGroup(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/groups/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'instituteGroup' });
        loadInstituteGroups(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addInstituteGroup(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/groups',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadInstituteGroups(store);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* INSTITUTE_TYPE */
export function loadAllInstituteTypes(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/types',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_ALL_INSTITUTE_TYPE, values: result.data.data });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}
export function loadInstituteTypes(dispatch, key = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/groups/' + key + '/types',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_INSTITUTE_TYPE, values: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_INSTITUTE_TYPE });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteInstituteType(store, itemKey, typeKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/types/' + itemKey,
        method: "delete"
    }).then(function () {
        loadInstituteTypes(store.dispatch, typeKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateInstituteType(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/types/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'InstituteType' });
        loadInstituteTypes(store.dispatch, key);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addInstituteType(store, item, key) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/types',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadInstituteTypes(store.dispatch, key);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* INSTITUTE_ROLE */
export function loadInstituteRoles(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/types/' + key + '/roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_INSTITUTE_ROLES, list: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_INSTITUTE_ROLES });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteInstituteRole(store, key, typeKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/roles/' + key,
        method: "delete"
    }).then(function () {
        loadInstituteRoles(store, typeKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateInstituteRole(store, item, typeKey) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/roles/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadInstituteRoles(store, typeKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addInstituteRole(store, item, typeKey) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/roles',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadInstituteRoles(store, typeKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* VOTER_ELECTION_ROLES */
export function loadVoterElectionRoles(store) {
    return Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/elections/roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_ELECTION_ROLES, roles: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_VOTER_ELECTION_ROLES });

        return result.data.data
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

/*export function deleteVoterElectionRoles(store, VoterElectionRolesKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/elections/roles/' + VoterElectionRolesKey,
        method: "delete"
    }).then(function () {
        loadVoterElectionRoles(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}*/

/*export function updateVoterElectionRoles(store, VoterElectionRoleskey, VoterElectionRolesName) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/elections/roles/' + VoterElectionRoleskey,
        method: "put",
        data: {
            name: VoterElectionRolesName
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterElectionRole' });
        loadVoterElectionRoles(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}*/

/*export function addVoterElectionRoles(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/voter/elections/roles',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterElectionRoles(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}*/

/* INSTITUTE_NETWORK */
export function loadInstituteNetworks(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/networks',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_INSTITUTE_NETWORK, keys: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_INSTITUTE_NETWORK });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteInstituteNetwork(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/networks/' + key,
        method: "delete"
    }).then(function () {
        loadInstituteNetworks(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateInstituteNetwork(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/networks/' + item.key,
        method: "put",
        data: {
            name: item.name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'InstituteNetwork' });
        loadInstituteNetworks(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addInstituteNetwork(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/institute/networks',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadInstituteNetworks(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* SHAS_REPRESENTATIVE_ROLES */
export function loadShasRepresentativeRoles(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/representative/roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_SHAS_REPRESENTATIVE_ROLES, roles: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_SHAS_REPRESENTATIVE_ROLES });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteShasRepresentativeRoles(store, ShasRepresentativeRolesKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/representative/roles/' + ShasRepresentativeRolesKey,
        method: "delete"
    }).then(function () {
        loadShasRepresentativeRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateShasRepresentativeRoles(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/representative/roles/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'ShasRepresentativeRole' });
        loadShasRepresentativeRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addShasRepresentativeRoles(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/representative/roles',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        loadShasRepresentativeRoles(store);
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}
/* End SHAS_REPRESENTATIVE_ROLES */

/* RELIGIOUS_COUNCIL_ROLES */
export function loadReligiousCouncilRoles(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/religious-council/roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_RELIGIOUS_COUNCIL_ROLES, roles: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_RELIGIOUS_COUNCIL_ROLES });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteReligiousCouncilRole(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/religious-council/roles/' + key,
        method: "delete"
    }).then(function () {
        loadReligiousCouncilRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateReligiousCouncilRole(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/religious-council/roles/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'ReligeousCouncilRole' });
        loadReligiousCouncilRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addReligiousCouncilRole(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/religious-council/roles',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        loadReligiousCouncilRoles(store);
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}
/* End RELIGIOUS_COUNCIL_ROLES */

/* CITY_SHAS_ROLES */
export function loadCityShasRoles(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/city-shas/roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.LOADED_CITY_SHAS_ROLES, roles: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_CITY_SHAS_ROLES });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteCityShasRole(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/city-shas/roles/' + key,
        method: "delete"
    }).then(function () {
        loadCityShasRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateCityShasRole(store, key, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/city-shas/roles/' + key,
        method: "put",
        data: {
            name
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'ReligeousCouncilRole' });
        loadCityShasRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addCityShasRole(store, name) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/city-shas/roles',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        loadCityShasRoles(store);
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}
/* End CITY_SHAS_ROLES */

export function loadPhoneTypes(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/phoneTypes',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.LOADED_PHONE_TYPES, data: result.data.data });
    });
}

/**
 * load cities.
 *
 * @param store
 */
export function loadGeneralCities(store) {
    store.dispatch({ type: ActionTypes.LOADING_CITIES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LOADED_GENERAL_CITIES, cities: result.data.data });
    })
}

/**
 * load teams.
 *
 * @param store
 */
export function loadTeams(store) {
    store.dispatch({ type: ActionTypes.LOADING_TEAMS });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LOADED_TEAMS, teams: result.data.data });
    })

}

export function loadMinimalTeams(dispatch, router, userKey, viewable) {

    // let theUrl = window.Laravel.baseURL + 'api/system/teams/minimal/';
    let theUrl = window.Laravel.baseURL;
    let setStaticTeams = true;
    if (userKey != null && userKey != undefined) {
        theUrl = window.Laravel.baseURL + 'api/system/users/' + userKey + '/teams';
        setStaticTeams = false;
    } else {
        theUrl = window.Laravel.baseURL + 'api/system/users/current/teams';
    }

    return Axios({
        url: theUrl,
        method: "get",
        params: {
            viewable: viewable
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.LOADED_MINIMAL_TEAMS, teams: result.data.data, setStaticTeams });
        if (router.params.reqKey == 'new') {
            if (result.data.data.length > 1) {
                // dispatch({type: CrmActions.ActionTypes.REQUEST.TEAM_HANDLER_CHANGE, teamHandlerName: ''});
            } else if (result.data.data.length == 1) {
                dispatch({ type: CrmActions.ActionTypes.REQUEST.TEAM_HANDLER_CHANGE, teamHandlerName: result.data.data[0].name });
            } else {
                dispatch({ type: CrmActions.ActionTypes.REQUEST.TEAM_HANDLER_CHANGE, teamHandlerName: '' });

            }
        }
    });
}

/**
 * load teams.
 *
 * @param store
 */
export function loadRoles(dispatch) {
    dispatch({ type: ActionTypes.LOADING_TEAMS });
    Axios({
        url: window.Laravel.baseURL + 'api/system/allRoles',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LOADED_ROLES, roles: result.data.data });
    });

}
export function loadUserRequestsTopics(dispatch, userKey) {
    Axios({
        url: window.Laravel.baseURL + `api/system/users/${userKey}/request-topics`,
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.LOADED_REQUESTS_TOPICS, userRequestTopics: result.data.data });
    });
}
export function deleteUserRequestsTopic(dispatch, userKey, userRequestTopicId) {
    Axios({
        url: window.Laravel.baseURL + `api/system/users/${userKey}/request-topics/${userRequestTopicId}`,
        method: "delete"
    }).then(function (result) {
        loadUserRequestsTopics(dispatch, userKey);
        // dispatch({ type: ActionTypes.USERS.LOADED_REQUESTS_TOPICS, userRequestTopics: result.data.data });
    });
}


/**
 * Save password of existing user.
 *
 * @param dispatch
 * @param router
 * @param userKey
 * @param newPassword
 */
export function savePassword(dispatch, router, userKey, newPassword) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey,
        method: 'put',
        data: {
            existing_user_key: userKey,
            password: newPassword
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.PASSWORD_CHANGED_SUCCESSFULLY, data: newPassword });
        dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.USERS.PASSWORD_CHANGED_FAILED });
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function deleteRoleByUser(dispatch, userKey, recordID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoles/' + recordID,
        method: 'delete',

    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.DELETED_ROLE_BY_ID, data: result.data.data });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function addEditUser(actionType, dispatch, router, voterID, isActive, City, Neighborhood, partyList, HouseNumber, HouseEntry,
    Flat, ExistingUserKey, userEmail, userPhone, userCellPhone, userExtraPhone, currentPassword,
    shasRepresentative, phonesArr, roles, isAdmin = null, twoStepAuthentication,managerPayment=0) {
    if (actionType == 'new') {
        dispatch({ type: ActionTypes.USERS.ADDING_USER });
    } else {

        dispatch({ type: ActionTypes.USERS.SAVING_USER });
    }
    dispatch({ type: ActionTypes.SAVING_CHANGES });

    let dataParams = {
        voter_id: voterID,
        city_id: City,
        neighborhood: Neighborhood,
        street: (partyList == undefined ? null : partyList),
        house_number: HouseNumber,
        house_entry: HouseEntry,
        flat: Flat,
        active: isActive,
        email: userEmail,
        phone: userPhone,
        cell_phone: userCellPhone,
        extra_phone: userExtraPhone,

        phones: phonesArr,
        roles: roles,
        shas_representative: shasRepresentative,
        two_step_authentication: twoStepAuthentication,
        cancel_payment:managerPayment
    }

    if (isAdmin != null) dataParams.admin = isAdmin;

    Axios({
        url: window.Laravel.baseURL + 'api/system/users' + (actionType == 'new' ? '' : ('/' + ExistingUserKey)),
        method: (actionType == 'new' ? 'post' : 'put'),
        data: dataParams,
    }).then(function (result) {

        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.users.general' });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.users.phones' });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'system.users.roles' });
        if (actionType == 'new') {
            dispatch({ type: ActionTypes.USERS.ADDED_USER });
        } else {

            dispatch({ type: ActionTypes.USERS.SAVED_USER });
        }
        if (actionType == 'new') {
            loadUser('key', dispatch, router, result.data.data);
        }
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        router.push('system/users/' + result.data.data);

    }).catch(function (error) {
        dispatch({ type: ActionTypes.USERS.ADDING_USER_FAILED });
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

/**
 * Load user by key.
 *
 * @param loadBy
 * @param dispatch
 * @param router
 * @param userKey
 */
export function loadUser(loadBy, dispatch, router, userKey) {
    if (loadBy == 'key') {
         dispatch({ type: ActionTypes.USERS.LOADING_USER });
         return Axios.get(window.Laravel.baseURL + "api/system/users/" + userKey)
            .then(function (result) {
                var userData = result.data.data;
                dispatch({ type: ActionTypes.USERS.LOADED_USER, selectedUserData: userData });
                loadStreets(dispatch, userData.work_city_key);
            })
            .catch(function (error) {
                router.push('system/users/');
            });
    } else if (loadBy == 'metadata') {
        dispatch({ type: ActionTypes.USERS.LOADING_USER });
        return Axios.get(window.Laravel.baseURL + "api/system/users?metadata_id=" + userKey)
            .then(function (result) {
                var userData = result.data.data;
                if (userData != null) {
                    dispatch({ type: ActionTypes.USERS.LOADED_USER, selectedUserData: userData });
                    router.push('system/users/' + userData.key);
                }
                loadStreets(dispatch, userData.work_city_key);
            })
            .catch(function (error) {
                router.push('system/users/');
                //dispatch({type: ActionTypes.USERS.OPEN_MISSING_USER_MODAL});
            });
    } else if (loadBy == 'identity') {
        dispatch({ type: ActionTypes.USERS.LOADING_USER });
       return Axios.get(window.Laravel.baseURL + "api/system/users?identity=" + userKey)
            .then(function (result) {
                var userData = result.data.data;
                if (userData != null) {
                    dispatch({ type: ActionTypes.USERS.LOADED_USER, selectedUserData: userData })
                    router.push('system/users/' + userData.key);
                }
                VoterActions.getVoterByParams(dispatch, { personal_identity: userKey }, 0);
                loadStreets(dispatch, userData.work_city_key);
            }).catch(function (error) {
                router.push('system/users/');
                dispatch({ type: ActionTypes.USERS.OPEN_MISSING_USER_MODAL });
            });
    }
}

export function loadModulesWithRoles(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/modules',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LOADED_MODULES, modules: result.data.data });
    })
}

export function SaveExistingRoleByUser(dispatch, userKey, index, id, roleID, teamID, departmentID, fromDate, toDate, isMain) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoles/' + id,
        method: "put",
        data: {
            role_id: roleID,
            from_date: fromDate,
            to_date: toDate,
            main: isMain,
            team_id: teamID,
            department_id: departmentID
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.ROLE_USER_FINISH_EDITING, data: result.data.data, editRowIndex: index });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function AddNewUserRole(dispatch, userKey, roleID, teamID, depID, fromDate, toDate, isMain, newGeoTemplates, sectorialFilters) {

    let arrFilters = '';
    for (let i = 0; i < sectorialFilters.length; i++) {
        arrFilters += sectorialFilters[i] + '^';
    }
    arrFilters = arrFilters.slice(0, -1);
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoles',
        method: 'post',
        data: {
            role_id: roleID,
            team_id: teamID,
            dep_id: depID,
            from_date: fromDate,
            to_date: toDate,
            is_main: isMain,
            extra_geo_filters: newGeoTemplates,
            sectorial_filters: arrFilters,
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.NEW_ROLE_ADDED, data: result.data.data });
        dispatch({
            type: ActionTypes.USERS.HIDE_ADD_USER_ROLE
        });
        dispatch({
            type: GlobalActions.ActionTypes.GEO_FILTERS.RESET_TEMP_SECTORIAL_FILTERS_ARRAY
        });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function loadInitialCities(dispatch) {
    let theApiURL = window.Laravel.baseURL + 'api/system/cities';
    Axios({
        url: theApiURL,
        method: 'get',

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_INITIAL_CITIES, data: result.data.data });
    });
}

export function loadCitiesByAreaAndSubArea(dispatch, areaID, subAreaKey) {
    let theApiURL = window.Laravel.baseURL + 'api/system/cities';
    if (areaID > 0) {
        theApiURL += '/' + areaID;
    }
    Axios({
        url: theApiURL,
        method: 'get',
        params: {
            sub_area_key: subAreaKey
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_CITIES_BY_AREA_AND_SUB_AREA, data: result.data.data });
    });

}

export function loadCitiesByArea(dispatch, areaID, originalEntityID) {
    let theApiURL = window.Laravel.baseURL + 'api/system/cities';
    if (areaID > 0) {
        theApiURL += '/' + areaID;
    }
    Axios({
        url: theApiURL,
        method: 'get',

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_CITIES_BY_AREA, data: result.data.data, originalEntityID });
    });
}

export function loadClustersByNeighborhood(dispatch, NeighborhoodID, originalEntityID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + NeighborhoodID,
        method: 'get',

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_CLUSTERS_BY_NEIGHBORHOOD, data: result.data.data, originalEntityID });
    });
}

export function loadNeiborhoodsAndClustersByCity(dispatch, cityID, originalEntityID, setClusterName = true) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/neighborhoods/' + cityID,
        method: 'get',

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_NEIGHBORHOODS_BY_CITY, data: result.data.data, originalEntityID });
    });

    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/-1',
        method: 'get',
        params: {
            city_id: cityID
        }

    }).then(function (result1) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_CLUSTERS_BY_CITY, data: result1.data.data, originalEntityID, setClusterName });
    });
}

export function loadOnlyClustersByCityAndNeighborhood(dispatch, cityID, NeighborhoodID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + NeighborhoodID,
        method: 'get',
        params: {
            city_id: cityID
        }

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_CLUSTERS_BY_CITY, data: result.data.data });
    });
}

export function loadBallotsByCluster(dispatch, clusterID, originalEntityID) {

    Axios({
        url: window.Laravel.baseURL + 'api/system/ballots/' + clusterID,
        method: 'get',
        params: {}

    }).then(function (result) {

        dispatch({ type: ActionTypes.USERS.GEO_FILTER_LOADED_BALLOTS_BY_CLUSTER, data: result.data.data, originalEntityID });
    });
}

export function addNewGeographicFilterToRoleUser(dispatch, userKey, entityType, entityID, pathName, roleUserID, uRoleIndex, inheritedID) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoleFilters',
        method: 'post',
        data: {
            entity_type: entityType,
            entity_id: entityID,
            path_name: pathName,
            role_user_id: roleUserID,
            inherited_id: inheritedID
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.ADDED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE, userRoleIndex: uRoleIndex, data: result.data.data });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function editExistingGeographicFilterToRoleUser(dispatch, userKey, geoFilterID, entityType, entityID, pathName, roleUserID, uRoleIndex, inheritedID) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoleFilters/' + geoFilterID,
        method: 'put',
        data: {
            entity_type: entityType,
            entity_id: entityID,
            path_name: pathName,
            role_user_id: roleUserID,
            inherited_id: inheritedID
        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.USERS.ADDED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE, userRoleIndex: uRoleIndex, data: result.data.data });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function deleteRoleGeoFilterByUser(dispatch, userKey, uRoleIndex, geoFilterIndex, userRoleID, geoFilterID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/userRoleFilters/' + geoFilterID,
        method: 'delete',
        data: {
            role_user_id: userRoleID,

        }

    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.DELETED_GEO_FILTER_TO_EXISTING_USER_EXISTING_ROLE, userRoleIndex: uRoleIndex, data: result.data.data });
    });
}

export function deleteRoleSectorialFilterByUser(dispatch, userKey, uRoleIndex, sectorialFilterIndex, userRoleID, sectorialFilterID) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/' + userKey + '/roles/' + userRoleID + '/sectorialFilters/' + sectorialFilterID,
        method: 'delete',
        data: {}

    }).then(function (result) {
        dispatch({ type: ActionTypes.USERS.USER_ROLE_ADDED_SECTORIAL_FILTER, data: result.data.data, userRoleID, roleUserIndex: uRoleIndex });
        dispatch({ type: ActionTypes.USERS.HIDE_CONFIRM_DELETE_MODAL });
    });
}

export function getLoginUserSummary(dispatch , onLoadedCrmRequests) {
    Axios({
        //        url: window.Laravel.baseURL + 'api/crm/requests/user/summary/',
        url: window.Laravel.baseURL + 'api/crm/requests/user/crm_summary',
        method: 'get'
    }).then(function (result) {
        dispatch({ type: ActionTypes.USER_HOME.LOADED_SUMMARY, result: result.data.data });
		if(onLoadedCrmRequests){ //callback action
			onLoadedCrmRequests();
		}
    });
}

export function redirectToRequestPage(dispatch, router, redirectPath) {

    let requestUrl = 'crm/requests/' + redirectPath;

    router.push(requestUrl);
    dispatch({ type: CrmActions.ActionTypes.REQUESTS.REDIRECT_TO_REQUEST_PAGE });
}
/** STILL???
 *
 * @param dispatch
 * @param router
 * @param redirectPath
 * @param forWhom      - if true we'll redirect to the voter page;
 *                     - else we'll redirect to the temp voter page(where is that?)
 */
export function redirectToRequestCreatorPage(dispatch, router, redirectPath, forWhom) {

    let requestUrl = '';

    if (true == forWhom) {
        requestUrl = 'elections/voters/' + redirectPath;
    } else {
        requestUrl = 'elections/voters/' + redirectPath;
    }
    router.push(requestUrl);
    //dispatch({type: CrmActions.ActionTypes.REQUESTS.REDIRECT_TO_REQUEST_CREATOR_PAGE});
}

/* REQUEST_MODULE_USERS */
export function loadRequestModuleUsers(dispatch, teamKey = null) { 
    let teamPath = teamKey ?  `/${teamKey}` : '';
    Axios({
        url: window.Laravel.baseURL + `api/system/request/users${teamPath}`,
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.MODULE_USERS, requestModuleUsers: result.data.data });
    },function (error) {
        displayErrorMessage(error, dispatch);
    });
}

/* REQUEST_TOPICS */
export function loadRequestTopics(dispatch, key = null, requestTopicParams = {}) {
    let keyPath = key ? `/${key}` : '';
        Axios({
            url: window.Laravel.baseURL + 'api/system/lists/requests/topics' +keyPath,
            method: "get",
            params : requestTopicParams
        }).then(function (result) {
            let topicSystemName = requestTopicParams.topic_system_name
            if(!topicSystemName && !key){ // For main requests topics 
                dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_TOPICS, topics: result.data.data });
                dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_TOPICS });  
                return;
            } 
            if(key){ // For sub requests topics
                dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_SUB_TOPICS, topics: result.data.data });
                dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_SUB_TOPICS });
                return; 
            }

            if (topicSystemName){ // For specific sub request topic
                dispatch({ type: ElectionsActions.ActionTypes.CITIES.LOADED_REQUEST_MUNICIPAL_SUB_TOPICS, subTopics: result.data.data });
                return;     
            }

        }, function (error) {
            displayErrorMessage(error, dispatch);
        });
}
export function loadAllTopics(dispatch){
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/requests/topics/all',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_ALL_REQUESTS_TOPICS, topics: result.data.data });

    }).catch(function (error) {
        displayErrorMessage(error, dispatch);
    });
}
/* REQUEST_STATUS */
export function loadRequestStatus(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.REQUEST_STATUS_LOADED, list: result.data.data });
        dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_STATUS });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteRequestStatus(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status/' + key,
        method: "delete"
    }).then(function () {
        loadRequestStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function updateRequestStatus(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status/' + item.key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'requestStatus' });
        loadRequestStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addRequestStatus(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function updateRequestStatusOrder(store, list) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status',
        method: "put",
        data: {
            list
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'RequestStatus' });
        loadRequestStatus(store);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* REQUEST_STATUS */
export function loadRequestStatusTypes(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/status/types',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_STATUS_TYPES, list: result.data.data });
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}

export function deleteRequestTopic(store, key, subTopicsParentKey = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/requests/topics/' + key,
        method: "delete"
    }).then(function () {
        loadRequestTopics(store.dispatch, subTopicsParentKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateRequestTopic(store, key, topic, subTopicsParentKey = null, selectedSubTopicsKeys = null) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/requests/topics/' + key,
        method: "put",
        data: {
            topic: topic,
            multi_sub_topics_keys: selectedSubTopicsKeys
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'requestTopic' });
        loadRequestTopics(store.dispatch, subTopicsParentKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addRequestTopic(store, topic, subTopicsParentKey = null) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/requests/topics',
        method: "post",
        data: {
            topic
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestTopics(store.dispatch, subTopicsParentKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function updateTopicOrder(store, topics, subTopicsParentKey = null) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/requests/topics',
        method: "put",
        data: {
            topics: topics
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'requestTopicDnDSort' });
        loadRequestTopics(store.dispatch, subTopicsParentKey);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* REQUEST_SOURCE */
export function loadRequestSource(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request_source',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_SOURCE, data: result.data.data });
        dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_SOURCE });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

/*export function deleteRequestSource(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request_source/' + key,
        method: "delete"
    }).then(function () {
        loadRequestSource(dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
    });
}*/

/*export function updateRequestSource(dispatch, key, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request_source/' + key,
        method: "put",
        data: {
            name: name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'RequestSource' });
        loadRequestSource(dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}*/

/*export function addRequestSource(dispatch, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request_source',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestSource(dispatch);
    }).catch(function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}*/

/* REQUEST_CLOSURE_REASON */
export function loadRequestClosureReason(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/closure_reason',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.REQUESTS.LOADED_REQUEST_CLOSURE_REASON, data: result.data.data });
        dispatch({ type: ActionTypes.LISTS.REQUESTS.ORDER_REQUEST_CLOSURE_REASON });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteRequestClosureReason(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/closure_reason/' + key,
        method: "delete"
    }).then(function () {
        loadRequestClosureReason(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateRequestClosureReason(dispatch, key, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/closure_reason/' + key,
        method: "put",
        data: {
            name: name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'RequestClosureReason' });
        loadRequestClosureReason(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addRequestClosureReason(dispatch, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/request/closure_reason',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadRequestClosureReason(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* USER_ROLES */
export function loadUserRoles(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/user_roles',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.USER_ROLES_LOADED, roles: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_USER_ROLES });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteUserRole(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/user_roles/' + key,
        method: "delete"
    }).then(function () {
        loadUserRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function updateUserRole(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/user_roles/' + item.key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'userRole' });
        loadUserRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addUserRole(store, item) {
    store.dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/user_roles',
        method: "post",
        data: {
            item
        }
    }).then(function () {
        store.dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadUserRoles(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);

        store.dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function loadSmsProviders(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sms_providers',
        method: "get"
    }).then(function (result) {
        let data = result.data.data;
        let sms_providers = data.sms_providers
        let sms_providers_options = data.sms_providers_options
        dispatch({ type: ActionTypes.LISTS.SMS_PROVIDERS_LOADED, sms_providers, sms_providers_options});
    },function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateSmsProvider(dispatch, key, providerData) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });

    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/sms_providers/' + key,
        method: "put",
        data: providerData
    }).then(function (result) {
        let data = result.data.data;
        dispatch({ type: ActionTypes.LISTS.UPDATE_PROVIDER, key, providerData: data});
        dispatch({ type: ActionTypes.CHANGES_SAVED });
    },function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

        displayErrorMessage(error,dispatch);
    });
}

export function loadSystemModules(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/modules',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.SYSTEM_MODULES_LOADED, modules: result.data.data });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

/* USER_ROLES */
export function loadTeamsList(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/teams',
        method: "get"
    }).then(function (result) {
        store.dispatch({ type: ActionTypes.LISTS.TEAMS_LOADED, teams: result.data.data });
        store.dispatch({ type: ActionTypes.LISTS.ORDER_TEAMS });
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function deleteTeam(store, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/teams/' + key,
        method: "delete"
    }).then(function () {
        loadTeams(store);
        loadTeamsList(store);
    }).catch(function (error) {
        displayErrorMessage(error,store.dispatch);
    });
}

export function addNewSectorialTemplateToTeam(dispatch, teamKey, allTplItems, tplHeader) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/sectorialTemplates',
        method: "post",
        data: {
            sectorial_filters: allTplItems,
            filter_name_header: tplHeader
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({
            type: ActionTypes.TEAMS.HIDE_ADD_NEW_SECTORIAL_TPL_MODAL
        });
        dispatch({
            type: GlobalActions.ActionTypes.GEO_FILTERS.CLOSE_ADD_EDIT_GEO_FILTER_MODAL
        });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}


export function addEditDeleteTplFilters(dispatch, teamKey, tplKey, tplHeader, addString, editString, deleteString) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/sectorialTemplates/' + tplKey,
        method: "put",
        data: {
            add_filter_string: addString,
            edit_filter_string: editString,
            delete_filter_string: deleteString,
            filter_name_header: tplHeader,
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadTeamDataByKey(dispatch, teamKey);
        dispatch({
            type: ActionTypes.TEAMS.HIDE_ADD_NEW_SECTORIAL_TPL_MODAL
        });
        dispatch({
            type: GlobalActions.ActionTypes.GEO_FILTERS.CLOSE_ADD_EDIT_GEO_FILTER_MODAL
        });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/**
 * Execute action from menu before redirect to url
 *
 * @param actionName
 * @param dispatch
 */
export function executeMenuAction(actionName, dispatch) {
    switch (actionName) {
        case 'clean_voter_details':
            dispatch({ type: VoterActions.ActionTypes.VOTER.VOTER_DETAILS_CLEAN_DATA });
            dispatch({ type: VoterActions.ActionTypes.VOTER_SEARCH.CLEAN_SELECTED_VOTER_FOR_REDIRECT });
            dispatch({ type: CrmActions.ActionTypes.REQUEST.PERSONAL_ID_CHANGE, data: '' });
            dispatch({ type: CrmActions.ActionTypes.REQUEST.CLEAN_CRM_INPUT_DATA });
            dispatch({ type: GlobalActions.ActionTypes.DOCUMENT.DOCUMENT_CLEAN_DATA });
            break;
        case 'clean_voter_search_redirect':
            dispatch({ type: VoterActions.ActionTypes.VOTER.VOTER_REDIRECT_TO_SEARCH, data: { returnUrl: '', returnButtonText: 'פתח פנייה' } });
            break;
        case 'clean_user_details':
            dispatch({ type: VoterActions.ActionTypes.VOTER_SEARCH.CLEAN_SELECTED_VOTER_FOR_REDIRECT });
            dispatch({
                type: VoterActions.ActionTypes.VOTER_SEARCH.CLEAN_DATA
            });
            dispatch({
                type: ActionTypes.USERS.CLEAR_USERS_FORM
            });
            dispatch({ type: VoterActions.ActionTypes.VOTER.VOTER_DETAILS_CLEAN_DATA });

            dispatch({ type: VoterActions.ActionTypes.VOTER.VOTER_SCREEN_CLEAN_DATA });
            break;
        default:
            break;
    }
}

/* VOTER GROUPS */
export function loadVoterGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_VOTER_GROUP, groups: result.data.data });
        dispatch({ type: ActionTypes.LISTS.GENERATE_HIERATICAL_VOTER_GROUP , groups: result.data.data });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}


export function deleteVoterGroup(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups/' + key,
        method: "delete"
    }).then(function () {
        loadVoterGroups(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateVoterGroup(dispatch,key, data) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups/'+key ,
        method: "put",
        data
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterGroup' });
        loadVoterGroups(dispatch);
		dispatch({type:ActionTypes.LISTS.VOTER_GROUP_EDIT_VALUE_CHANGED,fieldName:'showAddEditModalWindow' , fieldValue:false});
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function updateVoterGroupOrder(dispatch, items) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups',
        method: "put",
        data: {
            items
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadVoterGroups(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function addVoterGroup(dispatch, data) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups',
        method: "post",
        data
    }).then(function (result) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'VoterGroup' });
        loadVoterGroups(dispatch);
		dispatch({type:ActionTypes.LISTS.VOTER_GROUP_EDIT_VALUE_CHANGED,fieldName:'showAddEditModalWindow' , fieldValue:false});
    }, function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/* PARTY_LISTS */
export function loadPartyLists(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/party_lists',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_PARTY_LISTS, result: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_PARTY_LISTS });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deletePartyList(dispatch, partyKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/party_lists/' + partyKey,
        method: "delete"
    }).then(function () {
        loadPartyLists(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updatePartyList(dispatch, item) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/party_lists/' + item.key,
        method: "put",
        data: {
            name: item.name,
            letters: item.letters,
            shas: item.shas
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'PartyList' });
        loadPartyLists(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addPartyList(dispatch, item) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/party_lists',
        method: "post",
        data: {
            name: item.name,
            letters: item.letters,
            shas: item.shas
        }
    }).then(function () {
        loadPartyLists(dispatch);
        dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}


/* LANGUAGES */
export function loadLanguage(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/languages',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_LANGUAGES, result: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_LANGUAGES });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteLanguage(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/languages/' + key,
        method: "delete"
    }).then(function () {
        loadLanguage(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateLanguage(dispatch, key, item) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/languages/' + key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'language' });
        loadLanguage(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

export function addLanguage(dispatch, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/languages',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadLanguage(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);

        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* CITY_DEPARTMENT */
export function loadCityDepartment(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/city_department',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_CITY_DEPARTMENT, result: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_CITY_DEPARTMENT });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteCityDepartment(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/city_department/' + key,
        method: "delete"
    }).then(function () {
        loadCityDepartment(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateCityDepartment(dispatch, key, item) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/city_department/' + key,
        method: "put",
        data: {
            item
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'city_department' });
        loadCityDepartment(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function addCityDepartment(dispatch, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/city_department',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadCityDepartment(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });

    });
}

/* CSV_SOURCE */
export function loadCsvSource(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/csv_source',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.LISTS.LOADED_CSV_SOURCE, sources: result.data.data });
        dispatch({ type: ActionTypes.LISTS.ORDER_CSV_SOURCE });
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function deleteCsvSource(dispatch, csvSourceKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/csv_source/' + csvSourceKey,
        method: "delete"
    }).then(function () {
        loadCsvSource(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
    });
}

export function updateCsvSource(dispatch, csvSourcekey, csvSourceName) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/csv_source/' + csvSourcekey,
        method: "put",
        data: {
            name: csvSourceName
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'CsvSource' });
        loadCsvSource(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function addCsvSource(dispatch, name) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/csv_source',
        method: "post",
        data: {
            name
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        loadCsvSource(dispatch);
    }).catch(function (error) {
        displayErrorMessage(error,dispatch);
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}

/** last viewed voters */
export function loadLastViewedVoters(dispatch) {
    dispatch({ type: ActionTypes.HEADER.LOADING_LAST_VIEWED_VOTERS });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/last_viewed',
        method: "get"
    }).then(function (result) {
        var lastViewedVoters = result.data.data;
        dispatch({ type: ActionTypes.HEADER.LOADED_LAST_VIEWED_VOTERS, lastViewedVoters });
    });
}

export function addLastViewedVoters(dispatch, voterKey) {
    var _this = this;
    dispatch({ type: ActionTypes.HEADER.ADDING_LAST_VIEWED_VOTERS });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/last_viewed',
        method: 'post',
        data: {
            voter_key: voterKey
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.HEADER.ADDED_LAST_VIEWED_VOTERS });
        _this.loadLastViewedVoters(dispatch);
    });
}

export function deleteLastViewedVoters(dispatch) {
    var _this = this;
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/last_viewed',
        method: "delete"
    }).then(function () {
        _this.loadLastViewedVoters(dispatch);
    });
}

/** User Favorites */
export function loadUserFavorites(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current/favorites',
        method: "get"
    }).then(function (result) {
        var favorites = result.data.data;
        dispatch({ type: ActionTypes.HEADER.LOADED_FAVORITES, favorites });
    });
}
export function addToFavorites(dispatch, url, title) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current/favorites',
        method: 'post',
        data: {
            url, title
        }
    }).then(function () {
        loadUserFavorites(dispatch);
        dispatch({ type: ActionTypes.CHANGES_SAVED });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });
}
export function removeFromFavorites(dispatch, key) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current/favorites/' + key,
        method: "delete"
    }).then(function () {
        loadUserFavorites(dispatch);
    });
}

/**
 * Set logout timer and API call response interceptor
 *
 * @param store
 */

const excludedMessagesList = [
    'maximum execution time'
];

export function setLogoutTimer(store) {
    Axios.interceptors.response.use(function (response) {
        if (!response.request.responseURL.endsWith('api/system/status')) store.dispatch({ type: ActionTypes.LAST_API_CALL });
        return response;
    }, function (error) {
        if (store.getState().system.systemSettings.show_system_errors) {
            let response = error.response || false;
            if (response) {
                let data = response.data || false;
                if (data) {
                    let errorCode = data.error_code || false;
                    let errorMessage = data.message || '';

                    //check that there is message and it's not exist in the excluded list
                    let showMessage = (errorMessage.length > 0) && (!(new RegExp(excludedMessagesList.join("|")).test(errorMessage.toLowerCase())));

                    if (errorCode == 'S071') {
                        store.dispatch({ type: ActionTypes.MAINTENANCE_MODE});
                    //show system error with identifier
                    } else if (errorCode == 'S074') {
                        let errorMessage = errors[errorCode] || data.message || "";
                        errorMessage += " " + data.data.system_code;
                        store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage });
                    } else if (!errorCode && errorCode != 'S071' && showMessage) {
                        store.dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage });
                    }
                }
            }
        }
        return Promise.reject(error);
    });
}

/**
 * Set interval for system status
 *
 * @param object store
 * @return void
 */
export function setSystemStatusInterval(store) {
    checkSystemStatus(store);
    setInterval(function() {checkSystemStatus(store);}, 60*60*1000);
}

/**
 * Check system status
 * If maintenance date exists - show it
 * If not authenticated go to login page
 *
 * @param object store
 * @return void
 */
export function checkSystemStatus(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/status',
    }).then(function(result) {
        if (result.data.data.maintenance != undefined) {
            store.dispatch({ type: ActionTypes.MAINTENANCE_DATE, maintenanceDate: result.data.data.maintenance});
        }
        if (!result.data.data.authenticated) {
            store.dispatch({ type: ActionTypes.CLEAR_DIRTY, target: 'all' });
            setTimeout(function () {
                window.location.href = window.Laravel.baseLoginURL
                sessionStorage.removeItem('access_token'); 
            }, 1000);
        }
    },(error) =>{
        displayErrorMessage(error, store.dispatch)
        setTimeout(function () {
            window.location.href = window.Laravel.baseLoginURL
            sessionStorage.removeItem('access_token');
        }, 2000);
    });
}

export function headerSearch(dispatch, searchType, searchInput) {
    dispatch({ type: ActionTypes.HEADER.SEARCHING });
    Axios({
        url: window.Laravel.baseURL + 'api/system/search',
        method: 'get',
        params: {
            type: searchType,
            value: searchInput
        }
    }).then(function (result) {
        dispatch({ type: ActionTypes.HEADER.SEARCHED, searchResult: result.data.data });
    }).catch(function (error) {
        dispatch({ type: ActionTypes.HEADER.SEARCHED, searchResult: [] });
    });
}

/**
 * Switch current logged in user to the selected user
 *
 * @param object dispatch
 * @param string userKey
 * @return void
 */
export function switchCurrentUser(dispatch, userKey) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/current',
        method: 'put',
        data: {
            switch_user_key: userKey
        }
    }).then(function () {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        window.location = window.Laravel.baseURL;
    }).catch(function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });   
}
/**
 * Switch current logged in user to the selected user
 *
 * @param object dispatch
 * @param string userKey
 * @return void
 */
export function unlockOtherUser(dispatch, userKey) {
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    Axios({
        url: window.Laravel.baseURL + 'api/system/users/other/unlock',
        method: 'put',
        data: {
            other_user_key: userKey
        }
    }).then(function () {
        dispatch({ type: ActionTypes.USERS.UNLOCK_USER});
        dispatch({ type: ActionTypes.CHANGES_SAVED });


    }, function (error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
    });   
}

/*
Load file groups with files and inner data 
*/
export function loadGlobalFileGroups(dispatch) {
    Axios({

        url: window.Laravel.baseURL + 'api/system/files/groups',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.LOADED_FILES_AND_GROUPS_DATA, data: response.data.data });
    }, function (error) {

    });
}


/*
Load all modules for system/files screen
*/
export function loadModules(dispatch) {
    Axios({

        url: window.Laravel.baseURL + 'api/system/files/groups/modules',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.FILE_GROUP_SCREEN_FIELD_CHANGE, fieldName: 'allModules', fieldValue: response.data.data });
    }, function (error) {

    });
}

/*
Add new file group
*/
export function addNewFileGroup(dispatch, name, module_items) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/files/groups',
        method: 'post',
        data: {
            name, module_items
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.MODIFY_FILE_GROUPS_ARRAY, actionName: 'add', data: response.data.data });
        let screenValues = {};
        screenValues.show = false;
        screenValues.editItemIndex = -1;
        screenValues.name = '';
        screenValues.selectedModulesList = [];

        dispatch({ type: ActionTypes.FILES.SHOW_HIDE_ADD_EDIT_FILE_GROUP, screenValues });
        let screenFileValues = {};
        screenFileValues.show = true;
        screenFileValues.fileGroupIndex = null;
        dispatch({ type: ActionTypes.FILES.SHOW_HIDE_ADD_EDIT_FILE, screenValues:screenFileValues });
    }, function (error) {

    });
}
/*
Handles deleting file group
*/
export function deleteWholeFileGroup(dispatch, fileGroupKey, deleteArrayIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/files/groups/' + fileGroupKey,
        method: 'delete'
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.MODIFY_FILE_GROUPS_ARRAY, actionName: 'delete', data: deleteArrayIndex });
        dispatch({ type: ActionTypes.FILES.CHANGE_GLOBAL_WINDOW_VALUE, fieldName: 'deleteFileGroupIndex', fieldValue: -1 });
        dispatch({ type: ActionTypes.FILES.CHANGE_GLOBAL_WINDOW_VALUE, fieldName: 'deleteFileIndex', fieldValue: -1 });
    }, function (error) {

    });
}


/*
Handles editing file group
*/
export function updateFileGroup(dispatch, fileGroupKey, updateArrayIndex, name, module_items) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/files/groups/' + fileGroupKey,
        method: 'put',
        data: {
            name,
            module_items: JSON.stringify(module_items)
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.MODIFY_FILE_GROUPS_ARRAY, actionName: 'edit', updateArrayIndex, data: { name, module_items } });
        let screenValues = {};
        screenValues.show = false;
        screenValues.editItemIndex = -1;
        screenValues.name = '';
        screenValues.selectedModulesList = [];
        dispatch({ type: ActionTypes.FILES.SHOW_HIDE_ADD_EDIT_FILE_GROUP, screenValues });
    }, function (error) {

    });
}

/*
Function that handles adding via api new file
*/
export function addUploadNewFile(dispatch, fileGroupKey, name, file, updateFileGroupsArrayIndex, updateFilesArrayIndex) {
    var uploadURL = window.Laravel.baseURL + 'api/system/files/' + fileGroupKey;
    var data = new FormData();
    data.append('new_file_name', name);
    data.append('file_type', file.name.split('.').pop());
    data.append('document_original_name', file.name);
    data.append('file_upload', file);

    Axios({
        url: uploadURL,
        method: 'post',
        data: data
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.MODIFY_FILES_ARRAY, actionName: 'add', data: response.data.data, fileGroupIndex: updateFileGroupsArrayIndex });
        let screenValues = {};
        screenValues.show = false;
        screenValues.editItemIndex = -1;
        screenValues.fileGroupIndex = -1;
        screenValues.name = '';
        screenValues.file_name = '';
        dispatch({ type: ActionTypes.FILES.SHOW_HIDE_ADD_EDIT_FILE, screenValues });
    }, function (error) {

    });
}

/*
Handles deleting FILE
*/
export function deleteWholeFile(dispatch, fileKey, fileGroupIndex, fileDeleteIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/files/' + fileKey,
        method: 'delete'
    }).then(function (response) {
        dispatch({ type: ActionTypes.FILES.MODIFY_FILES_ARRAY, actionName: 'delete', fileGroupIndex, fileDeleteIndex });
        dispatch({ type: ActionTypes.FILES.CHANGE_GLOBAL_WINDOW_VALUE, fieldName: 'deleteFileGroupIndex', fieldValue: -1 });
        dispatch({ type: ActionTypes.FILES.CHANGE_GLOBAL_WINDOW_VALUE, fieldName: 'deleteFileIndex', fieldValue: -1 });
    }, function (error) {

    });
}


/*
Handles editing FILE row
*/
export function updateFile(dispatch, fileKey, name, file, fileGroupIndex, updateArrayIndex) {
    var data = null;
    if (file) {
        data = new FormData();
        data.append('new_file_name', name);
        data.append('file_type', file.name.split('.').pop());
        data.append('document_original_name', file.name);
        data.append('file_upload', file);
    }
    else {
        data = {};
        data.new_file_name = name;
    }
    Axios({
        url: window.Laravel.baseURL + 'api/system/files/' + fileKey + '/edit',
        method: 'post',
        data
    }).then(function (response) {
		if(file){
			dispatch({type:ActionTypes.FILES.MODIFY_FILES_ARRAY , actionName:'edit'  , fileGroupIndex , updateArrayIndex  , name , file_type:file.name.split('.').pop() , file_size:file.size , file_name:file.name });
		}
		else{
			dispatch({type:ActionTypes.FILES.MODIFY_FILES_ARRAY , actionName:'edit'  , fileGroupIndex , updateArrayIndex  , name });
		}
		let screenValues = {};
		screenValues.show = false;
		screenValues.editItemIndex = -1;
		screenValues.fileGroupIndex = -1;
		screenValues.name = '';
		screenValues.file = '';
		dispatch({type:ActionTypes.FILES.SHOW_HIDE_ADD_EDIT_FILE , screenValues});
	},function(error) {
        
    });
}
/*
Handles editing FILE row
*/
export function updateActivistsAllocationsFile(dispatch, file) {
    var data = null;
    if (file) {
        data = new FormData();
        data.append('file_type', file.name.split('.').pop());
        data.append('document_original_name', file.name);
        data.append('activist_allocations_file', file);
    } else {
        return; 
    }
    return Axios({
        url: window.Laravel.baseURL + 'api/system/activists/allocations/file',
        method: 'post',
        data
    }).then(function (response) {},function(error) {
        displayErrorMessage(error, dispatch)
    });
}


export  function updateTeamRequestDetails(dispatch,teamRequestDetailsDto){
    dispatch({ type: ActionTypes.SAVING_CHANGES });
    return  Axios({
        url: window.Laravel.baseURL + 'api/system/team/request/' + teamRequestDetailsDto.team_key,
        method: "put",
        data:teamRequestDetailsDto

    }).then(function (response) {
        dispatch({ type: ActionTypes.CHANGES_SAVED });
        return response
    },function(error) {
        dispatch({ type: ActionTypes.CHANGES_NOT_SAVED });
        displayErrorMessage(error, dispatch)
    });
}

/**
 * @function
 * display error message modal
 * @param error - error data;
 * Need to replace all the errors with this function.
 * @returns void.
 */
export function displayErrorMessage(error, dispatch){
    let response = error.response || false;
    if (response) {
        let data = response.data || false;
        if (data) {
            let errorCode = data.error_code || false;

            if (errorCode) {
                dispatch({ type: ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
            }
        }
    }

}
