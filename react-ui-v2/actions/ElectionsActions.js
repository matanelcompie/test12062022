import Axios from 'axios';
import _ from 'lodash';
import * as SystemActions from './SystemActions';
import * as VoterActions from './VoterActions';
import * as AllocationAndAssignmentActions from './AllocationAndAssignmentActions';
import errors from '../libs/errors'
import constants from '../libs/constants';
import {ActivistUpdateDto} from '../DTO/ActivistUpdateDto'
import * as DateActionHelper from '../helper/DateActionHelper'
export const DragTypes = {
    EXAMPLE_DND_SORT: "EXAMPLE_DND_SORT",
    CANDIDATE_ROW_DND_ROW: "CANDIDATE_ROW_DND_ROW",
    COUNCIL_MEMBER_ROW_DND_ROW: "COUNCIL_MEMBER_ROW_DND_ROW"

}

export const ActionTypes = {
   GENERAL:{
      iTEM_CHANGE: 'iTEM_CHANGE',
  },
  ELECTIONS_DASHBOARD:{
	  SET_SUBSCREEN_VALUE_BY_NAME: 'ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME',
	  CLEAN_FROM_FILTER_TYPE: 'ELECTIONS_DASHBOARD.CLEAN_FROM_FILTER_TYPE',
	  RESET_FOUND_VALUES: 'ELECTIONS_DASHBOARD.RESET_FOUND_VALUES',
	  SET_GLOBAL_VALUE_BY_NAME: 'ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME',
	  CREATE_AREA_CITIES_HASH_TABLE: 'ELECTIONS_DASHBOARD.CREATE_AREA_CITIES_HASH_TABLE',
	  SET_GEO_ENTITY_FIELD_VALUE: 'ELECTIONS_DASHBOARD.SET_GEO_ENTITY_FIELD_VALUE',
	  SET_CITY_SUB_ENTITIES: 'ELECTIONS_DASHBOARD.SET_CITY_SUB_ENTITIES',
	  RESET_ALL_DATA: 'ELECTIONS_DASHBOARD.RESET_ALL_DATA',
	  REFRESH_ALL_DATA: 'ELECTIONS_DASHBOARD.REFRESH_ALL_DATA',
  } , 
  PRE_ELECTIONS_DASHBOARD:{
	  SET_SUBSCREEN_VALUE_BY_NAME: 'PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME',
	  CLEAN_FROM_FILTER_TYPE: 'PRE_ELECTIONS_DASHBOARD.CLEAN_FROM_FILTER_TYPE',
	  RESET_FOUND_VALUES: 'PRE_ELECTIONS_DASHBOARD.RESET_FOUND_VALUES',
	  AREAS_PANEL_SET_AREA_PARAM: 'PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_AREA_PARAM',
	  AREAS_PANEL_SET_CITY_PARAM: 'PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_CITY_PARAM',
  } , 
  VOTES_DASHBOARD:{
	   SET_VALUE_BY_NAME: 'VOTES_DASHBOARD.SET_VALUE_BY_NAME',
	   LOAD_MORE_ENROLLED_ACTIVISTS: 'VOTES_DASHBOARD.LOAD_MORE_ENROLLED_ACTIVISTS',
	   LOAD_MORE_MISSED_ACTIVISTS: 'VOTES_DASHBOARD.LOAD_MORE_MISSED_ACTIVISTS',
	   LOAD_MORE_UNVERIFIED_ACTIVISTS: 'VOTES_DASHBOARD.LOAD_MORE_UNVERIFIED_ACTIVISTS',
	   SET_SUBSCREEN_VALUE_BY_NAME: 'VOTES_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME',
	   RESET_FOUND_VALUES: 'VOTES_DASHBOARD.RESET_FOUND_VALUES',
	   CLEAN_FROM_FILTER_TYPE: 'VOTES_DASHBOARD.CLEAN_FROM_FILTER_TYPE',
	   UPDATE_SUBSCREEN_ARRAY_VALUE_BY_INDEX: 'VOTES_DASHBOARD.UPDATE_SUBSCREEN_ARRAY_VALUE_BY_INDEX',
  },

    CAPTAIN50_SEARCH: {
        CHANGE_LOADING_CAPTAIN50S_FLAG: 'CAPTAIN50_SEARCH.CHANGE_LOADING_CAPTAIN50S_FLAG',
        CHANGE_LOADED_CAPTAIN50S_FLAG: 'CAPTAIN50_SEARCH.CHANGE_LOADED_CAPTAIN50S_FLAG',

        RESET_MINISTER50_SEARCH_RESULT: 'CAPTAIN50_SEARCH.RESET_MINISTER50_SEARCH_RESULT',
        LOAD_MINISTER50_SEARCH_RESULT: 'CAPTAIN50_SEARCH.LOAD_MINISTER50_SEARCH_RESULT',

        RESET_MINISTER50_SEARCH_CLUSTERS: 'CAPTAIN50_SEARCH.RESET_MINISTER50_SEARCH_CLUSTERS',
        LOAD_MINISTER50_SEARCH_CLUSTERS: 'CAPTAIN50_SEARCH.LOAD_MINISTER50_SEARCH_CLUSTERS',

        RESET_CAPTAIN50_SEARCH_VARIABLES: 'CAPTAIN50_SEARCH.RESET_CAPTAIN50_SEARCH_VARIABLES'
    },

    SET_MODAL_DIALOG_DATA: 'SET_MODAL_DIALOG_DATA',
    IMPORT: {
        //general actions : 
        SET_IMPORT_TAB: 'IMPORT.SET_IMPORT_TAB',
        CSV_EXISTING_FILE_INJECT_STATE: 'IMPORT.CSV_EXISTING_FILE_INJECT_STATE',

        //actions for first step : 

        CLEAN_FIRST_STAGE: 'IMPORT.CLEAN_FIRST_STAGE',

        SHOW_VOTER_SOURCE_MODAL_DIALOG: 'IMPORT.SHOW_VOTER_SOURCE_MODAL_DIALOG',
        HIDE_VOTER_SOURCE_MODAL_DIALOG: 'IMPORT.HIDE_VOTER_SOURCE_MODAL_DIALOG',

        VOTER_SEARCH_FIELD_CHANGE: 'IMPORT.VOTER_SEARCH_FIELD_CHANGE',
        VOTER_SEARCH_SET_BOTTOM_ERROR: 'IMPORT.VOTER_SEARCH_SET_BOTTOM_ERROR',
        VOTER_SEARCH_FETCH_DATA_BEGIN: 'IMPORT.VOTER_SEARCH_FETCH_DATA_BEGIN', //set "loading" message
        VOTER_SEARCH_FETCH_DATA_END: 'IMPORT.VOTER_SEARCH_FETCH_DATA_END', //remove "loading" message
        VOTER_SEARCH_SET_ROW_SELECTED: 'IMPORT.VOTER_SEARCH_SET_ROW_SELECTED', //selects row in found result-set in AddVoterSource screen
        VOTER_SEARCH_CLEAN_DATA: 'IMPORT.VOTER_SEARCH_CLEAN_DATA',
        CLEAN_SEARCH_VOTER_STATE_FIELDS: 'IMPORT.CLEAN_SEARCH_VOTER_STATE_FIELDS',
        VOTER_IDENTITY_NUMBER_CHANGE: 'IMPORT.VOTER_IDENTITY_NUMBER_CHANGE',
        SET_VOTER_ROW_SELECTED: 'IMPORT.SET_VOTER_ROW_SELECTED', //selects voter source in importLoadScreen

        VOTER_IMPORT_LOAD_FIELD_CHANGE: 'IMPORT.VOTER_IMPORT_LOAD_FIELD_CHANGE',
        CSV_FILE_DATA_UPDATE: 'IMPORT.CSV_FILE_DATA_UPDATE',


        //actions for second step : 

        CLEAN_SECOND_STAGE: 'IMPORT.CLEAN_SECOND_STAGE',
        COMBO_VALUE_CHANGE: 'IMPORT.COMBO_VALUE_CHANGE',
        IS_FILE_CHECKBOX_CHANGE: 'IMPORT.IS_FILE_CHECKBOX_CHANGE',

        //actions for third step  : 

        CLEAN_THIRD_STAGE: 'IMPORT.CLEAN_THIRD_STAGE',
        THIRD_STEP_COLLAPSE_CHANGE: 'IMPORT.THIRD_STEP_COLLAPSE_CHANGE',
        THIRD_STEP_COMBO_ITEM_CHANGE: 'IMPORT.THIRD_STEP_COMBO_ITEM_CHANGE',
        THIRD_STEP_VOTER_GROUP_COMBO_CHANGE: 'IMPORT.THIRD_STEP_VOTER_GROUP_COMBO_CHANGE',
        THIRD_STEP_REGULAR_ITEM_CHANGE: 'IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE', //regular non combo item change
        THIRD_STEP_APPEND_TO_VOTER_GROUPS: 'IMPORT.THIRD_STEP_APPEND_TO_VOTER_GROUPS',
        SHOW_INSTITUTE_SOURCE_MODAL_DIALOG: 'IMPORT.SHOW_INSTITUTE_SOURCE_MODAL_DIALOG',
        HIDE_INSTITUTE_SOURCE_MODAL_DIALOG: 'IMPORT.HIDE_INSTITUTE_SOURCE_MODAL_DIALOG',
        THIRD_STEP_SEARCH_INSTITUTE_COMBO_ITEM_CHANGE: 'IMPORT.THIRD_STEP_SEARCH_INSTITUTE_COMBO_ITEM_CHANGE',
        THIRD_STEP_SEARCH_INSTITUTE_FIELD_ITEM_CHANGE: 'IMPORT.THIRD_STEP_SEARCH_INSTITUTE_FIELD_ITEM_CHANGE', //change for non-combo items state
        INSTITUTE_SEARCH_SET_ROW_SELECTED: 'IMPORT.INSTITUTE_SEARCH_SET_ROW_SELECTED',
        CHOOSED_INSTITUTE_ROW: 'IMPORT.CHOOSED_INSTITUTE_ROW',
        INSTITUTES_SEARCH_CLEAN_DATA: 'IMPORT.INSTITUTES_SEARCH_CLEAN_DATA',
        INSTITUTE_SEARCH_FETCH_DATA_END: 'IMPORT.INSTITUTE_SEARCH_FETCH_DATA_END',
        SUPPORT_STATUS_FETCH_DATA_END: 'IMPORT.SUPPORT_STATUS_FETCH_DATA_END',

        //actions for final step  : 

        CLEAN_FOURTH_STAGE: 'IMPORT.CLEAN_FOURTH_STAGE',
        FINAL_STEP_COLLAPSE_CHANGE: 'IMPORT.FINAL_STEP_COLLAPSE_CHANGE',
        UPDATE_CURRENT_JOB_ROWS_STATUS: 'IMPORT.UPDATE_CURRENT_JOB_ROWS_STATUS',
        SET_CSV_FILE_DATA_TO_DOWNLOAD: 'IMPORT.SET_CSV_FILE_DATA_TO_DOWNLOAD',
        FILE_FINISHED_DOWNLOADING: 'IMPORT.FILE_FINISHED_DOWNLOADING',
        SET_IFRAME_CSV_FILE_SRC: 'IMPORT.SET_IFRAME_CSV_FILE_SRC',

    },

    MANUAL_VOTES: {
        GLOBAL_SCREEN_SET_PARAM_VALUE: 'MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE',
        SEARCH_SCREEN_SET_PARAM_VALUE: 'MANUAL_VOTES.SEARCH_SCREEN_SET_PARAM_VALUE',
        ADD_TEMP_USER_UPDATE: 'MANUAL_VOTES.ADD_TEMP_USER_UPDATE',
        REMOVE_TEMP_USER_UPDATE: 'MANUAL_VOTES.REMOVE_TEMP_USER_UPDATE',
        CLEAN_SCREEN: 'MANUAL_VOTES.CLEAN_SCREEN',
        CLEAN_SEARCH_SCREEN: 'MANUAL_VOTES.CLEAN_SEARCH_SCREEN',
    },

    DASHBOARD: {
        LOADED_DATA: 'DASHBOARD.LOADED_DATA',
        LOAD_MORE_DATA: 'DASHBOARD.LOAD_MORE_DATA',
        REFRESH_DATA: 'DASHBOARD.REFRESH_DATA',

        DASHBOARD_SET_IFRAME_CSV_FILE_SRC: 'DASHBOARD.DASHBOARD_SET_IFRAME_CSV_FILE_SRC',
        CHANGE_CURRENT_PAGE: 'DASHBOARD.CHANGE_CURRENT_PAGE',

        CHANGE_LOADED_DATA_FLAG: 'DASHBOARD.CHANGE_LOADED_DATA_FLAG',
        RESET_ALL_DATA: 'DASHBOARD.RESET_ALL_DATA',
        UPDATE_CSV_FILE_STATUS: 'DASHBOARD.UPDATE_CSV_FILE_STATUS'
		
    },
    REPORTS: {
        //START GENERAL_REPORT
        SET_GENERAL_REPORT_VALUE: 'REPORTS.SET_GENERAL_REPORT_VALUE',
        SET_GENERAL_REPORT_RESULTS: 'REPORTS.SET_GENERAL_REPORT_RESULTS',
        UPDATE_GENERAL_REPORT_RESULTS: 'REPORTS.UPDATE_GENERAL_REPORT_RESULTS',
        UPDATE_RESULTS_DISPLAY_COUNT_VALUE: 'REPORTS.UPDATE_RESULTS_DISPLAY_COUNT_VALUE',
        CHANGE_CURRENT_DISPLAIED_REPORT_TYPE: 'REPORTS.CHANGE_CURRENT_DISPLAIED_REPORT_TYPE',
        NAVIGATE_TO_RESULTS_PAGE_INDEX: 'REPORTS.NAVIGATE_TO_RESULTS_PAGE_INDEX',
        CHANGE_COMBINE_OPTIONS_VALUE: 'REPORTS.CHANGE_COMBINE_OPTIONS_VALUE',
        LOADING_REPORT_RESULTS_STATUS_CHANGED: 'REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED',
        IS_CANCELED_LOADING_RESULTS_CHANGED: 'REPORTS.IS_CANCELED_LOADING_RESULTS_CHANGED',
        DOWNLOADING_REPORT_STATUS_CHANGED: 'REPORTS.DOWNLOADING_REPORT_STATUS_CHANGED',
        SET_SELECTED_COMBINE_ROW_DETAILES: 'REPORTS.SET_SELECTED_COMBINE_ROW_DETAILES',
        RESET_REPORT_RESULTS: 'REPORTS.RESET_REPORT_RESULTS',
        CHANGE_MAX_RESULTS_COUNT: 'REPORTS.CHANGE_MAX_RESULTS_COUNT',
        SET_DEFAULT_SELECTED_DETAILED_COLUMNS: 'REPORTS.SET_DEFAULT_SELECTED_DETAILED_COLUMNS',

        UPDATE_SELECTED_DETAILED_COLUMNS: 'REPORTS.UPDATE_SELECTED_DETAILED_COLUMNS',
        UPDATE_SELECTED_DETAILED_COLUMNS_WITH_ELECTION_CAMPAIGN: 'REPORTS.UPDATE_SELECTED_DETAILED_COLUMNS_WITH_ELECTION_CAMPAIGN',
        UPDATE_SELECTED_DETAILED_COLUMNS_ORDER: 'REPORTS.UPDATE_SELECTED_DETAILED_COLUMNS_ORDER',

        LOAD_ELECTION_CAMPAIGNS: 'REPORTS.LOAD_ELECTION_CAMPAIGNS',
        TOGGLE_FILTERS_COLLAPSE: 'REPORTS.TOGGLE_FILTERS_COLLAPSE',

        //SAVED INSIDE GENERAL REPORTS REPORTS : 
        CHANGE_SAVED_REPORT_VALUE: 'REPORTS.CHANGE_SAVED_REPORT_VALUE',

        //END SAVE REPORTS INSIDE GENERAL REPORTS

        //SEND SMS GENERAL REPORTS REPORTS :
        SEND_SMS:{
            SHOW_SMS_MODAL: 'REPORTS.SEND_SMS.SHOW_SMS_MODAL',
            VOTERS_COUNTER: 'REPORTS.SEND_SMS.VOTERS_COUNTER',
        },
        //SEND SMS GENERAL REPORTS REPORTS : 
        GENERAL: {
            LOAD_SUPPORT_STATUS: 'REPORTS.GENERAL.LOAD_SUPPORT_STATUS',
        },
        //END GENERAL_REPORT

        //START CAPTAIN OF FIFTY WALKER REPORTS
        CHANGE_GLOBAL_REPORT_FIELD_VALUE: 'REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE',
        CHANGE_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE',
        CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE',
        CLEAN_SEARCH_CAPTAIN50_VOTER_MODAL_FIELDS: 'REPORTS.CLEAN_SEARCH_CAPTAIN50_VOTER_MODAL_FIELDS',
        SET_VOTER_SEARCH_RESULT_ROW_SELECTED: 'REPORTS.SET_VOTER_SEARCH_RESULT_ROW_SELECTED',
        SHOW_HIDE_GLOBAL_MODAL_DIALOG: 'REPORTS.SHOW_HIDE_GLOBAL_MODAL_DIALOG',
        LOADED_CAP50_WALKER_SEARCH_RESULTS: 'REPORTS.LOADED_CAP50_WALKER_SEARCH_RESULTS',
        EXPAND_SHRINK_ALL_ADDITIONAL_FILTERS: 'REPORTS.EXPAND_SHRINK_ALL_ADDITIONAL_FILTERS',
        EXPAND_REPORT_VOTER_ROW: 'REPORTS.EXPAND_REPORT_VOTER_ROW',
        REPORTS_SUPPORT_STATUS_FETCH_DATA_END: 'REPORTS.REPORTS_SUPPORT_STATUS_FETCH_DATA_END',
        REPORT_EDIT_FIELD_VALUE_CHANGE: 'REPORTS.REPORT_EDIT_FIELD_VALUE_CHANGE',
        REPORT_RESTORE_OLD_VALUES: 'REPORTS.REPORT_RESTORE_OLD_VALUES',
        RESTORE_TO_MI_ADDRESS: 'REPORTS.RESTORE_TO_MI_ADDRESS',
        COLLECTIVE_HOUSEHOLD_UPDATES: 'REPORTS.COLLECTIVE_HOUSEHOLD_UPDATES',
        //END CAPTAIN OF FIFTY WALKER REPORTS
        WALKERS: {
            ELECTION_DAILY_REPORT: {
                CHANGE_GLOBAL_REPORT_FIELD_VALUE: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_GLOBAL_REPORT_FIELD_VALUE',
                CHANGE_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE',
                RESET_PAGINATION_DATA: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.RESET_PAGINATION_DATA',
                CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE',
                SHOW_HIDE_GLOBAL_MODAL_DIALOG: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.SHOW_HIDE_GLOBAL_MODAL_DIALOG',
                CLEAN_SEARCH_CAPTAIN50_VOTER_MODAL_FIELDS: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.CLEAN_SEARCH_CAPTAIN50_VOTER_MODAL_FIELDS',
                SET_VOTER_SEARCH_RESULT_ROW_SELECTED: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.SET_VOTER_SEARCH_RESULT_ROW_SELECTED',
                CLEAN_ALL_FILEDS: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.CLEAN_ALL_FILEDS',
                LOADED_ELECTION_DAY_WALKER_SEARCH_RESULTS: {
                    CAPTAIN_VOTERS: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.LOADED_ELECTION_DAY_WALKER_SEARCH_RESULTS.CAPTAIN_VOTERS',
                    BALLOTS: 'REPORTS.WALKERS.ELECTION_DAILY_REPORT.LOADED_ELECTION_DAY_WALKER_SEARCH_RESULTS.BALLOTS',
                }
            },
            GENERAL_REPORT: {
                CHANGE_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.WALKERS.GENERAL_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE',
                GET_SEARCH_RESULT: 'REPORTS.WALKERS.GENERAL_REPORT.GET_SEARCH_RESULT',
                SET_REQEST_DATA: 'REPORTS.WALKERS.GENERAL_REPORT.SET_REQEST_DATA'
            }
        },

        STATUSES: {
            LOAD_SUPPORT_STATUSES: 'REPORTS.STATUSES.LOAD_SUPPORT_STATUSES',

            LOAD_CITY_NEIGHBORHOODS: 'REPORTS.STATUSES.LOAD_CITY_NEIGHBORHOODS',
            RESET_CITY_NEIGHBORHOODS: 'REPORTS.STATUSES.RESET_CITY_NEIGHBORHOODS',

            LOAD_CITY_CLUSTERS: 'REPORTS.STATUSES.LOAD_CITY_CLUSTERS',
            RESET_CITY_CLUSTERS: 'REPORTS.STATUSES.RESET_CITY_CLUSTERS',

            LOAD_CLUSTER_BALLOTS: 'REPORTS.STATUSES.LOAD_CLUSTER_BALLOTS',
            RESET_CLUSTER_BALLOTS: 'REPORTS.STATUSES.RESET_CLUSTER_BALLOTS',

            LOAD_SUMMARY_RESULT: 'REPORTS.STATUSES.LOAD_SUMMARY_RESULT',
            LOAD_MORE_SUMMARY_RESULT: 'REPORTS.STATUSES.LOAD_MORE_SUMMARY_RESULT',

            SET_LOADING_DATA_FLAG: 'REPORTS.STATUSES.SET_LOADING_DATA_FLAG',
            UNSET_LOADING_DATA_FLAG: 'REPORTS.STATUSES.UNSET_LOADING_DATA_FLAG',

            RESET_SUMMARY_RESULT: 'REPORTS.STATUSES.RESET_SUMMARY_RESULT'
        },

        CAPTAIN: {
            DISPLAY_CAPTAIN50_BALLOTS: 'REPORTS.CAPTAIN.DISPLAY_CAPTAIN50_BALLOTS',
            LOAD_SUPPORT_STATUSES: 'REPORTS.CAPTAIN.LOAD_SUPPORT_STATUSES',

            LOAD_SUMMARY_RESULT: 'REPORTS.CAPTAIN.LOAD_SUMMARY_RESULT',
            LOAD_MORE_SUMMARY_RESULT: 'REPORTS.CAPTAIN.LOAD_MORE_SUMMARY_RESULT',

            SET_LOADING_DATA_FLAG: 'REPORTS.CAPTAIN.SET_LOADING_DATA_FLAG',
            UNSET_LOADING_DATA_FLAG: 'REPORTS.CAPTAIN.UNSET_LOADING_DATA_FLAG',

            RESET_SUMMARY_RESULT: 'REPORTS.CAPTAIN.RESET_SUMMARY_RESULT',
            SET_LOADED_FIRST_RESULT: 'REPORTS.CAPTAIN.SET_LOADED_FIRST_RESULT',
            CHANGE_SEARCH_REPORT_FIELD_VALUE: 'REPORTS.CAPTAIN.CHANGE_SEARCH_REPORT_FIELD_VALUE',
            CLEAN_SCREEN: 'REPORTS.CAPTAIN.CLEAN_SCREEN',
        },

        CLUSTERS: {
            LOAD_CLUSTER_ELECTION_ROLES: 'REPORTS.CLUSTERS.LOAD_CLUSTER_ELECTION_ROLES',

            LOAD_CITY_CLUSTERS: 'REPORTS.CLUSTERS.LOAD_CITY_CLUSTERS',
            RESET_CITY_CLUSTERS: 'REPORTS.CLUSTERS.RESET_CITY_CLUSTERS',

            LOAD_CITY_NEIGHBORHOODS: 'REPORTS.CLUSTERS.LOAD_CITY_NEIGHBORHOODS',
            RESET_CITY_NEIGHBORHOODS: 'REPORTS.CLUSTERS.RESET_CITY_NEIGHBORHOODS',

            SET_LOADING_DATA_FLAG: 'REPORTS.CLUSTERS.SET_LOADING_DATA_FLAG',
            UNSET_LOADING_DATA_FLAG: 'REPORTS.CLUSTERS.UNSET_LOADING_DATA_FLAG',

            RESET_ALL_DATA: 'REPORTS.CLUSTERS.RESET_ALL_DATA',
            RESET_SUMMARY_RESULT: 'REPORTS.CLUSTERS.RESET_SUMMARY_RESULT',
            LOAD_SUMMARY_RESULT: 'REPORTS.CLUSTERS.LOAD_SUMMARY_RESULT',
            LOAD_MORE_SUMMARY_RESULT: 'REPORTS.CLUSTERS.LOAD_MORE_SUMMARY_RESULT',


            /** Modal Search **/
            LOAD_MODAL_SEARCH_LEADER_CLUSTERS: 'REPORTS.CLUSTERS.LOAD_MODAL_SEARCH_LEADER_CLUSTERS',
            RESET_MODAL_SEARCH_LEADER_CLUSTERS: 'REPORTS.CLUSTERS.RESET_MODAL_SEARCH_LEADER_CLUSTERS',

            MODAL_SEARCH_SET_LOADING_DATA_FLAG: 'REPORTS.CLUSTERS.MODAL_SEARCH_SET_LOADING_DATA_FLAG',
            MODAL_SEARCH_UNSET_LOADING_DATA_FLAG: 'REPORTS.CLUSTERS.MODAL_SEARCH_UNSET_LOADING_DATA_FLAG',

            MODAL_SEARCH_RESET_SUMMARY_RESULT: 'REPORTS.CLUSTERS.MODAL_SEARCH_RESET_SUMMARY_RESULT',
            MODAL_SEARCH_LOAD_SUMMARY_RESULT: 'REPORTS.CLUSTERS.MODAL_SEARCH_LOAD_SUMMARY_RESULT',
            FIND_CLUSTER_LEADER_RESULT: 'REPORTS.CLUSTERS.FIND_CLUSTER_LEADER_RESULT',
            CHANGE_LOADED_LEADER_FLAG: 'REPORTS.CLUSTERS.CHANGE_LOADED_LEADER_FLAG',
            CLUSTER_LEADER_SELECTED: 'REPORTS.CLUSTERS.CLUSTER_LEADER_SELECTED',
            MODAL_SEARCH_LOAD_MORE_SUMMARY_RESULT: 'REPORTS.CLUSTERS.MODAL_SEARCH_LOAD_MORE_SUMMARY_RESULT',

            MODAL_SEARCH_RESET_ALL_DATA: 'REPORTS.CLUSTERS.MODAL_SEARCH_RESET_ALL_DATA'
        },

        BALLOTS: {
            LOAD_CITY_NEIGHBORHOODS: 'REPORTS.BALLOTS.LOAD_CITY_NEIGHBORHOODS',
            RESET_CITY_NEIGHBORHOODS: 'REPORTS.BALLOTS.RESET_CITY_NEIGHBORHOODS',

            LOAD_CITY_CLUSTERS: 'REPORTS.BALLOTS.LOAD_CITY_CLUSTERS',
            RESET_CITY_CLUSTERS: 'REPORTS.BALLOTS.RESET_CITY_CLUSTERS',

            LOAD_CLUSTER_BALLOTS: 'REPORTS.BALLOTS.LOAD_CLUSTER_BALLOTS',
            RESET_CLUSTER_BALLOTS: 'REPORTS.BALLOTS.RESET_CLUSTER_BALLOTS',

            LOAD_SUPPORT_STATUSES: 'REPORTS.BALLOTS.LOAD_SUPPORT_STATUSES',
            LOAD_ELECTION_CAMPAIGNS: 'REPORTS.BALLOTS.LOAD_ELECTION_CAMPAIGNS',

            RESET_SUMMARY_RESULT: 'REPORTS.BALLOTS.RESET_SUMMARY_RESULT',
            LOAD_SUMMARY_RESULT: 'REPORTS.BALLOTS.LOAD_SUMMARY_RESULT',
            LOAD_MORE_SUMMARY_RESULT: 'REPORTS.BALLOTS.LOAD_MORE_SUMMARY_RESULT',
            LOADING_MORE_DATA_FLAG: 'REPORTS.BALLOTS.LOADING_MORE_DATA_FLAG',

            SET_LOADING_DATA_FLAG: 'REPORTS.BALLOTS.SET_LOADING_DATA_FLAG',
            UNSET_LOADING_DATA_FLAG: 'REPORTS.BALLOTS.UNSET_LOADING_DATA_FLAG',

            CLEAN_ALL_DATA: 'REPORTS.BALLOTS.CLEAN_ALL_DATA',
        }
    },

    HOUSE_STATUS_CHANGE_SERVICE: {
        CHANGE_FIELD_VALUE: 'HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE',
        SUPPORT_STATUS_CHECKBOX_CHANGE: 'HOUSE_STATUS_CHANGE_SERVICE.SUPPORT_STATUS_CHECKBOX_CHANGE',
        SUPPORT_STATUS_CHECKBOXES_CHANGE_ALL: 'HOUSE_STATUS_CHANGE_SERVICE.SUPPORT_STATUS_CHECKBOXES_CHANGE_ALL',
        FINAL_STAGE_UPDATE_STATS_DATA: 'HOUSE_STATUS_CHANGE_SERVICE.FINAL_STAGE_UPDATE_STATS_DATA',
        SUPPORT_STATUS_UPDATE_ROW_SELECTED: 'HOUSE_STATUS_CHANGE_SERVICE.SUPPORT_STATUS_UPDATE_ROW_SELECTED',
        CLEAN_STAGES_DATA: 'HOUSE_STATUS_CHANGE_SERVICE.CLEAN_STAGES_DATA',
    },

    CITIES: {
        CLEAN_ALL_CITIES_AND_SEARCH_SCREENS: 'CITIES.CLEAN_ALL_CITIES_AND_SEARCH_SCREENS',
        INJECT_TEAMS_LIST: 'CITIES.INJECT_TEAMS_LIST',
        COMBO_LIST_ITEM_CHANGED: 'CITIES.COMBO_LIST_ITEM_CHANGED',
        INJECT_CITY_DATA: 'CITIES.INJECT_CITY_DATA',
        SHOW_HIDE_CHOOSE_TEAM_MODAL_DIALOG: 'CITIES.SHOW_HIDE_CHOOSE_TEAM_MODAL_DIALOG',
        CHANGE_ITEM_TOP_CITY_DATA_SCREEN: 'CITIES.CHANGE_ITEM_TOP_CITY_DATA_SCREEN',
        UPDATE_CITY_TEAM_DATA: 'CITIES.UPDATE_CITY_TEAM_DATA',
        UPDATE_CITY_ASSIGN_FIELD: 'CITIES.UPDATE_CITY_ASSIGN_FIELD',
        CHANGE_MAIN_TAB_NUMBER: 'CITIES.CHANGE_MAIN_TAB_NUMBER',
        MUNICIAL_CAMPAIGNS_FETCH_DATA_END: 'CITIES.MUNICIAL_CAMPAIGNS_FETCH_DATA_END',
        MUNICIAL_CAMPAIGN_COMBO_VALUE_CHANGE: 'CITIES.MUNICIAL_CAMPAIGN_COMBO_VALUE_CHANGE',
        MUNICIAL_CAMPAIGNS_CITY_PARTIES_FETCH_DATA: 'CITIES.MUNICIAL_CAMPAIGNS_CITY_PARTIES_FETCH_DATA',
        LOADED_REQUEST_MUNICIPAL_SUB_TOPICS: 'CITIES.LOADED_REQUEST_MUNICIPAL_SUB_TOPICS',

        // actions of first global tab : 
        FIRST_TAB: {
            LOAD_COUNCIL_CANDIDATES_DND_SORT_ITEMS: 'CITIES.FIRST_TAB.LOAD_COUNCIL_CANDIDATES_DND_SORT_ITEMS',
            SET_ADDING_MUNICIPAL_CAMPAIGN: 'CITIES.FIRST_TAB.SET_ADDING_MUNICIPAL_CAMPAIGN',
            NEW_MUNICIPAL_CAMPAIGN_PARTY_ITEM_CHANGE: 'CITIES.FIRST_TAB.NEW_MUNICIPAL_CAMPAIGN_PARTY_ITEM_CHANGE',
            ADDED_NEW_MUNICIAL_ELECTION_PARTY: 'CITIES.FIRST_TAB.ADDED_NEW_MUNICIAL_ELECTION_PARTY',
            SHOW_HIDE_CONFIRM_DELETE_DIALOG: 'CITIES.FIRST_TAB.SET_ADDING_MUNICIPAL_CAMPAIGN',
            SHOW_HIDE_CONFIRM_DELETE_MUNICIPAL_ELECTION_PARTY_DIALOG: 'CITIES.FIRST_TAB.SHOW_HIDE_CONFIRM_DELETE_MUNICIPAL_ELECTION_PARTY_DIALOG',
            DELETED_MUNICIAL_ELECTION_PARTY: 'CITIES.FIRST_TAB.DELETED_MUNICIAL_ELECTION_PARTY',
            SET_MUNICIAL_ELECTION_PARTY_ROW_EDITING: 'CITIES.FIRST_TAB.SET_MUNICIAL_ELECTION_PARTY_ROW_EDITING',
            ELECTION_PARTY_ROW_EDITING_ROW_ITEM_CHANGE: 'CITIES.FIRST_TAB.ELECTION_PARTY_ROW_EDITING_ROW_ITEM_CHANGE',
            CHANGE_SELECTED_PARTY_FOR_CITY: 'CITIES.FIRST_TAB.CHANGE_SELECTED_PARTY_FOR_CITY',
            MAIN_CITY_PARTY_ITEM_CHANGE: 'CITIES.FIRST_TAB.MAIN_CITY_PARTY_ITEM_CHANGE',
            MUNICIPAL_CAMPAIGN_CITY_DATA_ITEM_CHANGE: 'CITIES.FIRST_TAB.MUNICIPAL_CAMPAIGN_CITY_DATA_ITEM_CHANGE',
            SAVED_MUNICIPAL_ELECTION_CITY_DATA: 'CITIES.FIRST_TAB.SAVED_MUNICIPAL_ELECTION_CITY_DATA',
            FIRST_TAB_FIRST_COLLAPSE_STATUS_CHANGE: 'CITIES.FIRST_TAB.FIRST_TAB_FIRST_COLLAPSE_STATUS_CHANGE',
            SET_ADDING_NEW_MAYOR_CANDIDATE_ROW: 'CITIES.FIRST_TAB.SET_ADDING_NEW_MAYOR_CANDIDATE_ROW',
            SET_ADDING_NEW_COUNCIL_CANDIDATE_ROW: 'CITIES.FIRST_TAB.SET_ADDING_NEW_COUNCIL_CANDIDATE_ROW',
            ADD_NEW_MAYOR_CANDIDATE_SCREEN_ITEM_CHANGE: 'CITIES.FIRST_TAB.ADD_NEW_MAYOR_CANDIDATE_SCREEN_ITEM_CHANGE',
            ADD_NEW_COUNCIL_CANDIDATE_SCREEN_ITEM_CHANGE: 'CITIES.FIRST_TAB.ADD_NEW_COUNCIL_CANDIDATE_SCREEN_ITEM_CHANGE',
            SET_FOUND_VOTER_DATA: 'CITIES.FIRST_TAB.SET_FOUND_VOTER_DATA',
            SUCCESSFULLY_ADDED_CANDIDATE: 'CITIES.FIRST_TAB.SUCCESSFULLY_ADDED_CANDIDATE',
            SET_CANDIDATE_ROW_CONFIRM_DELETE: 'CITIES.FIRST_TAB.SET_CANDIDATE_ROW_CONFIRM_DELETE',
            SUCCESSFULLY_DELETED_CANDIDATE: 'CITIES.FIRST_TAB.SUCCESSFULLY_DELETED_CANDIDATE',
            SET_CANDIDATE_ROW_EDITING: 'CITIES.FIRST_TAB.SET_CANDIDATE_ROW_EDITING',
            EDITING_CANDIDATE_ROW_ITEM_CHANGE: 'CITIES.FIRST_TAB.EDITING_CANDIDATE_ROW_ITEM_CHANGE',
            SET_COUNCIL_CANDIDATE_TABLE_SORTING: 'CITIES.FIRST_TAB.SET_COUNCIL_CANDIDATE_TABLE_SORTING',
            DND_SORT_CANDIDATE_ROW: 'CITIES.FIRST_TAB.DND_SORT_CANDIDATE_ROW',
            DND_SORT_CANDIDATE_ROW_DROP: 'CITIES.FIRST_TAB.DND_SORT_CANDIDATE_ROW_DROP',
            DND_CANDIDATE_ROW_REVERT_TO_ORIGINAL: 'CITIES.FIRST_TAB.DND_CANDIDATE_ROW_REVERT_TO_ORIGINAL',
            COUNCIL_CANDIDATES_SUCCESSFULLY_UPADES_ORDERS: 'CITIES.FIRST_TAB.COUNCIL_CANDIDATES_SUCCESSFULLY_UPADES_ORDERS',
            CHANGE_SUB_TAB: 'CITIES.FIRST_TAB.CHANGE_SUB_TAB'
        },

        SECOND_TAB: {
            LOADED_ALL_CITY_ROLES_DATA: 'CITIES.SECOND_TAB.LOADED_ALL_CITY_ROLES_DATA',
            SET_ADD_NEW_ROLE_SCREEN_ITEM_VALUE: 'CITIES.SECOND_TAB.SET_ADD_NEW_ROLE_SCREEN_ITEM_VALUE',
            SET_SECOND_TAB_ITEM_VALUE_BY_NAME: 'CITIES.SECOND_TAB.SET_SECOND_TAB_ITEM_VALUE_BY_NAME',
            CLEAN_NEW_CITY_ROLE_SCREEN_DATA: 'CITIES.SECOND_TAB.CLEAN_NEW_CITY_ROLE_SCREEN_DATA',
            ADDED_CITY_ROLE_FOR_VOTER: 'CITIES.SECOND_TAB.ADDED_CITY_ROLE_FOR_VOTER',
            DELETED_CITY_ROLE_ROW: 'CITIES.SECOND_TAB.DELETED_CITY_ROLE_ROW',
            CHANGE_ROLES_COLLECTION_ITEM_VALUE: 'CITIES.SECOND_TAB.CHANGE_ROLES_COLLECTION_ITEM_VALUE',
            DND_SORT_COUNCIL_MEMBER_ROW: 'CITIES.SECOND_TAB.DND_SORT_COUNCIL_MEMBER_ROW',
            DND_SORT_COUNCIL_MEMBER_ROW_DROP: 'CITIES.SECOND_TAB.DND_SORT_COUNCIL_MEMBER_ROW_DROP',
            DND_COUNCIL_MEMBER_ROW_REVERT_TO_ORIGINAL: 'CITIES.SECOND_TAB.DND_COUNCIL_MEMBER_ROW_REVERT_TO_ORIGINAL',
            COUNCIL_MEMBERS_SUCCESSFULLY_UPADES_ORDERS: 'CITIES.SECOND_TAB.COUNCIL_MEMBERS_SUCCESSFULLY_UPADES_ORDERS',
            CLEAN_NEW_RELIGEOUS_OR_SHAS_ROLE: 'CITIES.SECOND_TAB.CLEAN_NEW_RELIGEOUS_OR_SHAS_ROLE',
            CHANGE_SUB_TAB: 'CITIES.SECOND_TAB.CHANGE_SUB_TAB'

        },
        THIRD_TAB: {
            LOADED_HISTORICAL_ELECTION_CAMPAIGNS: 'CITIES.THIRD_TAB.LOADED_HISTORICAL_ELECTION_CAMPAIGNS',

        }
        ,
        FOURTH_TAB: {
            CHANGE_SELECTED_CAMPAIGN: 'CITIES.FOURTH_TAB.CHANGE_SELECTED_CAMPAIGN',
            LOADED_CITY_BUDGET: 'CITIES.FOURTH_TAB.LOADED_CITY_BUDGET',
            SET_BUDGET_ROW_OPENED: 'CITIES.FOURTH_TAB.SET_BUDGET_ROW_OPENED',
            SET_BUDGET_ROWS_OF_SAME_TYPE_OPENED: 'CITIES.FOURTH_TAB.SET_BUDGET_ROWS_OF_SAME_TYPE_OPENED',
            SET_ACTIVIST_BUDGET_INNER_ROW_EDITING: 'CITIES.FOURTH_TAB.SET_ACTIVIST_BUDGET_INNER_ROW_EDITING',
            ACTIVIST_BUDGET_ROW_ITEM_VALUE_CHANGE: 'CITIES.FOURTH_TAB.ACTIVIST_BUDGET_ROW_ITEM_VALUE_CHANGE',
            UPDATED_ACTIVISTS_EXPENSES_ROW: 'CITIES.FOURTH_TAB.UPDATED_ACTIVISTS_EXPENSES_ROW',
            SHOW_ACTIONS_HISTORY_MODAL_WINDOW: 'CITIES.FOURTH_TAB.SHOW_ACTIONS_HISTORY_MODAL_WINDOW',
            LOADED_CITY_ELECTION_ROLES_COUNTINGS: 'CITIES.FOURTH_TAB.LOADED_CITY_ELECTION_ROLES_COUNTINGS',
        }
    },

    FORM1000: {
        SEARCH_SCREEN_ITEM_VALUE_CHANGE: 'FORM1000.SEARCH_SCREEN_ITEM_VALUE_CHANGE',
        SEARCH_RESULTS_SCREEN_ITEM_VALUE_CHANGE: 'FORM1000.SEARCH_RESULTS_SCREEN_ITEM_VALUE_CHANGE',
        VOTER_RESULTS_VOTER_REVERT_VOTE_STATUS: 'FORM1000.VOTER_RESULTS_VOTER_REVERT_VOTE_STATUS',
        SET_ERROR_MODAL_WINDOW_PARAMS: 'FORM1000.SET_ERROR_MODAL_WINDOW_PARAMS',
        CLEAN_SEARCH_SCREEN: 'FORM1000.CLEAN_SEARCH_SCREEN',
        CLEAN_RESULTS_SCREEN: 'FORM1000.CLEAN_RESULTS_SCREEN',
        UPDATE_CLUSTERS_LIST: 'FORM1000.UPDATE_CLUSTERS_LIST',
        UPDATE_BALLOTS_LIST: 'FORM1000.UPDATE_BALLOTS_LIST',
    },

    ACTIVIST: {
        CLEAN_SCREEN: 'ACTIVIST.CLEAN_SCREEN',

        LOAD_CURRENT_USER_GEOGRAPHIC_FILTERS: 'ACTIVIST.LOAD_CURRENT_USER_GEOGRAPHIC_FILTERS',
        LOAD_ELECTION_ROLES: 'ACTIVIST.LOAD_ELECTION_ROLES',
        LOAD_ELECTION_CAMPAIGNS: 'ACTIVIST.LOAD_ELECTION_CAMPAIGNS',
        LOAD_ELECTION_ROLES_BUDGET: 'ACTIVIST.LOAD_ELECTION_ROLES_BUDGET',
        LOAD_CITY_ELECTION_ROLES_BUDGET: 'ACTIVIST.LOAD_CITY_ELECTION_ROLES_BUDGET',
        LOAD_ELECTION_ROLES_SHIFTS: 'ACTIVIST.LOAD_ELECTION_ROLES_SHIFTS',
        LOAD_BALLOT_ROLES: 'ACTIVIST.LOAD_BALLOT_ROLES',

        SEARCH_INPUT_FIELD_CHANGE: 'ACTIVIST.SEARCH_INPUT_FIELD_CHANGE',
        LOAD_ACTIVISTS_SEARCH_RESULT: 'ACTIVIST.LOAD_ACTIVISTS_SEARCH_RESULT',
        RESET_ACTIVISTS_SEARCH_RESULT: 'ACTIVIST.RESET_ACTIVISTS_SEARCH_RESULT',
        SET_SELECTED_ACTIVISTS_ROLE_ID: 'ACTIVIST.SET_SELECTED_ACTIVISTS_ROLE_ID',
        RESET_ACTIVISTS_SEARCH_FIELDS: 'ACTIVIST.RESET_ACTIVISTS_SEARCH_FIELDS',
        LOAD_MORE_ACTIVISTS: 'ACTIVIST.LOAD_MORE_ACTIVISTS',
        UPDATE_ACTIVIST_SUM: 'UPDATE_ACTIVIST_SUM',
        UPDATE_ACTIVIST_ROLE_PAYMENTS_FIELD:'UPDATE_ACTIVIST_ROLE_PAYMENTS_FIELD',
        UPDATE_ACTIVIST_GEO_SUM: 'UPDATE_ACTIVIST_GEO_SUM',
        UPDATE_FIELD_ACTIVIST_IN_SEARCH_LIST:'UPDATE_FIELD_ACTIVIST_IN_SEARCH_LIST',
        LOADING_REPORT_RESULTS_STATUS_CHANGED: 'ACTIVIST.LOADING_REPORT_RESULTS_STATUS_CHANGED',

        SHOW_ADD_ALLOCATION_MODAL: 'ACTIVIST.SHOW_ADD_ALLOCATION_MODAL',
        HIDE_ADD_ALLOCATION_MODAL: 'ACTIVIST.HIDE_ADD_ALLOCATION_MODAL',
        CHANGE_ADDED_ALLOCATION_FLAG: 'ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG',

        DELETE_ACTIVIST_ROLE: 'ACTIVIST.DELETE_ACTIVIST_ROLE',

        EDIT_ACTIVIST_ROLE_DETAILS: 'ACTIVIST.EDIT_ACTIVIST_ROLE_DETAILS',
        EDIT_ACTIVIST_PHONES: 'ACTIVIST.EDIT_ACTIVIST_PHONES',
        EDIT_BANK_VERIFY_DOCUMENT: 'ACTIVIST.EDIT_BANK_VERIFY_DOCUMENT',
        LOAD_ACTIVIST_DETAILS_AND_ROLES: 'ACTIVIST.LOAD_ACTIVIST_DETAILS_AND_ROLES',

        RESET_LOADED_ACTIVIST: 'ACTIVIST.RESET_LOADED_ACTIVIST',
        RESET_SAVED_ROLE_DETAILS_FLAG: 'ACTIVIST.RESET_SAVED_ROLE_DETAILS_FLAG',

        CHANGE_LOADING_CLUSTERS_FLAG: 'ACTIVIST.CHANGE_LOADING_CLUSTERS_FLAG',
        CHANGE_LOADED_CLUSTERS_FLAG: 'ACTIVIST.CHANGE_LOADED_CLUSTERS_FLAG',
        LOAD_CLUSTERS_SERACH_RESULT: 'ACTIVIST.LOAD_CLUSTERS_SERACH_RESULT',
        RESET_CLUSTER_SEARCH: 'ACTIVIST.RESET_CLUSTER_SEARCH',

        LOAD_NEIGHBORHOODS: 'ACTIVIST.LOAD_NEIGHBORHOODS',
        RESET_NEIGHBORHOODS: 'ACTIVIST.RESET_NEIGHBORHOODS',

        LOAD_CLUSTERS: 'ACTIVIST.LOAD_CLUSTERS',
        RESET_CLUSTERS: 'ACTIVIST.RESET_CLUSTERS',

        LOAD_BALLOTS: 'ACTIVIST.LOAD_BALLOTS',
        RESET_BALLOTS: 'ACTIVIST.RESET_BALLOTS',

        MAKE_ACTIVIST_A_CLUSTER_LEADER: 'ACTIVIST.MAKE_ACTIVIST_A_CLUSTER_LEADER',
        
        ADD_GEO_CLUSTER_TO_ACTIVIST_ROLE: 'ACTIVIST.ADD_GEO_CLUSTER_TO_ACTIVIST_ROLE',
        DELETE_ACTIVIST_ROLE_GEO: 'ACTIVIST.DELETE_ACTIVIST_ROLE_GEO',
        RESET_EDIT_ROLE_FLAG: 'ACTIVIST.RESET_EDIT_ROLE_FLAG',

        CHANGE_LOADING_DRIVERS_CLUSTERS_FLAG: 'ACTIVIST.CHANGE_LOADING_DRIVERS_CLUSTERS_FLAG',
        CHANGE_LOADED_DRIVERS_CLUSTERS_FLAG: 'ACTIVIST.CHANGE_LOADED_DRIVERS_CLUSTERS_FLAG',
        LOAD_DRIVERS_CLUSTERS_SERACH_RESULT: 'ACTIVIST.LOAD_DRIVERS_CLUSTERS_SERACH_RESULT',
        RESET_DRIVERS_CLUSTER_SEARCH: 'ACTIVIST.RESET_DRIVERS_CLUSTER_SEARCH',
        RESET_EDIT_DRIVER_CLUSTER_FLAG: 'ACTIVIST.RESET_EDIT_DRIVER_CLUSTER_FLAG',
        ADD_CLUSTERS_TO_DRIVER: 'ACTIVIST.ADD_CLUSTERS_TO_DRIVER',
        DELETE_DRIVER_CLUSTER: 'ACTIVIST.DELETE_DRIVER_CLUSTER',
        SHOW_DELETE_DRIVER_CLUSTER_ERROR_MODAL: 'ACTIVIST.SHOW_DELETE_DRIVER_CLUSTER_ERROR_MODAL',
        HIDE_DELETE_DRIVER_CLUSTER_ERROR_MODAL: 'ACTIVIST.HIDE_DELETE_DRIVER_CLUSTER_ERROR_MODAL',
        UPDATE_CLUSTER_GOOGLE_MAP:'ACTIVIST.UPDATE_CLUSTER_GOOGLE_MAP',

        SHOW_CONFIRM_DELETE_MODAL: 'ACTIVIST.SHOW_CONFIRM_DELETE_MODAL',
        HIDE_CONFIRM_DELETE_MODAL: 'ACTIVIST.HIDE_CONFIRM_DELETE_MODAL',

        CHANGE_LOADING_BALLOTS_FLAG: 'ACTIVIST.CHANGE_LOADING_BALLOTS_FLAG',
        CHANGE_LOADED_BALLOTS_FLAG: 'ACTIVIST.CHANGE_LOADED_BALLOTS_FLAG',
        LOAD_BALLOTS_SERACH_RESULT: 'ACTIVIST.LOAD_BALLOTS_SERACH_RESULT',
        RESET_BALLOT_SEARCH: 'ACTIVIST.RESET_BALLOT_SEARCH',
        LOAD_MORE_BALLOTS: 'ACTIVIST.LOAD_MORE_BALLOTS',
        RESET_EDIT_ROLE_BALLOT_FLAG: 'ACTIVIST.RESET_EDIT_ROLE_BALLOT_FLAG',
        ADD_GEO_BALLOT_TO_ACTIVIST_ROLE: 'ACTIVIST.ADD_GEO_BALLOT_TO_ACTIVIST_ROLE',
        EDIT_ACTIVIST_SHIFT_IN_BALLOT: 'ACTIVIST.EDIT_ACTIVIST_SHIFT_IN_BALLOT',
        EDIT_DETAILS_ACTIVIST_SHIFT_IN_BALLOT: 'ACTIVIST.EDIT_DETAILS_ACTIVIST_SHIFT_IN_BALLOT',

        LOAD_STREETS: 'ACTIVIST.LOAD_STREETS',
        RESET_STREETS: 'ACTIVIST.RESET_STREETS',

        LOAD_MINISTER50_SEARCH_CLUSTERS: 'ACTIVIST.LOAD_MINISTER50_SEARCH_CLUSTERS',
        RESET_MINISTER50_SEARCH_CLUSTERS: 'ACTIVIST.RESET_MINISTER50_SEARCH_CLUSTERS',
        LOAD_MINISTER50_SEARCH_RESULT: 'ACTIVIST.LOAD_MINISTER50_SEARCH_RESULT',
        RESET_MINISTER50_SEARCH_RESULT: 'ACTIVIST.RESET_MINISTER50_SEARCH_RESULT',

        LOADING_HOUSEHOLD_SEARCH_FLAG: 'ACTIVIST.LOADING_HOUSEHOLD_SEARCH_FLAG',
        CHANGE_LOADED_HOUSEHOLD_FLAG: 'ACTIVIST.CHANGE_LOADED_HOUSEHOLD_FLAG',
        CHANGE_LOADING_MORE_HOUSEHOLDS_FLAG: 'ACTIVIST.CHANGE_LOADING_MORE_HOUSEHOLDS_FLAG',
        CHANGE_LOADED_MORE_HOUSEHOLDS_FLAG: 'ACTIVIST.CHANGE_LOADED_MORE_HOUSEHOLDS_FLAG',
        LOAD_HOUSEHOLD_SEARCH_RESULT: 'ACTIVIST.LOAD_HOUSEHOLD_SEARCH_RESULT',
        RESET_HOUSEHOLD_SEARCH_RESULT: 'ACTIVIST.RESET_HOUSEHOLD_SEARCH_RESULT',
        LOAD_MORE_HOUSEHOLDS: 'ACTIVIST.LOAD_MORE_HOUSEHOLDS',

        UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG: 'ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG',
        RESET_EDIT_CAPTAIN50_HOUSEHOLDS_FLAG: 'ACTIVIST.RESET_EDIT_CAPTAIN50_HOUSEHOLDS_FLAG',
        ADD_HOUSEHOLDS_TO_CAPTAIN_50: 'ACTIVIST.ADD_HOUSEHOLDS_TO_CAPTAIN_50',
        DELETE_HOUSEHOLDS_OF_CAPTAIN50: 'ACTIVIST.DELETE_HOUSEHOLDS_OF_CAPTAIN50',

        ADD_MESSAGE_TO_ACTIVIST: 'ACTIVIST.ADD_MESSAGE_TO_ACTIVIST',
        CHANGE_ACTIVIST_ALLOCATION_LOCK: 'ACTIVIST.CHANGE_ACTIVIST_ALLOCATION_LOCK',
        CHANGE_ACTIVIST_ALLOCATION_BONUS_LOCK: 'ACTIVIST.CHANGE_ACTIVIST_ALLOCATION_BONUS_LOCK',

        CHANGE_EDIT_BALLOT_BOX_ROLE_FLAG: 'ACTIVIST.CHANGE_EDIT_BALLOT_BOX_ROLE_FLAG',
        ADD_BALLOT_BOX_ROLE_TO_BALLOT_BOX: 'ACTIVIST.ADD_BALLOT_BOX_ROLE_TO_BALLOT_BOX',
        RESET_EDIT_BALLOT_BOX: 'ACTIVIST.RESET_EDIT_BALLOT_BOX',

        CLUSTER_LEADER: {
            LOAD_NEIGHBORHOODS: 'ACTIVIST.CLUSTER_LEADER.LOAD_NEIGHBORHOODS',
            RESET_NEIGHBORHOODS: 'ACTIVIST.CLUSTER_LEADER.RESET_NEIGHBORHOODS',

            LOAD_CLUSTERS: 'ACTIVIST.CLUSTER_LEADER.LOAD_CLUSTERS',
            RESET_CLUSTERS: 'ACTIVIST.CLUSTER_LEADER.RESET_CLUSTERS'
        },

        DRIVER: {
            LOAD_NEIGHBORHOODS: 'ACTIVIST.DRIVER.LOAD_NEIGHBORHOODS',
            RESET_NEIGHBORHOODS: 'ACTIVIST.DRIVER.RESET_NEIGHBORHOODS',

            LOAD_CLUSTERS: 'ACTIVIST.DRIVER.LOAD_CLUSTERS',
            RESET_CLUSTERS: 'ACTIVIST.DRIVER.RESET_CLUSTERS'
        },

        HOUSEHOLD: {
            LOAD_NEIGHBORHOODS: 'ACTIVIST.HOUSEHOLD.LOAD_NEIGHBORHOODS',
            RESET_NEIGHBORHOODS: 'ACTIVIST.HOUSEHOLD.RESET_NEIGHBORHOODS',

            LOAD_STREETS: 'ACTIVIST.HOUSEHOLD.LOAD_STREETS',
            RESET_STREETS: 'ACTIVIST.HOUSEHOLD.RESET_STREETS',

            LOAD_CLUSTERS: 'ACTIVIST.HOUSEHOLD.LOAD_CLUSTERS',
            RESET_CLUSTERS: 'ACTIVIST.HOUSEHOLD.RESET_CLUSTERS',

            LOAD_BALLOTS: 'ACTIVIST.HOUSEHOLD.LOAD_BALLOTS',
            RESET_BALLOTS: 'ACTIVIST.HOUSEHOLD.RESET_BALLOTS'
        },

        MODAL_UPDATE_ALLOCATION : {
            TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY: 'ACTIVIST.MODAL_UPDATE_ALLOCATION.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY',
            LOADED_AVAILABLE_CLUSTERS_ALLOCATIONS: 'ACTIVIST.MODAL_UPDATE_ALLOCATION.LOADED_AVAILABLE_CLUSTERS_ALLOCATIONS',
            LOADED_AVAILABLE_BALLOTS_ALLOCATIONS: 'ACTIVIST.MODAL_UPDATE_ALLOCATION.LOADED_AVAILABLE_BALLOTS_ALLOCATIONS'
        }
    },
    MANAGEMENT_CITY_VIEW: {
        CHANGE_CLUSTER_ACTIVISTS_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.CHANGE_CLUSTER_ACTIVISTS_ROW_DETAILS',
        CHANGE_CLUSTER_BALLOT_ACTIVISTS_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.CHANGE_CLUSTER_BALLOT_ACTIVISTS_ROW_DETAILS',
        CHANGE_BALLOT_ACTIVISTS_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.CHANGE_BALLOT_ACTIVISTS_ROW_DETAILS',
        LOADED_ENTITY_ACTIVISTS_SUMMARY: 'MANAGEMENT_CITY_VIEW.LOADED_ENTITY_ACTIVISTS_SUMMARY',
        LOADED_ENTITY_CLUSTERS_ACTIVISTS_SUMMARY: 'MANAGEMENT_CITY_VIEW.LOADED_ENTITY_CLUSTERS_ACTIVISTS_SUMMARY',
        SET_CITY_ELECTION_ROLE_ACTIVIST_GEO_DATA: 'MANAGEMENT_CITY_VIEW.SET_CITY_ELECTION_ROLE_ACTIVIST_GEO_DATA',
        LOADED_MUNICIPAL_ACTIVISTS_COORDINATORS: 'MANAGEMENT_CITY_VIEW.LOADED_MUNICIPAL_ACTIVISTS_COORDINATORS',
        LOADED_CITY_QUARTERS: 'MANAGEMENT_CITY_VIEW.LOADED_CITY_QUARTERS',
        LOADED_CLUSTER_ACTIVIST: 'MANAGEMENT_CITY_VIEW.LOADED_CLUSTER_ACTIVIST',
        LOADED_CITY_ACTIVISTS_CLUSTERS: 'MANAGEMENT_CITY_VIEW.LOADED_CITY_ACTIVISTS_CLUSTERS',
        LOADED_BALLOT_BOXES_ROLES: 'MANAGEMENT_CITY_VIEW.LOADED_BALLOT_BOXES_ROLES',
        LOADED_ALL_ELECTION_ROLES: 'MANAGEMENT_CITY_VIEW.LOADED_ALL_ELECTION_ROLES',
        GENERAL_ITEM_VALUE_CHANGE: 'MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE',
        SEARCH_SCREEN: {
            SEARCH_ITEM_VALUE_CHANGE: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SEARCH_ITEM_VALUE_CHANGE',
            SET_NEIGHBORHOODS_AND_CLUSTERS_ITEMS: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_NEIGHBORHOODS_AND_CLUSTERS_ITEMS',
            SET_SHOW_SEARCH_RESULTS: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_SHOW_SEARCH_RESULTS',
            SET_NUMBER_ELECTION_CAMP_CITY_SHAS_VOTERS_COUNT: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_NUMBER_ELECTION_CAMP_CITY_SHAS_VOTERS_COUNT',
            SET_CLUSTER_SUPPORT_VOTER_STATUSES: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_CLUSTER_SUPPORT_VOTER_STATUSES',
            CHANGE_BALLOT_BOX_ROLE_TO_BALLOT_BOX: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.CHANGE_BALLOT_BOX_ROLE_TO_BALLOT_BOX',
            CHANGE_BALLOT_BOX_ROLE: 'MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.CHANGE_BALLOT_BOX_ROLE',
        },

        NAVIGATE_TO_PAGE_NUMBER: 'MANAGEMENT_CITY_VIEW.NAVIGATE_TO_PAGE_NUMBER',
        SHOW_HIDE_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.SHOW_HIDE_ROW_DETAILS',
        HIDE__ALL_TABLE_ROWS_DETAILS: 'MANAGEMENT_CITY_VIEW.HIDE__ALL_TABLE_ROWS_DETAILS',
        CHANGE_CLUSTER_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.CHANGE_CLUSTER_ROW_DETAILS',
        SHOW_HIDE_BALLOT_BOX_ROW_DETAILS: 'MANAGEMENT_CITY_VIEW.SHOW_HIDE_BALLOT_BOX_ROW_DETAILS',
        LOADED_CLUSTER_ACTIVISTS_AND_VOTES_DATA: 'MANAGEMENT_CITY_VIEW.LOADED_CLUSTER_ACTIVISTS_AND_VOTES_DATA',
        CLEAN_ALL_DATA: 'MANAGEMENT_CITY_VIEW.CLEAN_ALL_DATA',
        CLEAN_CITY_DATA: 'MANAGEMENT_CITY_VIEW.CLEAN_CITY_DATA',

        DELETE_ACTIVIST_ROLE:'DELETE_ACTIVIST_ROLE',
        UPDATE_CITY_VIEW_BALLOT_ALLOCATION_ROLE:'UPDATE_CITY_VIEW_BALLOT_ALLOCATION_ROLE',
        UPDATE_CLUSTER_VIEW_BALLOT_ALLOCATION_ROLE:'UPDATE_CLUSTER_VIEW_BALLOT_ALLOCATION_ROLE',
        EDIT_ACTIVIST_ROLE_DETAILS:'EDIT_ACTIVIST_ROLE_DETAILS',
        DELETE_CLUSTER_ACTIVIST_ROLE:'DELETE_CLUSTER_ACTIVIST_ROLE',
        ADD_ALLOCATION_MODAL: {
            SET_ACTIVIST_ITEM: 'SET_ACTIVIST_ITEM'
        }
    },

    VOTERS_MANUAL: {
        LOAD_CSV_SOURCES: 'VOTERS_MANUAL.LOAD_CSV_SOURCES',
        LOAD_SUPPORT_STATUSES: 'VOTERS_MANUAL.LOAD_SUPPORT_STATUSES',
        LOAD_INSTITUTES: 'VOTERS_MANUAL.LOAD_INSTITUTES',
        LOAD_INSTITUTE_ROLES: 'VOTERS_MANUAL.LOAD_INSTITUTE_ROLES',
        LOAD_ETHNIC_GROUPS: 'VOTERS_MANUAL.LOAD_ETHNIC_GROUPS',
        LOAD_RELIGIOUS_GROUPS: 'VOTERS_MANUAL.LOAD_RELIGIOUS_GROUPS',
        CHANGE_FILED_VALUE_BY_NAME: 'VOTERS_MANUAL.CHANGE_FILED_VALUE_BY_NAME',

        RESET_STREETS: 'VOTERS_MANUAL.RESET_STREETS',
        LOAD_STREETS: 'VOTERS_MANUAL.LOAD_STREETS',

        DATA_SOURCE: {
            CHANGE_LOADED_VOTER_FLAG: 'VOTERS_MANUAL.DATA_SOURCE.CHANGE_LOADED_VOTER_FLAG',
            CLEAN_DATA_SOURCE: 'VOTERS_MANUAL.DATA_SOURCE.CLEAN_DATA_SOURCE',

            RESET_VOTER: 'VOTERS_MANUAL.DATA_SOURCE.RESET_VOTER',
            LOAD_VOTER: 'VOTERS_MANUAL.DATA_SOURCE.LOAD_VOTER'
        },

        SECOND_TAB: {
            CHANGE_LOADED_VOTER_FLAG: 'VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_VOTER_FLAG',
            CLEAN_DATA_SOURCE: 'VOTERS_MANUAL.SECOND_TAB.CLEAN_DATA_SOURCE',

            LOAD_VOTER: 'VOTERS_MANUAL.SECOND_TAB.LOAD_VOTER',
            RESET_VOTER: 'VOTERS_MANUAL.SECOND_TAB.RESET_VOTER',

            CHANGE_LOADED_SELECTED_VOTER_FLAG: 'VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_SELECTED_VOTER_FLAG',
            LOAD_SELECTED_VOTER: 'VOTERS_MANUAL.SECOND_TAB.LOAD_SELECTED_VOTER'
        },

        CHANGE_SAVED_SELECTED_VOTER_FLAG: 'VOTERS_MANUAL.CHANGE_SAVED_SELECTED_VOTER_FLAG'
    },

    ELECTIONS_CAMPAIGNS: {
        LOAD_ELECTIONS_CAMPAIGNS: 'ELECTIONS_CAMPAIGNS.LOAD_ELECTIONS_CAMPAIGNS',
        LOAD_SUPPORT_STATUSES: 'ELECTIONS_CAMPAIGNS.LOAD_SUPPORT_STATUSES',

        EDIT_SUPPORT_STATUS: 'ELECTIONS_CAMPAIGNS.EDIT_SUPPORT_STATUS',
        CHANGE_FIELD_VALUE: 'ELECTIONS_CAMPAIGNS.CHANGE_FIELD_VALUE',

        CHANGE_LOADED_CAMPAIGN_FLAG: 'ELECTIONS_CAMPAIGNS.CHANGE_LOADED_CAMPAIGN_FLAG',
        LOAD_ELECTION_CAMPAIGN_DETAILS: 'ELECTIONS_CAMPAIGNS.LOAD_ELECTION_CAMPAIGN_DETAILS',
        EDIT_ELECTION_CAMPAIGN_DETAILS: 'ELECTIONS_CAMPAIGNS.EDIT_ELECTION_CAMPAIGN_DETAILS',

        LOAD_CURRENT_CAMPAIGN: 'ELECTIONS_CAMPAIGNS.LOAD_CURRENT_CAMPAIGN',

        PROGRESS_BAR: {
            CHANGE_LOADING_FLAG: 'ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADING_FLAG',
            UPDATE_PERCENTS: 'ELECTIONS_CAMPAIGNS.PROGRESS_BAR.UPDATE_PERCENTS',
            CHANGE_LOADED_FLAG: 'ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG',
            RESET_PROGRESS_BAR: 'ELECTIONS_CAMPAIGNS.PROGRESS_BAR.RESET_PROGRESS_BAR'
        },

        VOTER_BOOKS: {
            LOAD_VOTER_BOOKS: 'ELECTIONS_CAMPAIGNS.VOTER_BOOKS.LOAD_VOTER_BOOKS',
            LOAD_VOTER_BOOK: 'ELECTIONS_CAMPAIGNS.VOTER_BOOKS.LOAD_VOTER_BOOK',
			EDIT_SUPPORT_STATUS_UPDATE: 'ELECTIONS_CAMPAIGNS.VOTER_BOOKS.EDIT_SUPPORT_STATUS_UPDATE'
        },

        BUDGET: {
            LOAD_BUDGET_FILES: 'ELECTIONS_CAMPAIGNS.BUDGET.LOAD_BUDGET_FILES',
            LOAD_ELECTION_ROLES: 'ELECTIONS_CAMPAIGNS.BUDGET.LOAD_ELECTION_ROLES',
            LOAD_ELECTION_ROLES_SHIFTS: 'ELECTIONS_CAMPAIGNS.BUDGET.LOAD_ELECTION_ROLES_SHIFTS',
            LOAD_CURRENT_ELECTION_ROLES_SHIFTS: 'ELECTIONS_CAMPAIGNS.BUDGET.LOAD_CURRENT_ELECTION_ROLES_SHIFTS',

            EDIT_ROLE_BUDGET: 'ELECTIONS_CAMPAIGNS.BUDGET.EDIT_ROLE_BUDGET',
            CHANGE_EDITED_ROLE_FLAG: 'ELECTIONS_CAMPAIGNS.BUDGET.CHANGE_EDITED_ROLE_FLAG'
        },

        VOTE_FILES: {
            LOAD_VOTE_FILES: 'ELECTIONS_CAMPAIGNS.VOTE_FILES.LOAD_VOTE_FILES',
            LOAD_VOTE_FILE: 'ELECTIONS_CAMPAIGNS.VOTE_FILES.LOAD_VOTE_FILE',
            EDIT_VOTE_FILE: 'ELECTIONS_CAMPAIGNS.VOTE_FILES.EDIT_VOTE_FILE'
        },

        PERCENTS: {
            CHANGE_LOADED_PERCENTS_FLAG: 'ELECTIONS_CAMPAIGNS.PERCENTS.CHANGE_LOADED_PERCENTS_FLAG',
            LOAD_PREDICTED_PERCENTS: 'ELECTIONS_CAMPAIGNS.PERCENTS.LOAD_PREDICTED_PERCENTS'
        },

        BALLOT_BOXES: {
            FILES: {
                LOAD_BALLOT_BOXES_FILES: 'ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.LOAD_BALLOT_BOXES_FILES',
                LOAD_BALLOT_BOX_FILE: 'ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.LOAD_BALLOT_BOX_FILE',
                EDIT_BALLOT_BOX_FILE: 'ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.EDIT_BALLOT_BOX_FILE',
            }
        },

        SUPPORT_STATUS: {
            LOAD_PREVIOUS_SUPPORT_STATUS: 'ELECTIONS_CAMPAIGNS.SUPPORT_STATUS.LOAD_PREVIOUS_SUPPORT_STATUS',
        },

        SUPPORT_STATUS_UPDATE: {
            LOAD_SUPPORT_STATUS: 'ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.LOAD_SUPPORT_STATUS',
            LOAD_SUPPORT_STATUS_UPDATES: 'ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.LOAD_SUPPORT_STATUS_UPDATES',
            GET_SUPPORT_STATUS_UPDATE: 'ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.GET_SUPPORT_STATUS_UPDATE',
            EDIT_SUPPORT_STATUS_UPDATE: 'ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.EDIT_SUPPORT_STATUS_UPDATE'
        }
        },
        TRANSPORTATIONS: {
            GET_SEARCH_RESULT: 'TRANSPORTATIONS.GET_SEARCH_RESULT',
            CITY_DATA: 'TRANSPORTATIONS.CITY_DATA',
            //Edit rows actions:
            UPDATE_ROW_DATA: 'TRANSPORTATIONS.UPDATE_ROW_DATA',
            UPDATE_ROWS_DATA: 'TRANSPORTATIONS.UPDATE_ROWS_DATA',
            //Modal actions:
            SET_LOADING_DATA_FLAG: 'TRANSPORTATIONS.SET_LOADING_DATA_FLAG',
            CHANGE_LOADED_CITY_DATA_FLAG: 'TRANSPORTATIONS.CHANGE_LOADED_CITY_DATA_FLAG',

            SHOW_HIDE_GLOBAL_MODAL_DIALOG: 'TRANSPORTATIONS.SHOW_HIDE_GLOBAL_MODAL_DIALOG',
            LOAD_MODAL_CLUSTERS: 'TRANSPORTATIONS.LOAD_MODAL_CLUSTERS',
            SEARCH_DRIVERS_RESULTS: 'TRANSPORTATIONS.SEARCH_DRIVERS_RESULTS',
            SET_DRIVERS_LOADING_SEARCH_RESULT: 'TRANSPORTATIONS.SET_DRIVERS_LOADING_SEARCH_RESULT',

            CLUSTERS_DATA: {
                LOAD_CLUSTERS_DATA: 'TRANSPORTATIONS.CLUSTERS_DATA.LOAD_CLUSTERS_DATA',
                CHANGE_LOADED_FLAG: 'TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADED_FLAG',
                CHANGE_LOADING_FLAG: 'TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADING_FLAG',
                RESET_CLUSTERS_DATA: 'TRANSPORTATIONS.CLUSTERS_DATA.RESET_CLUSTERS_DATA'
            },

            DRIVERS_DATA: {
                LOAD_DRIVERS_DATA: 'TRANSPORTATIONS.DRIVERS_DATA.LOAD_DRIVERS_DATA',
                CHANGE_LOADED_FLAG: 'TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADED_FLAG',
                CHANGE_LOADING_FLAG: 'TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADING_FLAG',
                RESET_DRIVERS_DATA: 'TRANSPORTATIONS.DRIVERS_DATA.RESET_DRIVERS_DATA'
            }
        }
};

var electionDayDashboardCancelTokensList = [];

var activistSearchCancelToken = Axios.CancelToken;
var activistSearchSource;

var generalReportCancelToken = Axios.CancelToken;
var generalReportSource;

var statusCancelToken = Axios.CancelToken;
var statusSource;

var ballotCancelToken = Axios.CancelToken;
var ballotSource;

var captain50CancelToken = Axios.CancelToken;
var captain50Source;

var clusterReportCancelToken = Axios.CancelToken;
var clusterReportSource;

var householdSearchCancelToken = Axios.CancelToken;
var householdSearchSource;

/*
   function that searches for institutions by params : 
*/
export function searchInstitutionByParams(dispatch, params) {
    dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_SEARCH_INSTITUTE_FIELD_ITEM_CHANGE, itemName: 'searchInstitutesLoading', itemValue: true });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/institutes/search',
        method: 'get',
        params
    }).then(function (response) {
        let resultsArray = response.data.data.institutes;
        for (let i = 0, len = resultsArray.length; i < len; i++) {
            resultsArray[i].isSelected = false;
        }
        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE, itemName: 'institutesSearchResults', itemValue: resultsArray });
        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_SEARCH_INSTITUTE_FIELD_ITEM_CHANGE, itemName: 'searchInstitutesLoading', itemValue: false });
    }, function (error) {

    });
}

/*
   function that call api and physically saves the csv file , and adds the file data
   to 'scv_files' tables.
*/
export function addCsvDocument(dispatch, router, newCsvFileDetails, originalFileName, uploadingVoterKey, dataSourceKey) {
    var uploadCsvUrl = window.Laravel.baseURL + 'api/elections/imports';
    var data = new FormData();
    data.append('data_source_key', dataSourceKey);
    data.append('document_name', originalFileName);
    data.append('file_upload', newCsvFileDetails);
    data.append('uploader_voter_key', uploadingVoterKey);

    Axios({
        url: uploadCsvUrl,
        method: 'post',
        data: data
    }).then(function (response) {
        // load second step tab - data definition :
        dispatch({ type: ActionTypes.IMPORT.SET_IMPORT_TAB, tabName: 'dataDefinition', fileData: response.data.data });
        router.push('elections/imports/' + response.data.data.fileKey);
    }, function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: errors[errorCode] })
                }
            }
        }
    });
}

export function updateCsvDocument(dispatch, csvFileKey, router, newCsvFileDetails, originalFileName, uploadingVoterKey, dataSourceKey) {
    var uploadCsvUrl = window.Laravel.baseURL + 'api/elections/imports/' + csvFileKey;
    var data = new FormData();
    data.append('data_source_key', dataSourceKey);
    data.append('document_name', originalFileName);
    data.append('uploader_voter_key', uploadingVoterKey);
    data.append('tab_name', 'loadData');
    data.append('_method', 'PUT');

    if (newCsvFileDetails.type) {
        data.append('file_upload', newCsvFileDetails);
    }

    Axios({
        url: uploadCsvUrl,
        method: 'post',
        data: data
    }).then(function (response) {
        // load second step tab - data definition :
        dispatch({ type: ActionTypes.IMPORT.SET_IMPORT_TAB, tabName: 'dataDefinition', fileData: response.data.data });
        router.push('elections/imports/' + response.data.data.fileKey);
    }, function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: errors[errorCode] })
                }
            }
        }
    });
}


/*
 function that searches voter by params using the api : 
*/
export function getVoterByParams(dispatch, searchParam, max_number_of_rows) {
    dispatch({ type: ActionTypes.IMPORT.VOTER_SEARCH_FETCH_DATA_BEGIN });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/search_voter',
        method: 'get',
        params: searchParam,
    }).then(function (response) {

        let voterData = response.data.data;
        if (!Array.isArray(voterData)) {
            voterData = [voterData];
        }
        for (let i in voterData) {
            voterData[i]['isSelected'] = false;
        }
        let constructSmallVoterData = false;
        if (searchParam.is_personal_identity_search == '1') {
            constructSmallVoterData = true;
        }

        dispatch({ type: ActionTypes.IMPORT.VOTER_SEARCH_FETCH_DATA_END, searchVoterDataChunk: voterData, constructSmallVoterData });
    }, function (error) {

    });
}

/*
 function that updates csv file fields in axious call 
*/
export function setFileCsvFields(dispatch, fileKey, isHeader, isHouseholdUpdate, isDuplicatePhonesDelete, columnsArray) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + fileKey + '/fields',
        method: 'post',
        data: {
            is_header: isHeader,
            update_household_address: isHouseholdUpdate,
            delete_duplicate_phones: isDuplicatePhonesDelete,
            columns_array: columnsArray
        },
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.SET_IMPORT_TAB, tabName: 'extraData' });

        //dispatch({type: ActionTypes.IMPORT.VOTER_SEARCH_FETCH_DATA_END, searchVoterDataChunk: voterData , constructSmallVoterData});
    }, function (error) {

    });
}

/*
   function that returns the csv sources list : 
*/
export function getCsvSources(dispatch) {
    var actionURL = window.Laravel.baseURL + 'api/elections/imports/sources';

    Axios({
        url: actionURL,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.VOTER_IMPORT_LOAD_FIELD_CHANGE, fieldName: 'csvSources', fieldValue: response.data.data });

    }, function (error) {

    });
}

/*
Function that saves third step data - these fields that were filled by user , 
and continue to next step : 
*/
export function saveThirdStepData(dispatch, csvFileKey, paramsArray, allowExecuting) {
	dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE, itemName: 'selectedVoterGroupFullPathname', itemValue: paramsArray.groupFullPath });
    paramsArray['tab_name'] = 'extraData';
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + csvFileKey,
        method: 'put',
        data: paramsArray
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.SET_IMPORT_TAB, tabName: 'lastStep' });
        if (allowExecuting) {
            SendCsvFileToParsingJob(dispatch, csvFileKey);
        }
    }, function (error) {

    });
}

/*
send file key to server that dispatch job for that file : 
*/
export function SendCsvFileToParsingJob(dispatch, fileKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + fileKey + '/parse',
        method: 'post'
    }).then(function (response) {

    }, function (error) {

    });
}

/*
returns current csv file progress: 
*/
export function getProcessedFileData(dispatch, fileKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + fileKey + '/progress',
        method: 'get',
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.UPDATE_CURRENT_JOB_ROWS_STATUS, data: response.data.data });

    }, function (error) {

    });
}

/*
  Gets all user's uploaded csv file details.If it's admin - then it returns all user's csv files
*/
export function getCurrentCsvFilesDataStatus(dispatch, searchFields, currentPage, numOfRowsToLoad, sortObj, refresh = false) {
    dispatch({ type: ActionTypes.DASHBOARD.CHANGE_LOADED_DATA_FLAG, flag: false });

    if (!refresh) {
        dispatch({ type: ActionTypes.DASHBOARD.RESET_ALL_DATA });
    }

    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/user_files',
        method: 'get',
        params: {
            from_date: searchFields.from_date,
            to_date: searchFields.to_date,
            file_name: searchFields.file_name,
            execution_status: searchFields.execution_status,
            user: searchFields.user,

            current_page: currentPage,
            num_of_rows: numOfRowsToLoad,

            sort_by_field: sortObj.byField,
            sort_direction: sortObj.direction
        }
    }).then(function (response) {
        if (refresh) {
            dispatch({ type: ActionTypes.DASHBOARD.REFRESH_DATA, rows: response.data.data.rows, currentPage, numOfRowsToLoad });
        } else {
            dispatch({ type: ActionTypes.DASHBOARD.LOADED_DATA, rows: response.data.data.rows, totalRows: response.data.data.totalRows });
        }

        dispatch({ type: ActionTypes.DASHBOARD.CHANGE_LOADED_DATA_FLAG, flag: true });
    }, function (error) {
        dispatch({ type: ActionTypes.DASHBOARD.CHANGE_LOADED_DATA_FLAG, flag: true });
    });
}

export function loadMoreCsvFilesDataStatus(dispatch, searchFields, currentPage, numOfRowsToLoad, sortObj) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/user_files',
        method: 'get',
        params: {
            from_date: searchFields.from_date,
            to_date: searchFields.to_date,
            file_name: searchFields.file_name,
            execution_status: searchFields.execution_status,
            user: searchFields.user,

            current_page: currentPage,
            num_of_rows: numOfRowsToLoad,

            sort_by_field: sortObj.byField,
            sort_direction: sortObj.direction
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.DASHBOARD.LOAD_MORE_DATA, rows: response.data.data.rows });
    }, function (error) {
    });
}

/*
call to remote function that will filter rows of csv file by some criteria : 
*/
export function getFileFilteredRow(dispatch, fileKey, filterActionName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + fileKey + '/filter/' + filterActionName,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.SET_CSV_FILE_DATA_TO_DOWNLOAD, data: response.data.data, fileActionName: filterActionName.toLowerCase() });
    }, function (error) {

    });
}

/*
import csv screen - return all ethnic groups : 
*/
export function getEthnicGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE, itemName: 'ethnicGroups', itemValue: response.data.data })
    }, function (error) {

    }
    );
}

/*
import csv screen - return all religious groups : 
*/
export function getReligiousGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE, itemName: 'religiousGroups', itemValue: response.data.data })
    }, function (error) {

    }
    );
}
/*
    global function- return all ethnic groups : 
*/
export function loadEthnicGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.GENERAL.iTEM_CHANGE, itemName: 'ethnicGroups', itemValue: response.data.data })
    }, function (error) {

    }
    );
}

/*
    global function - return all religious groups : 
*/
export function loadReligiousGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.GENERAL.iTEM_CHANGE, itemName: 'religiousGroups', itemValue: response.data.data })
    }, function (error) {

    }
    );
}

/*
import csv screen - return all voters groups : 
*/
export function getAllVotersGroups(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/elections/voter/groups',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_REGULAR_ITEM_CHANGE, itemName: 'voterGroups', itemValue: response.data.data })
    }, function (error) {

    }
    );
}


/*add new voter group*/
export function addNewGroupName(dispatch, data) {

    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/voter/groups',
        method: 'post',
        data
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.THIRD_STEP_APPEND_TO_VOTER_GROUPS, data: response.data.data })
    }, function (error) {

    }
    );
}

/*
returns all institute roles : 
*/
export function getInstituteRoles(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/institutes/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.INSTITUTE_SEARCH_FETCH_DATA_END, instituteRoles: response.data.data });
    }, function (error) {

    }
    );
}

/*
returns all support statuses : 
*/
export function loadAllSupportStatuses(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/voter/support/statuses',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.SUPPORT_STATUS_FETCH_DATA_END, supportStatuses: response.data.data });
    }, function (error) {

    }
    );
}

export function loadCsvFileFullData(dispatch, router, fileKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/' + fileKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.IMPORT.CSV_EXISTING_FILE_INJECT_STATE, data: response.data.data });
    }, function (error) {
        dispatch({
            type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'קובץ לא קיים'
        });
        router.push('elections/imports');
    });
}


export function createCsvServiceFromResults(dispatch, router, url) {
    //
    Axios({
        url,
        method: 'get',
    }).then(
        result => {
            router.push('elections/imports/' + result.data.data);
        }, function (error) {

        });
}

export function loadGeneralReportResults(dispatch, reportRequestData, isSavedReport) {
    dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: true });
    dispatch({ type: ActionTypes.REPORTS.IS_CANCELED_LOADING_RESULTS_CHANGED, isCanceledLoadingResults: false });
    generalReportSource = generalReportCancelToken.source();
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/general',
        method: 'get',
        params: reportRequestData,
        cancelToken: generalReportSource.token
    }).then(
        result => {
            if (isSavedReport == true) {

                dispatch({ type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'searchResults', fieldValue: result.data.data.data });
                dispatch({ type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'totalResultsCount', fieldValue: result.data.data.count });
                dispatch({ type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'searchResultsColumns', fieldValue: result.data.data.header_columns });
                dispatch({ type: ActionTypes.REPORTS.SET_GENERAL_REPORT_RESULTS, data: result.data.data, reportType: reportRequestData.report_type });
                dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
            }
            else {
                dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
                dispatch({ type: ActionTypes.REPORTS.SET_GENERAL_REPORT_RESULTS, data: result.data.data, reportType: reportRequestData.report_type });
            }
        }, function (error) {
            dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
        });
}
/*
In general report load once the list of saved reports names
*/
export function loadSavedReportsNames(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/general/saved',
        method: 'get',
    }).then(
        result => {
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'definitionComboes', fieldValue: result.data.data });

        }, function (error) {

        });
}

/*
In general report load once the list of all questionares of lasts campaign
*/
export function loadAllQuestionaires(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/general/questionaires',
        method: 'get',
    }).then(
        result => {
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'questionairesList', fieldValue: result.data.data });

        }, function (error) {

        });
}

export function cancelGeneralReport(dispatch) {
    generalReportSource.cancel('Operation canceled by the user, cancelGeneralReport.');
    dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
	dispatch({ type: ActionTypes.REPORTS.IS_CANCELED_LOADING_RESULTS_CHANGED, isCanceledLoadingResults: true });
}

export function loadElectionCampaigns(dispatch,election=false) {
    
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns',
        method: 'get'
    }).then((result)=>{
        if(election)
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ELECTION_CAMPAIGNS, data: result.data.data });
        else
        dispatch({ type: ActionTypes.REPORTS.LOAD_ELECTION_CAMPAIGNS, data: result.data.data });
    }
    )
}

/*
loads basic city data by city key :
*/
export function loadCityData(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey,
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.CITIES.INJECT_CITY_DATA, data: response.data.data });

    }, function (error) {

    }
    );
}

/*
load all teams to elections state:
*/
export function loadTeamsList(store) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/teams',
        method: 'get'
    }).then(function (response) {

        store.dispatch({ type: ActionTypes.CITIES.INJECT_TEAMS_LIST, data: response.data.data });

    }, function (error) {

    }
    );
}
/*
function that updates team id of city

@param dispatch
@param cityKey
@param teamKey
*/
export function updateCityTeam(dispatch, cityKey, changeCrmTeam, teamKey, teamName, leaderName, leaderPhone) {

    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey,
        method: 'put',
        data: { team_key: teamKey, change_crm_team: changeCrmTeam }
    }).then(function (response) {

        dispatch({ type: ActionTypes.CITIES.UPDATE_CITY_TEAM_DATA, teamKey, teamName, leaderName, leaderPhone, changeCrmTeam });

    }, function (error) { displayErrorMessage(error, dispatch)});
}
export function updateCityRequestSubTopicUser(dispatch, cityKey, topicKey ,userHandlerId) {

    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/request-topics/'+ topicKey,
        method: 'put',
        data: { user_handler_id: userHandlerId }
    }).then(function (response) {
        SystemActions.loadRequestTopics(dispatch, null, {'topic_system_name': constants.requests_system_name.municipally, 'city_key': cityKey});
    }, function (error) { displayErrorMessage(error, dispatch)});
}
export function updateTeamRequestSubTopicUser(dispatch, teamKey, topicKey, userHandlerId, userRequestTopicId) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/teams/' + teamKey + '/request-topics/'+ topicKey ,
        method: 'put',
        data: {user_handler_id: userHandlerId, 'user_request_topic_id': userRequestTopicId}
    }).then(function (response) {
        SystemActions.loadTeamRequestsTopic(dispatch, teamKey);

    }, function (error) { displayErrorMessage(error, dispatch)});
}

/*
This function gets from api list of all municipal election campaigns :
*/
export function loadMunicipalElectionsCampaigns(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/municipal_elections/campaigns',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.CITIES.MUNICIAL_CAMPAIGNS_FETCH_DATA_END, data: response.data.data });
        loadMunicipalElectionsExtendedData(dispatch, cityKey, response.data.data.latest_campaign.key)
    }, function (error) {

    }
    );
}

/*
    This function gets municipal campaigns parties  , and selected 
  municipal election campaign party from that list : 
  
  @param dispatch  
  @param cityKey 
  @param campaignKey
*/
export function loadMunicipalElectionsExtendedData(dispatch, cityKey, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey,
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.CITIES.MUNICIAL_CAMPAIGNS_CITY_PARTIES_FETCH_DATA, data: response.data.data });

    }, function (error) {

    }
    );

}

/*
    This function adds new municipal election party to city in specific campaign : 
  
  @param dispatch  
  @param cityKey 
  @param campaignKey
  @param dataParams - post params passed to api
*/
export function addNewElectionCampaignPartyForCity(dispatch, cityKey, campaignKey, dataParams) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/parties',
        method: 'post',
        data: dataParams
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'elections.cities.parameters_candidates.council_parties.add' });
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.ADDED_NEW_MUNICIAL_ELECTION_PARTY, data: response.data.data, isShas: dataParams.is_shas });

    }, function (error) {
        if (error.response.data.error_code == 'I026') {
            dispatch({
                type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'מפלגה כבר קיימת'
            })
        }
    }
    );
}

/*
    This function delets existing municipal election party to city in specific campaign : 
  
  @param dispatch  
  @param cityKey 
  @param campaignKey
  @param campaignKey
*/
export function deleteExistingElectionCampaignPartyForCity(dispatch, cityKey, campaignKey, partyKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/parties/' + partyKey,
        method: 'delete'
    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.DELETED_MUNICIAL_ELECTION_PARTY });

    }, function (error) {

    }
    );
}


/*
    This function saving existing municipal election party to city in specific campaign : 
  
  @param dispatch  
  @param cityKey 
  @param campaignKey
  @param partyKey
    @param requestData
*/
export function saveExistingElectionCampaignPartyForCity(dispatch, cityKey, campaignKey, partyKey, requestData, rowIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/parties/' + partyKey,
        method: 'put',
        data: requestData
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'elections.cities.parameters_candidates.council_parties.edit' });
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SET_MUNICIAL_ELECTION_PARTY_ROW_EDITING, isEditing: false, rowIndex, isShas: requestData.shas });
    }, function (error) {
        if (error.response.data.error_code == 'I026') {
            dispatch({
                type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'מפלגה כבר קיימת'
            })
        }
    }
    );
}


/*
    This function saving existing municipal election city extended data : selected party ,seats ,
    trashold , questionaire text :
  
  @param dispatch  
  @param cityKey 
  @param campaignKey
    @param requestData 
*/
export function saveExistingElectionCampaignCityExtendedData(dispatch, cityKey, campaignKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/cities',
        method: 'put',
        data: requestData
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'elections.cities.parameters_candidates.parameters.edit' });
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SAVED_MUNICIPAL_ELECTION_CITY_DATA, data: response.data.data });
    }, function (error) {

    }
    );
}

/*
function that returns minimized data of voter - it goes to ElectionsCitiesController

@param dispatch
@param personalIdentity
*/
export function searchVoterByIdentity(dispatch, personalIdentity, screenName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/voter/search',
        method: 'get',
        params: { personal_identity: personalIdentity }
    }).then(function (response) {
        if (response.data.data) {

            dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SET_FOUND_VOTER_DATA, data: response.data.data, screenName });
        }
        else {
            dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'תושב לא נמצא' });
        }

    }, function (error) {

    }
    );

}

/*
function that adds via api the candidate by type - "mayor/council"

@param dispatch
@param cityKey
@param campaignKey
@param requestData - voter_id , voter_phone_id , party_id , shas , favorite , candidate_type
*/
export function addCandidateByType(dispatch, cityKey, campaignKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/candidates',
        method: 'post',
        data: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SUCCESSFULLY_ADDED_CANDIDATE, candidateType: requestData.candidate_type, data: response.data.data, isFavorite: requestData.favorite });
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: (requestData.candidate_type == 'mayor' ? 'elections.cities.parameters_candidates.candidates.mayor.add' : 'elections.cities.parameters_candidates.candidates.council.add') });
    }, function (error) {
        if (error.response.data.error_code == 'I021') {
            dispatch({
                type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'תושב כבר קיים ברשימה'
            })
        }
    }
    );

}

/*
function that deletes via api the candidate by type - "mayor/council"

@param dispatch
@param cityKey
@param campaignKey
@param candidateKey
@param requestData -  candidate_type
*/
export function deleteCandidateByType(dispatch, cityKey, campaignKey, candidateKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/candidates/' + candidateKey,
        method: 'delete',
        data: requestData
    }).then(function (response) {

        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SUCCESSFULLY_DELETED_CANDIDATE, candidateType: requestData.candidate_type });

    }, function (error) {

    }
    );

}


/*
Function that saves via api the candidate fields by its type - "mayor/council"

@param dispatch
@param cityKey
@param campaignKey
@param candidateKey
@param requestData -  candidate_type
*/
export function editCandidateByType(dispatch, cityKey, campaignKey, candidateKey, requestData, candidateTypeArray, rowIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/candidates/' + candidateKey,
        method: 'put',
        data: requestData
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'elections.cities.parameters_candidates.candidates.mayor.edit' });
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.SET_CANDIDATE_ROW_EDITING, candidateTypeArray, rowIndex, isEditing: false, isFavorite: requestData.favorite })

    }, function (error) {


    }
    );
}

/*
Function that saves via api the orders for council candidates :

@param dispatch
@param cityKey
@param campaignKey
@param orderedCandidates

*/
export function editCandidatesOrders(dispatch, cityKey, campaignKey, orderedCandidates) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_elections/campaigns/' + campaignKey + '/candidates/orders',
        method: 'put',
        data: {
            ordered_candidates: orderedCandidates
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FIRST_TAB.COUNCIL_CANDIDATES_SUCCESSFULLY_UPADES_ORDERS })

    }, function (error) {

    }
    );
}

/*
Handles getting data of second global tab - city roles data

@param dispatch
@param cityKey
*/
export function loadCityRolesData(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles',
        method: 'get',

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.LOADED_ALL_CITY_ROLES_DATA, data: response.data.data })

    }, function (error) {

    }
    );
}

/*
Handles adding new city role via api

@param dispatch
@param cityKey
@param dataRequest
*/
export function addNewCityRoleByVoter(dispatch, cityKey, dataRequest) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/city_roles',
        method: 'post',
        data: dataRequest

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.CLEAN_NEW_CITY_ROLE_SCREEN_DATA, screenName: (dataRequest.role_type == 0 ? 'newMayorRoleScreen' : 'newDeputyMayorRoleScreen') });
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.ADDED_CITY_ROLE_FOR_VOTER, data: response.data.data, role_type: dataRequest.role_type })

    }, function (error) {

    }
    );
}


/*
Handles deleting city role via api

@param dispatch
@param cityKey
@param requestData
*/
export function deleteCityRoleByVoter(dispatch, cityKey, roleKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/city_roles/' + roleKey,
        method: 'delete',
        data: requestData

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.DELETED_CITY_ROLE_ROW, roleType: requestData.role_type });

    }, function (error) {

    }
    );
}
/*
Handles editing existin city role row via api

@param dispatch
@param cityKey
@param roleKey
@param dataRequest
*/
export function updateCityRoleByVoter(dispatch, cityKey, roleKey, requestData, rowIndex, collectionName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/city_roles/' + roleKey,
        method: 'put',
        data: requestData

    }).then(function (response) {
        dispatch({
            type: ActionTypes.CITIES.SECOND_TAB.CHANGE_ROLES_COLLECTION_ITEM_VALUE,
            collectionName: collectionName,
            rowIndex,
            fieldName: 'editing',
            fieldValue: false
        });


    }, function (error) {

    }
    );
}

/*
Handles adding new council member via api

@param dispatch
@param cityKey
@param dataRequest
*/
export function addNewCityCouncilMember(dispatch, cityKey, dataRequest) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/council_members',
        method: 'post',
        data: dataRequest

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.CLEAN_NEW_CITY_ROLE_SCREEN_DATA, screenName: 'newCouncilMebmerScreen' });
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.ADDED_CITY_ROLE_FOR_VOTER, data: response.data.data, role_type: 2 })

    }, function (error) {

    }
    );
}

/*
Handles deleting council member via api

@param dispatch
@param cityKey
@param requestData
*/
export function deleteCouncilMember(dispatch, cityKey, rowKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/council_members/' + rowKey,
        method: 'delete'

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.DELETED_CITY_ROLE_ROW, roleType: 2 });

    }, function (error) {

    }
    );
}


/*
Handles editing existing council member row via api

@param dispatch
@param cityKey
@param roleKey
@param dataRequest
*/
export function updateCouncilMember(dispatch, cityKey, roleKey, requestData, rowIndex, collectionName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/council_members/' + roleKey,
        method: 'put',
        data: requestData

    }).then(function (response) {
        dispatch({
            type: ActionTypes.CITIES.SECOND_TAB.CHANGE_ROLES_COLLECTION_ITEM_VALUE,
            collectionName: collectionName,
            rowIndex,
            fieldName: 'editing',
            fieldValue: false
        });


    }, function (error) {

    }
    );
}


/*
Function that saves via api the orders for council members :

@param dispatch
@param cityKey
@param orderedCandidates

*/
export function editCityCouncilMembersOrders(dispatch, cityKey, orderedCouncilMembers) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/council_members/order',
        method: 'put',
        data: {
            ordered_council_members: orderedCouncilMembers
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.COUNCIL_MEMBERS_SUCCESSFULLY_UPADES_ORDERS })

    }, function (error) {

    });
}

/*
This function is for loading cluster data by key - it will load all cluster data by cluster key only.
*/
export function loadClusterDataFromKeyOnly(dispatch, clusterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/clusters/' + clusterKey,
        method: 'get'
    }).then(function (response) {
        let basicClusterData = response.data.data;
        loadClustersAndNeighborhoodsByCity(dispatch, basicClusterData.city_key, true, basicClusterData);
        dispatch({
            type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SEARCH_ITEM_VALUE_CHANGE,
            fieldName: 'selectedCity', fieldValue: basicClusterData.city_name,
            fieldItem: { id: basicClusterData.city_id, key: basicClusterData.city_key, name: basicClusterData.city_name }
        });
        dispatch({
            type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SEARCH_ITEM_VALUE_CHANGE,
            fieldName: 'selectedCluster', fieldValue: basicClusterData.name,
            fieldItem: { id: basicClusterData.id, key: basicClusterData.cluster_key, name: basicClusterData.name,
                ballot_boxes: basicClusterData.ballot_boxes, ballot_boxes_count: basicClusterData.ballot_boxes_count }
        });
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_SHOW_SEARCH_RESULTS, show: true });

    }, function (error) {

    }
    );

}

/*
Load neighborhoods and clusters by city key
*/
export function loadClustersAndNeighborhoodsByCity(dispatch, cityKey, externKeyLoad, basicClusterData, cityId = null) {
	dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/' + cityKey + '/neighborhoods_and_clusters',
        method: 'get'
    }).then(function (response) {
        let data = response.data.data
        dispatch({
            type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_NEIGHBORHOODS_AND_CLUSTERS_ITEMS,
            neighborhoods: data.neighborhoods, clusters: data.clusters, prev_last_campagin_name: data.prev_last_campagin_name, cityKey, cityId
        });
        if (externKeyLoad && basicClusterData) { //if loaded by cluster key only
            let realRowIndex = -1;
            let clusters = response.data.data.clusters;
            for (let i = 0; i < clusters.length; i++) {
                if (clusters[i].id == basicClusterData.id) {
                    realRowIndex = i;
                    break;
                }
            }
            let ballotBoxesIds = [];

            for (let k = 0; k < clusters[realRowIndex].ballot_boxes.length; k++) {
                ballotBoxesIds.push(clusters[realRowIndex].ballot_boxes[k].id);
            }
            dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.CHANGE_CLUSTER_ROW_DETAILS, rowIndex: realRowIndex, fieldName: 'loaded_extended_data', fieldValue: true });
            loadClustersBallotsExtendedData(dispatch, basicClusterData.city_key, ballotBoxesIds, realRowIndex);
            loadClusterActivistRoles(dispatch, basicClusterData.city_key, basicClusterData.cluster_key);
        }
		dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:false});

    }, function (error) {
			dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:false});
    }
    );

}
/** 
*   Load city/quarter ballots:
*/
export function loadCityBallotsFullData(dispatch, entityKey, entityType = 1) {
    dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:true});
    dispatch({type: ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE, fieldName: 'ballotsFullData' , fieldValue: null  });  //? Need to get per city?
    
    Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/${entityType}/${entityKey}/ballots-data`,
        method: 'get'
    }).then(function (response) {
        let ballotsFullData = response.data.data
        dispatch({type: ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE, fieldName: 'ballotsFullData' , fieldValue: ballotsFullData  });  //? Need to get per city?
     
		dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:false});

    }, function (error) {
        dispatch({type:ActionTypes.MANAGEMENT_CITY_VIEW.GENERAL_ITEM_VALUE_CHANGE , fieldName:'isLoadingData' , fieldValue:false});
    });
}
/*
Load total number of shas voter in current campaign by city key
*/
export function loadTotalNumberOfShasVoters(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/' + cityKey + '/neighborhoods_and_clusters/total_shas_voters_count',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_NUMBER_ELECTION_CAMP_CITY_SHAS_VOTERS_COUNT, data: response.data.data, cityKey });

    }, function (error) {

    });
}

/*
Handles adding new religeous/shas role member via api by params given

@param dispatch
@param cityKey
@param dataRequest
@param dataRequest.roleTypeItem : 0- religeous role , 1-city shas role
*/
export function addNewReligeousOrShasRoleItem(dispatch, cityKey, dataRequest, newScreenName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/religeous_shas_roles',
        method: 'post',
        data: dataRequest

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.CLEAN_NEW_CITY_ROLE_SCREEN_DATA, screenName: newScreenName });
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.ADDED_CITY_ROLE_FOR_VOTER, data: response.data.data, role_type: (3 + dataRequest.role_type_id) })

    }, function (error) {

    });
}

/*
Load supporting support-statuses of found clusters
*/
export function loadClusterNumberOfSupportStatuses(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/' + cityKey + '/neighborhoods_and_clusters/clusters_voters_supporters',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.SEARCH_SCREEN.SET_CLUSTER_SUPPORT_VOTER_STATUSES, data: response.data.data, cityKey });

    }, function (error) {

    }
    );
}

/*
Handles deleting religeous role or shas role via api

@param dispatch
@param cityKey
@param requestData
*/
export function deleteReligeousOrShasRoleItem(dispatch, cityKey, rowKey, roleType) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/religeous_shas_roles/' + rowKey,
        method: 'delete',
        data: {
            delete_type: (roleType - 3)
        }

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.SECOND_TAB.DELETED_CITY_ROLE_ROW, roleType });

    }, function (error) {

    }
    );
}

/*
Load all ballot box roles
*/
export function loadActivistsSummaryBallotBoxRoles(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/ballot_box_roles',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_BALLOT_BOXES_ROLES, data: response.data.data });

    }, function (error) {

    }
    );
}

/*
Load all ballot box roles
*/
export function loadElectRolesCitySummary(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/all_elections_roles',
        method: 'get'
    }).then(function (response) {

        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_ALL_ELECTION_ROLES, data: response.data.data });

    }, function (error) {

    }
    );
}

/*
Handles editing existing religeous/shas role

@param dispatch
@param cityKey
@param roleKey
@param dataRequest
*/
export function updateReligeousOrShasRole(dispatch, cityKey, roleKey, requestData, rowIndex, collectionName) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/municipal_roles/religeous_shas_roles/' + roleKey,
        method: 'put',
        data: requestData

    }).then(function (response) {
        dispatch({
            type: ActionTypes.CITIES.SECOND_TAB.CHANGE_ROLES_COLLECTION_ITEM_VALUE,
            collectionName: collectionName,
            rowIndex,
            fieldName: 'editing',
            fieldValue: false
        });


    }, function (error) {

    }
    );
}

/*
load extended data for cluster's ballots
*/
export function loadClustersBallotsExtendedData(dispatch, cityKey, ballotBoxes, rowIndex, sourceScreen) {
    let ballot_box_ids = ballotBoxes.sort(function(a, b) {
        return a - b;
      });
    const promise = Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/' + cityKey + '/neighborhoods_and_clusters/extended_ballots_data',
        method: 'get',
        params: { ballot_box_ids: JSON.stringify(ballot_box_ids) }
    })
    if(sourceScreen != 'city_view'){
        promise.then(function (response) {
            if(sourceScreen != 'city_view'){
                dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.CHANGE_CLUSTER_ROW_DETAILS, rowIndex, fieldName: 'extended_ballot_boxes', fieldValue: response.data.data });
            } 
        }, function (error) {
            displayErrorMessage(error, dispatch);
        });
    }
    return promise;

}
export function deleteElectionActivistRoleFromCityActivists(dispatch, roleDeletedData, isBallotRole, sourceScreen = null) {
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/activists/' + roleDeletedData.election_role_key,
        method: 'delete'
    }).then(function (response) {
        if(sourceScreen != 'city_view'){
            if (isBallotRole) {
                dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.DELETE_ACTIVIST_ROLE, roleDeletedData, deleteType: 'election_role' });
            }else{
                dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.DELETE_CLUSTER_ACTIVIST_ROLE, roleDeletedData, deleteType: 'election_role' });
            }
        }

    }, function (error) {
        displayErrorMessage(error, dispatch);
        console.log(error);
    });
}

export function deleteActivistRoleGeoFromCityActivists(dispatch, roleDeletedData, isBallotRole, sourceScreen = null) {
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/activists/geo/' + roleDeletedData.activist_assignment_id,
        method: 'delete'
    }).then(function (response) {
        if(sourceScreen != 'city_view'){
            if (isBallotRole) {
                dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.DELETE_ACTIVIST_ROLE, roleDeletedData, deleteType: 'role_shift' });
           } else {
               dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.DELETE_CLUSTER_ACTIVIST_ROLE, roleDeletedData, deleteType:  'role_shift' });
           }
        }

    }, function (error) {
        displayErrorMessage(error, dispatch);
        console.log(error);
    });
}

//TODO:remove after finish arrange
// export function deleteClusterLeaderFromClusterSummary(dispatch, roleDeletedData) {
//     Axios({
//         url: window.Laravel.baseURL + 'api/system/clusters/' + roleDeletedData.cluster_key,
//         method: 'delete'
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.DELETE_CLUSTER_ACTIVIST_ROLE, roleDeletedData, deleteType:  'cluster_leader' });
//     }, function (error) {
//         console.log(error);
//     });
// }
/*
load all historical election campaigns

@param dispatch
@param cityKey
*/
export function loadHistoricalElectionCampaigns(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/election_historical_campaigns_data',
        method: 'get',

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.THIRD_TAB.LOADED_HISTORICAL_ELECTION_CAMPAIGNS, loadType: 'first', data: response.data.data });
        Axios({
            url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/election_historical_campaigns_data/votes',
            method: 'get',

        }).then(function (innerResponse) {
            dispatch({ type: ActionTypes.CITIES.THIRD_TAB.LOADED_HISTORICAL_ELECTION_CAMPAIGNS, loadType: 'second', data: innerResponse.data.data })

        }, function (error) {

        }
        );

    }, function (error) {

    }
    );
}


/*
Get all city budgets by selected campaign 

@param dispatch
@param cityKey
@param campaignKey
*/
export function loadCityBudgetByCampaign(dispatch, cityKey, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/city_budget/' + campaignKey,
        method: 'get',

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FOURTH_TAB.LOADED_CITY_BUDGET, data: response.data.data })

    }, function (error) {

    }
    );

}


/*
Handles saving activist budget row count and salary to database via api

@param dispatch
@param cityKey
@param editedRowKey - key of row to edit
@param dataRequest - contains activist_count and activist_salary
@param budgetOuterRowIndex
@param budgetInnerRowIndex
*/
export function saveActivistBudgetRowData(dispatch, cityKey, campaignKey, editedRowKey, dataRequest, budgetOuterRowIndex, budgetInnerRowIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/city_budget/' + campaignKey + '/activist_expected_expenses/' + editedRowKey,
        method: 'put',
        data: dataRequest
    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FOURTH_TAB.UPDATED_ACTIVISTS_EXPENSES_ROW, data: response.data.data, budgetOuterRowIndex, budgetInnerRowIndex })

    }, function (error) {

    }
    );
}


/*
Get all city roles budgets and counts by campaign key

@param dispatch
@param cityKey
@param campaignKey
*/
export function loadCityRolesDataCounting(dispatch, cityKey, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey + '/city_budget/' + campaignKey + '/activist_roles_summary',
        method: 'get',

    }).then(function (response) {
        dispatch({ type: ActionTypes.CITIES.FOURTH_TAB.LOADED_CITY_ELECTION_ROLES_COUNTINGS, data: response.data.data })

    }, function (error) {

    }
    );

}


/*
Update headquarters_phone_number of city

@param dispatch
@param cityKey
@param requestData - contains the new phone number
*/
export function updateCityHeadquartersPhoneNumber(dispatch, cityKey, requestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey,
        method: 'put',
        data: requestData

    }).then(function (response) {
        console.log(response.data.data);
    }, function (error) {

    }
    );
}

export function updateCityAssignField(dispatch, cityKey, requestData) {
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/' + cityKey,
        method: 'put',
        data: requestData

    }).then(function (response) {
		dispatch({type:ActionTypes.CITIES.UPDATE_CITY_ASSIGN_FIELD , requestData});
       
    }, function (error) {

    }
    );
}

//--dad
export function searchElectionsActivists(dispatch, searchObj,nameDispatch=false) {
    activistSearchSource = activistSearchCancelToken.source();

    dispatch({ type: ActionTypes.ACTIVIST.RESET_ACTIVISTS_SEARCH_RESULT });
    dispatch({ type: ActionTypes.ACTIVIST.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: true });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/search',
        method: 'get',
        params: searchObj,
        cancelToken: activistSearchSource.token
    }).then(function (response) {
        let activists = response.data.data.voters;
        let totalRecords = response.data.data.recordsCount;
        if(!nameDispatch)
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ACTIVISTS_SEARCH_RESULT, activists, totalRecords });
        else
        dispatch({ type: ActionTypes.ACTIVIST[nameDispatch], activists, totalRecords });

        dispatch({ type: ActionTypes.ACTIVIST.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
        console.log(error);
    });
}

export function cancelSearchElectionsActivists(dispatch) {
    activistSearchSource.cancel('Operation canceled by the user, cancelSearchElectionsActivists.');
    dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
}

export function loadMoreActivists(dispatch, searchObj, currentPage) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/search',
        method: 'get',
        params: {...searchObj, current_page: currentPage}
    }).then(function (response) {
        let activists = response.data.data.voters;

        dispatch({ type: ActionTypes.ACTIVIST.LOAD_MORE_ACTIVISTS, activists });
    }, function (error) {
        console.log(error);
    });
}

export function loadElectionRoles(dispatch) {
   return Axios({
        url: window.Laravel.baseURL + 'api/elections/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ELECTION_ROLES, electionRoles: response.data.data });
        return response.data.data;
    }, function (error) {
        console.log(error);
    });
}

export function loadElectionRolesBudget(dispatch, cityKey = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/roles/budget',
        method: 'get',
        params: { city_key: cityKey }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ELECTION_ROLES_BUDGET, electionRolesBudget: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

// Need to Add in api!!
export function loadRoleCityDefalutBudget(dispatch, cityKey) {
    return; 
    Axios({
        url: window.Laravel.baseURL + 'api/elections/budget/city_expected_budget',
        method: 'get',
        params: { city_key: cityKey }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_CITY_ELECTION_ROLES_BUDGET, electionRolesCityBudget: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadElectionRolesShifts(dispatch) {
 return   Axios({
        url: window.Laravel.baseURL + 'api/elections/roles/shifts',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ELECTION_ROLES_SHIFTS, electionRolesShifts: response.data.data });
        return response.data.data
    }, function (error) {
        console.log(error);
    });
}


export function addElectionRole(dispatch, router, voterKey, roleKey, allocationObj, searchObj, continueAllocation = false) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG, flag: false });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + voterKey + '/roles/' + roleKey,
        method: 'post',
        data: allocationObj
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG, flag: true });

        if (continueAllocation) {
            router.push('elections/activists/' + voterKey);
        } else {
            searchElectionsActivists(dispatch, searchObj);
        }
    }, function (error) {
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({
                        type: ActionTypes.ACTIVIST.MODAL_UPDATE_ALLOCATION.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY,
                        displayError: true, errorMessage: errors[errorCode]
                    });
                }

                dispatch({ type: ActionTypes.ACTIVIST.SHOW_ADD_ALLOCATION_MODAL });
            }
        }
    });
}
export function bindRoleAndShiftToActivist(dispatch, voterKey, allocationObj, sourceScreen) {
    console.log('voterKey, allocationObj, sourceScreen', voterKey, allocationObj, sourceScreen);
    let urlPath = 'api/elections/management/city_view/' + allocationObj.assigned_city_key + '/activists/' + voterKey + '/roles'
    if(sourceScreen == 'activists'){
        urlPath = `api/elections/activists/city/${allocationObj.assigned_city_key}/${voterKey}/roles`
    } else if (sourceScreen == 'drivers'){
        //Need to defined!!! 
        // urlPath = 'api/elections/transportation/' + cityKey + '/drivers/' + voterKey 
    }
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    return Axios({
        url: window.Laravel.baseURL + urlPath,
        method: 'post',
        data: allocationObj
    }).then(function (response) {

        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });

    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });
}
export function editElectionRoleDetails(dispatch, roleKey, editObj, clusterIndex = null, sourceScreen = null) {

    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/activists/' + roleKey ,
        method: 'put',
        data: editObj
    }).then(function (response) {
        if(sourceScreen != 'city_view'){
            dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.EDIT_ACTIVIST_ROLE_DETAILS, roleKey, editObj, clusterIndex });
        } 
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
    }, function (error) {
        displayErrorMessage(error, dispatch)
    });
}
export function editElectionRoleShiftDetails(dispatch, shiftKey, editObj, clusterIndex = null, sourceScreen = null) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/activists/geo/' + shiftKey,
        method: 'put',
        data: editObj
    }).then(function (response) {
        if(sourceScreen != 'city_view'){
            dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.EDIT_ACTIVIST_ROLE_DETAILS, shiftKey, editObj, clusterIndex, 'actionType': 'editShift' });
        } 
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
    }, function (error) {
        dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        displayErrorMessage(error, dispatch)
    });
}

//TODO remove after finish arrange update activist
// export function editElectionRoleShiftDetailsFromBallotAllocation(dispatch, shiftKey, roleIndex, editObj) {
//     dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
//     Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/geo/' + shiftKey,
//         method: 'put',
//         data: editObj
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.ACTIVIST.EDIT_DETAILS_ACTIVIST_SHIFT_IN_BALLOT, shiftKey, roleIndex, editObj });
//         dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
//     }, function (error) {
//         dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
//         displayErrorMessage(error, dispatch)
//     });
// }
//TODO remove after finish arrange update activist
// export function editNotCheckLocation(dispatch, shiftKey, roleIndex, editObj) {
//     dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
//     Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/geo/check-location/' + shiftKey,
//         method: 'put',
//         data: editObj
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.ACTIVIST.EDIT_DETAILS_ACTIVIST_SHIFT_IN_BALLOT, shiftKey, roleIndex, editObj });
//         dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
//     }, function (error) {
//         dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
//         displayErrorMessage(error, dispatch)
//     });
// }
/**
 * @function editVoterBankDetails
 * @param {store} dispatch 
 * @param {string} voterKey - voter key
 * @param {Object} editObj - form Bank details.
 * @param {string} parentScreen -Which screen had dispatch the function.
 * Define: 1. the server url path, 2. and the action in response.
 * @param {array} bankDetails - the bank details array.
 * The details to change after response from server.
 * @returns void
 */
export function editVoterBankDetails(dispatch, voterKey, editObj, parentScreen, bankDetails ) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_SAVED_ROLE_DETAILS_FLAG });
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    let url_path = (parentScreen == 'activists') ? 'activists/voters' : 'voters';
    editObj.screen_permissions = parentScreen;
    return Axios({
        url: window.Laravel.baseURL + `api/elections/${url_path}/bank-details/${voterKey}`,
        method: 'put',
        data: editObj
    }).then(function (response) {
        let data = response.data.data;
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'voter_bank_details' });
        if(parentScreen != 'activists'){
             dispatch({ type: VoterActions.ActionTypes.VOTER.VOTER_UPDATE_BANK_DETAILS, bankDetailsData : data, bankDetails });
        }

        return data;

    }, function (error) {
        dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        displayErrorMessage(error, dispatch)
    });
}
// Valid bank details from prev election campaign: 
export function verifyBankValidation(dispatch, voterKey, isBankVerified, parentScreen){
    dispatch({ type: ActionTypes.ACTIVIST.RESET_SAVED_ROLE_DETAILS_FLAG });

    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    let url_path = (parentScreen == 'activists') ? 'activists/voters' : 'voters';

    return Axios({
        url: window.Laravel.baseURL + `api/elections/${url_path}/bank-details/${voterKey}/valid-verification`,
        method: 'put',
        data: {is_bank_verified: isBankVerified, screen_permissions:parentScreen}
    }).then(function (response) {
        let data = response.data.data;
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'voter_bank_details' });

    }, function (error) {
        dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        displayErrorMessage(error, dispatch)
    });
}
//TODO:remove after finish arrange edit activist details
// export function editElectionRole(dispatch, electionRoleByVoterKey, editObj) {
//     dispatch({ type: ActionTypes.ACTIVIST.RESET_SAVED_ROLE_DETAILS_FLAG });
//     dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
//     return Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey,
//         method: 'put',
//         data: editObj
//     }).then(function (response) {
//         let data = response.data.data;
//         dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
//         dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'role_details' });
//         dispatch({ type: ActionTypes.ACTIVIST.EDIT_ACTIVIST_PHONES, voterPhones: data.voter_phones, email: data.email });

//     }, function (error) {
//         dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
//         displayErrorMessage(error, dispatch)
//     });
// }
// Delete election role
// Router is null - city activists screen:.
export function deleteElectionActivistRole(dispatch, router = null, electionRoleByVoterKey, numOfElectionsRoles) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
   
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey,
        method: 'delete'
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        
        if(!router) { return;}
        
        if (numOfElectionsRoles > 1) {
            dispatch({ type: ActionTypes.ACTIVIST.DELETE_ACTIVIST_ROLE, electionRoleByVoterKey });
        } else {
            router.push('elections/activists');
        }
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        console.log(error);
    });
}




//TODO:remove after finish arrange
// export function getVoterActivistRoles(dispatch, router, voterKey) {
//     dispatch({ type: ActionTypes.ACTIVIST.RESET_LOADED_ACTIVIST });

//     return Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/' + voterKey,
//         method: 'get'
//     }).then(function (response) {
//         let activistDetails = response.data.data;
//         if (activistDetails.election_roles_by_voter.length > 0) {
//             dispatch({ type: ActionTypes.ACTIVIST.LOAD_ACTIVIST_DETAILS_AND_ROLES, activistDetails });
//         } else {
//             router.push('elections/activists');
//         }

//     }, function (error) {
//         console.log(error);
//     });
// }

export function getVoterActivistRolesByElectionCampaign(dispatch, router, voterKey,electionCampaignKey) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_LOADED_ACTIVIST });
    let url=window.Laravel.baseURL + 'api/elections/activists/campaign/roles/'+ voterKey
    return Axios({
        url: electionCampaignKey?url+'/'+electionCampaignKey:url,
        method: 'get'
    }).then(function (response) {
        let activistDetails = response.data.data;
        if (activistDetails.election_roles_by_voter.length > 0) {
            
            dispatch({ type: ActionTypes.ACTIVIST.LOAD_ACTIVIST_DETAILS_AND_ROLES, activistDetails });
            //load list details of budget role and shift role budget sum
            loadElectionRolesCampaignBudget(dispatch,electionCampaignKey);

        } else {
            router.push('elections/activists');
        }

    }, function (error) {
        console.log(error);
    });
}

export function addAnotherRoleToActivist(dispatch, router, voterKey, roleKey, allocationObj) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG, flag: true });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + voterKey + '/roles/' + roleKey,
        method: 'post',
        data: allocationObj
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG, flag: false });
        getVoterActivistRoles(dispatch, router, voterKey);
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: ActionTypes.ACTIVIST.SHOW_ADD_ALLOCATION_MODAL });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_ADDED_ALLOCATION_FLAG, flag: false });
    });
}

export function loadClusterBallots(dispatch, clusterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: "get",
        params: { with_roles: true }
    }).then(function (result) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_BALLOTS, ballots: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityClusters(dispatch, cityKey, screenName = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/clusters',
        method: "get"
    }).then(function (result) {
        let actionType = ActionTypes.ACTIVIST.LOAD_CLUSTERS;
        if (screenName == 'transportations') {
            actionType = ActionTypes.TRANSPORTATIONS.LOAD_MODAL_CLUSTERS;
        }
        dispatch({ type: actionType, clusters: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityNeighborhoods(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/neighborhoods',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_NEIGHBORHOODS, neighborhoods: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadActivistCityNeighborhoods(dispatch, cityKey, actionType) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/neighborhoods',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: actionType, neighborhoods: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadActivistCityStreets(dispatch, cityKey, actionType) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/streets',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: actionType, streets: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadActivistCityClusters(dispatch, cityKey, actionType) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/clusters',
        method: "get"
    }).then(function (result) {
        dispatch({ type: actionType, clusters: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadActivistClusterBallots(dispatch, clusterKey, actionType, withRoles) { 
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: "get",
        params: { with_roles: withRoles }
    }).then(function (result) {
        dispatch({ type: actionType, ballots: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadActivistCityBallots(dispatch, cityKey, actionType) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/ballots',
        method: "get"
    }).then(function (result) {
        dispatch({ type: actionType, ballots: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityClustersForBallotsPolling(dispatch, cityKey , multipleCitiesKey=null) {
	let params = {};
	if(multipleCitiesKey){
		params.cities_keys = multipleCitiesKey
	}
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/clusters',
        method: "get",
		params
    }).then(function (result) {
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_CITY_CLUSTERS, clusters: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityNeighborhoodsForBallotsPolling(dispatch, cityKey, multipleCitiesKey=null) {
	let params = {};
	if(multipleCitiesKey){
		params.cities_keys = multipleCitiesKey
	}
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/neighborhoods',
        method: 'get',
		params
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_CITY_NEIGHBORHOODS, neighborhoods: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function clustersSearch(dispatch, electionRoleByVoterKey, searchObj) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_CLUSTERS_FLAG, flag: true });
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_CLUSTERS_FLAG, flag: false });
    dispatch({ type: ActionTypes.ACTIVIST.RESET_CLUSTER_SEARCH });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey + '/clusters',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            neighborhood_id: searchObj.neighborhood_id,
            cluster_id: searchObj.cluster_id,

            assignment_status: searchObj.assignment_status
        }
    }).then(function (response) {
        dispatch({
            type: ActionTypes.ACTIVIST.LOAD_CLUSTERS_SERACH_RESULT, clustersSearchResult: response.data.data.clusters,
            totalClusters: response.data.data.totalClusters, clustersSearchFields: searchObj
        });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_CLUSTERS_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_CLUSTERS_FLAG, flag: true });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_CLUSTERS_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_CLUSTERS_FLAG, flag: true });
    });
}

export function driversClustersSearch(dispatch, electionRoleByVoterKey, searchObj) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_DRIVERS_CLUSTERS_FLAG, flag: true});
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_DRIVERS_CLUSTERS_FLAG, flag: false});
    dispatch({ type: ActionTypes.ACTIVIST.RESET_DRIVERS_CLUSTER_SEARCH });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey + '/clusters',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            neighborhood_id: searchObj.neighborhood_id,
            cluster_id: searchObj.cluster_id,

            assignment_status: searchObj.assignment_status
        }
    }).then(function (response) {
        dispatch({
            type: ActionTypes.ACTIVIST.LOAD_DRIVERS_CLUSTERS_SERACH_RESULT, clustersSearchResult: response.data.data.clusters,
            totalClusters: response.data.data.totalClusters, clustersSearchFields: searchObj
        });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_DRIVERS_CLUSTERS_FLAG, flag: false});
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_DRIVERS_CLUSTERS_FLAG, flag: true});
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_DRIVERS_CLUSTERS_FLAG, flag: false});
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_DRIVERS_CLUSTERS_FLAG, flag: true});
    });
}

export function updateClusterLeader(dispatch, clusterKey, voterKey) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_FLAG });

    Axios({
        method: 'put',
        url: window.Laravel.baseURL + 'api/elections/activists/clusters/' + clusterKey + '/voters/' + voterKey,
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.ACTIVIST.MAKE_ACTIVIST_A_CLUSTER_LEADER, clusterDetails: response.data.data });
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });
}

export function updateClusterGoogleMap(dispatch, cluster_id, cancel_google_map) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        method: 'put',
        data: {
            cluster_id: cluster_id,
            cancel_google_map:cancel_google_map?1:0
        },
        url: window.Laravel.baseURL + 'api/system/clusters/update-cancel-google-map',
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_CLUSTER_GOOGLE_MAP,cancel_google_map});
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
       
    });
}

// export function deleteClusterLeader(dispatch, clusterKey) {

//     dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_FLAG });

//     Axios({
//         url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey,
//         method: 'delete'
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.ACTIVIST.DELETE_CLUSTER_ASSIGNMENT, clusterId: response.data.data });
//     }, function (error) {
//         console.log(error);
//     });
// }

export function addGeoClusterToActivistRole(dispatch, electionRoleByVoterKey, clusterKey, electionRoleId) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_FLAG });
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey + '/clusters/' + clusterKey,
        method: 'post'
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        dispatch({ type: ActionTypes.ACTIVIST.ADD_GEO_CLUSTER_TO_ACTIVIST_ROLE, geoDetails: response.data.data, electionRoleId });
    }, function (error) {
         dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
         displayErrorMessage(error, dispatch)
    });
}

//TODO:remove after finish arrange update activist
// export function deleteActivistRoleGeo(dispatch, electionRoleByVoterGeographicAreasKey, electionRoleId) {
//     dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_FLAG });
//     dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_BALLOT_FLAG });

//     Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/geo/' + electionRoleByVoterGeographicAreasKey,
//         method: 'delete'
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.ACTIVIST.DELETE_ACTIVIST_ROLE_GEO, electionRoleByVoterGeographicAreasKey, electionRoleId });
//     }, function (error) {
//         displayErrorMessage(error, dispatch)
//     });
// }

export function addClustersToDriver(dispatch, electionRoleByVoterKey, driverClusters, electionRoleId) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_DRIVER_CLUSTER_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey + '/driver',
        method: 'post',
        data: {
            driver_clusters: driverClusters
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.ADD_CLUSTERS_TO_DRIVER, geoClusters: response.data.data, electionRoleId });
    }, function (error) {
        displayErrorMessage(error, dispatch)
        console.log(error);
    });
}

// export function deleteDriverCluster(dispatch, electionRoleByVoterGeographicAreasKey, electionRoleId) {
//     dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_DRIVER_CLUSTER_FLAG });

//     Axios({
//         url: window.Laravel.baseURL + 'api/elections/activists/geo/' + electionRoleByVoterGeographicAreasKey + '/clusters/driver',
//         method: 'delete'
//     }).then(function (response) {
//         dispatch({ type: ActionTypes.ACTIVIST.DELETE_DRIVER_CLUSTER, electionRoleByVoterGeographicAreasKey, electionRoleId });
//     }, function (error) {
//         displayErrorMessage(error, dispatch)
//         dispatch({ type: ActionTypes.ACTIVIST.SHOW_DELETE_DRIVER_CLUSTER_ERROR_MODAL, electionRoleByVoterGeographicAreasKey, electionRoleId });
//     });
// }

export function loadBallotBoxRoles(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/ballots/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_BALLOT_ROLES, ballotRoles: response.data.data });
    }, function (error) {
        console.log(error);
    });
}



//TODO remove and change to ActivistAllocationAssignmentAction.searchVoterActivist 
/* city management actions: */
export function searchForVoterActivist(dispatch, searchObj, cityKey, page = 'city_view') {
    let urlPath = (page == 'transportation') ? 'transportation/' : 'management/city_view/' ;
    Axios({
        url: window.Laravel.baseURL + 'api/elections/' + urlPath + cityKey + '/voter/search',
        method: 'get',
        params: searchObj
    }).then(function (response) {
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.ADD_ALLOCATION_MODAL.SET_ACTIVIST_ITEM, activistItem: response.data.data })
    }, function (error) {
        displayErrorMessage(error, dispatch)
    });
}

export function addRoleAndShiftToActivist(dispatch, voterKey, allocationObj, requestData) {
    
   return AllocationAndAssignmentActions.addActivistAssignment(dispatch,allocationObj,requestData.cityKey,voterKey).then((response)=>{
        if(response){
            getAddRoleAndShiftToActivistResult(dispatch, response, requestData);
        }
    })
}

// Get add role and shift result from server:
function getAddRoleAndShiftToActivistResult(dispatch, response, requestData){
    let isBallotRole = response.data.data.activistCreateDto.shiftRole?true:false;

    if(!requestData.currentCluster) {return;} //!! Need to fix it out

    let currentCluster = requestData.currentCluster;
    if (isBallotRole) { // Is ballot election role
        let clusterIndex = requestData.clusterIndex;
        let ballotBoxesIds = [];
        // Ballots need to load:
        for (let k = 0; k < currentCluster.ballot_boxes.length; k++) {
            ballotBoxesIds.push(currentCluster.ballot_boxes[k].id);
        }
        loadClustersBallotsExtendedData(dispatch, requestData.cityKey, ballotBoxesIds, clusterIndex);
    } else {
        loadClusterActivistRoles(dispatch, requestData.cityKey, currentCluster.key)
    }

}
export function changeRoleToBallotBox(dispatch, ballotBoxKey, ballotBoxRoleKey) {

    return Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/city_summary/ballots/' + ballotBoxKey + '/roles/' + ballotBoxRoleKey,
        method: 'put'
    }).catch(function (error) {
        displayErrorMessage(error, dispatch)
    });
}

/* End city summary actions: */
export function loadClusterBallotBoxes(dispatch, clusterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_BALLOTS, ballots: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadClusterBallotBoxesForBallotsPolling(dispatch, clusterKey ,multipleClustersKey ) { 
    let params = {};
	if(multipleClustersKey){
		params.clusters_keys = multipleClustersKey
	}
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: 'get',
		params
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_CLUSTER_BALLOTS, ballots: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function ballotsSearch(dispatch, electionRolesKey, electionRoleSystemName, searchObj, withBallotRoles = 0) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_BALLOTS_FLAG, electionRoleSystemName, loadingBallots: true });
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_BALLOTS_FLAG, electionRoleSystemName, loadedBallots: false });
    dispatch({ type: ActionTypes.ACTIVIST.RESET_BALLOT_SEARCH, electionRoleSystemName });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/roles/' + electionRolesKey + '/ballots',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            neighborhood_id: searchObj.neighborhood_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            ballot_role_id: searchObj.ballot_role_id,
			with_ballot_roles:withBallotRoles,
            assignment_status: searchObj.assignment_status
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_BALLOTS_FLAG, electionRoleSystemName, loadingBallots: false });
        dispatch({
            type: ActionTypes.ACTIVIST.LOAD_BALLOTS_SERACH_RESULT, ballots: response.data.data.ballots,
            totalBallots: response.data.data.totalBallots, ballotsSearchFields: searchObj, electionRoleSystemName
        });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_BALLOTS_FLAG, electionRoleSystemName, loadedBallots: true });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_BALLOTS_FLAG, electionRoleSystemName, loadingBallots: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_BALLOTS_FLAG, electionRoleSystemName, loadedBallots: true });
    });
}

export function loadMoreBallots(dispatch, electionRolesKey, electionRoleSystemName, searchObj, currentPage , withBallotRoles = 0) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/roles/' + electionRolesKey + '/ballots',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            ballot_role_id: searchObj.ballot_role_id,

            assignment_status: searchObj.assignment_status,
			with_ballot_roles: withBallotRoles,
            current_page: currentPage
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_MORE_BALLOTS, ballots: response.data.data.ballots, electionRoleSystemName });
    }, function (error) {
        console.log(error);
    });
}

export function addGeoBallotToActivistRole(dispatch, electionRoleByVoterKey, ballotKey, shiftRoleKey, electionRoleId, searchObj, currentTabRoleSystemName) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_BALLOT_FLAG });

    let url = window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey;
    url += '/ballots/' + ballotKey + '/shifts/' + shiftRoleKey;

    Axios({
        url: url,
        method: 'post'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.ADD_GEO_BALLOT_TO_ACTIVIST_ROLE, assignmentDetails: response.data.data, electionRoleId });
        ballotsSearch(dispatch, searchObj.searchElectionRoleKey, currentTabRoleSystemName, searchObj,1);

    }, function (error) {
        displayErrorMessage(error, dispatch);
    });
}

export function editBallotActivistShift(dispatch, electionRoleByVoterGeographicAreasKey,shiftKey,electionRoleId,electionRoleKey,detailsShift){
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_ROLE_BALLOT_FLAG });
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

   return Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/geo/' + electionRoleByVoterGeographicAreasKey + '/shifts/' + shiftKey,
        method: 'put'
    }).then(function (response) {
        if(!detailsShift)
        dispatch({
            type: ActionTypes.ACTIVIST.EDIT_ACTIVIST_SHIFT_IN_BALLOT, geoDetails: response.data.data, electionRoleId,
            electionRoleByVoterGeographicAreasKey
        });

        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
    }, function (error) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        displayErrorMessage(error, dispatch)
    });
}

export function loadCityStreets(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/streets',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_STREETS, streets: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCaptain50ModalCityClusters(dispatch, cityKey) {
    dispatch({ type: ActionTypes.CAPTAIN50_SEARCH.RESET_MINISTER50_SEARCH_CLUSTERS});

    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/cities/' + cityKey + '/clusters',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.CAPTAIN50_SEARCH.LOAD_MINISTER50_SEARCH_CLUSTERS, clusters: result.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function captain50Search(dispatch, searchObj) {
    dispatch({type: ActionTypes.CAPTAIN50_SEARCH.RESET_MINISTER50_SEARCH_RESULT});

    dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADING_CAPTAIN50S_FLAG, flag: true});
    dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADED_CAPTAIN50S_FLAG, flag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/captain50',
        method: "get",
        params: {
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,

            first_name: searchObj.first_name,
            last_name: searchObj.last_name,
            personal_identity: searchObj.personal_identity
        }
    }).then(function (result) {
        dispatch({
            type: ActionTypes.CAPTAIN50_SEARCH.LOAD_MINISTER50_SEARCH_RESULT, captainsOf50: result.data.data.captains,
            totalCaptains50: result.data.data.totalCaptains
        });

        dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADING_CAPTAIN50S_FLAG, flag: false});
        dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADED_CAPTAIN50S_FLAG, flag: true});
    }, function (error) {
        dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADING_CAPTAIN50S_FLAG, flag: false});
        dispatch({type: ActionTypes.CAPTAIN50_SEARCH.CHANGE_LOADED_CAPTAIN50S_FLAG, flag: true});
    });
}

export function householdSearch(dispatch, searchObj, filterItems = null) {
    householdSearchSource = householdSearchCancelToken.source();

    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_HOUSEHOLD_FLAG, flag: false });
    dispatch({ type: ActionTypes.ACTIVIST.LOADING_HOUSEHOLD_SEARCH_FLAG, flag: true });
    dispatch({ type: ActionTypes.ACTIVIST.RESET_HOUSEHOLD_SEARCH_RESULT });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/households',
        method: "get",
        params: {
            area_id: searchObj.area_id,
            city_id: searchObj.city_id,
            street_id: searchObj.street_id,
            street_name: searchObj.street_name,
            neighborhood_id: searchObj.neighborhood_id,
            neighborhood_name: searchObj.neighborhood_name,

            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            captain_id: searchObj.captain_id,

            last_name: searchObj.last_name,

            allocated_to_captain50: searchObj.allocated_to_captain50,
            with_no_households: searchObj.with_no_households,

            filter_items: filterItems
        },
        cancelToken: householdSearchSource.token
    }).then(function (result) {
        dispatch({
            type: ActionTypes.ACTIVIST.LOAD_HOUSEHOLD_SEARCH_RESULT, households: result.data.data.households,
            totalHouseholds: result.data.data.totalHouseholds, searchObj
        });
        dispatch({ type: ActionTypes.ACTIVIST.LOADING_HOUSEHOLD_SEARCH_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_HOUSEHOLD_FLAG, flag: true });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.LOADING_HOUSEHOLD_SEARCH_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_HOUSEHOLD_FLAG, flag: true });
    });
}

export function cancelHouseholdSearch(dispatch) {
    householdSearchSource.cancel('Operation canceled by the user, cancelHouseholdSearch.');
    dispatch({ type: ActionTypes.ACTIVIST.LOADING_HOUSEHOLD_SEARCH_FLAG, flag: false });
}

export function loadMoreHouseholds(dispatch, searchObj, currentPage, filterItems = null) {
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_MORE_HOUSEHOLDS_FLAG, flag: true });
    dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_MORE_HOUSEHOLDS_FLAG, flag: false });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/households',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            city_id: searchObj.city_id,
            street_id: searchObj.street_id,
            street_name: searchObj.street_name,
            neighborhood_id: searchObj.neighborhood_id,
            neighborhood_name: searchObj.neighborhood_name,

            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            captain_id: searchObj.captain_id,

            last_name: searchObj.last_name,

            allocated_to_captain50: searchObj.allocated_to_captain50,

            filter_items: filterItems,

            current_page: currentPage
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_MORE_HOUSEHOLDS, households: response.data.data.households });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_MORE_HOUSEHOLDS_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_MORE_HOUSEHOLDS_FLAG, flag: true });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADING_MORE_HOUSEHOLDS_FLAG, flag: false });
        dispatch({ type: ActionTypes.ACTIVIST.CHANGE_LOADED_MORE_HOUSEHOLDS_FLAG, flag: true });
    });
}
export function addBallotHouseholdsToCaptain50(dispatch, captainKey, ballotKey){
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_CAPTAIN50_HOUSEHOLDS_FLAG });
    dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: true });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/captain50/' + captainKey + '/ballot/' + ballotKey,
        method: 'post',
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.ADD_HOUSEHOLDS_TO_CAPTAIN_50, households: response.data.data });

        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    });
}
export function addHouseholdsToCaptain50(dispatch, captainKey, households, voterKeys, getOnlyVoters) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_CAPTAIN50_HOUSEHOLDS_FLAG });
    dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: true });
    let data = { households: households}
    if(getOnlyVoters){
        data.with_no_households = getOnlyVoters;
        data.voters_keys = voterKeys;
    }
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/captain50/' + captainKey ,
        method: 'post',
        data: data
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.ADD_HOUSEHOLDS_TO_CAPTAIN_50, households: response.data.data });

        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    });
}

export function deleteHouseholdsOfCaptain50(dispatch, captainKey, households) {
    dispatch({ type: ActionTypes.ACTIVIST.RESET_EDIT_CAPTAIN50_HOUSEHOLDS_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/captain50/' + captainKey,
        method: 'delete',
        data: {
            households: households
        }
    }).then(function (response) {
        let householdsdHash = {};

        for (let householdIndex = 0; householdIndex < households.length; householdIndex++) {
            let householdKey = 'household_' + households[householdIndex];

            householdsdHash[householdKey] = 1;
        }

        dispatch({ type: ActionTypes.ACTIVIST.DELETE_HOUSEHOLDS_OF_CAPTAIN50, householdsdHash });

        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    }, function (error) {
        dispatch({ type: ActionTypes.ACTIVIST.UPDATE_EDITING_CAPTAIN50_HOUSEHOLDS_FLAG, editingCaptainHouseholdsFlag: false });
    });
}

export function sendMessageToActivist(dispatch, electionRoleByVoterKey, currentUser) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/activists/' + electionRoleByVoterKey + '/message',
        method: 'post'
    }).then(function (response) {
        dispatch({
            type: ActionTypes.ACTIVIST.ADD_MESSAGE_TO_ACTIVIST, message: response.data.data.message, electionRoleByVoterKey,
            currentUser, updated_at: response.data.data.updated_at.date
        });
    }, function (error) {
        console.log(error);
    });
}

export function changeLockStatus(dispatch, electionRoleByVoterId,isLock, currentUser, parentKey = null) {
    debugger
    var updateActivist=new ActivistUpdateDto();
    updateActivist.electionRoleByVoterId=electionRoleByVoterId
    updateActivist.isActivistRoleLock=isLock?1:0;
    var date=DateActionHelper.myStringDate();
    updateActivistDto(dispatch,updateActivist).then(function(response){
        if(!parentKey){
            dispatch({
                type: ActionTypes.ACTIVIST.CHANGE_ACTIVIST_ALLOCATION_LOCK, electionRoleByVoterId, currentUser,
                updated_at:date,isLock
            });
        } else {
            dispatch({
                type: ActionTypes.ACTIVIST.CHANGE_ACTIVIST_ALLOCATION_BONUS_LOCK, parentKey, currentUser,
                updated_at: date
            });
        }
    })
}

/*
Load cluster activist roles (4 types)
*/
export function loadClusterActivistRoles(dispatch, cityKey, clusterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/management/city_view/' + cityKey + '/neighborhoods_and_clusters/' + clusterKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_CLUSTER_ACTIVISTS_AND_VOTES_DATA, data: response.data.data });

    }, function (error) {

    }
    );
}
/*
    Load City activists Entity summary data.
*/
export function loadEntityActivistsSummary(dispatch, entityType, entityId, getCityClusters = false) {
    return Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/activists/summary/${entityType}/${entityId}`,
        method: 'get',
        params: { get_city_cluster: getCityClusters ? 1 : 0}
    }).then(function (response) {    
        let isQuarterType = (entityType == constants.geographicEntityTypes.quarter)
        if(!getCityClusters && !isQuarterType){
            dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_ENTITY_ACTIVISTS_SUMMARY, data: response.data.data, entityType, entityId });
        } else {
            if(isQuarterType){
                dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_ENTITY_ACTIVISTS_SUMMARY, data: response.data.data, entityType, entityId });
            }
            dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_ENTITY_CLUSTERS_ACTIVISTS_SUMMARY, data: response.data.data, entityType, entityId });
        }

    }, function (error) {
        displayErrorMessage(error, dispatch);

    });
}
/*
    Load city municipal role activists summary data
*/
export function loadMunicipalRoleActivistsSummary(dispatch, currentRoleId) {
    Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/activists/election-role/summary/${currentRoleId}`,
        method: 'get',
    }).then(function (response) {
        console.log('loadMunicipalRoleActivistsSummary', response.data.data);
        let data = response.data.data;
        let entityType = data['entity_type'];
        let entityId = data['current_entity']['id'];
        let currentEntity = data['current_entity'];
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_ENTITY_ACTIVISTS_SUMMARY, data: response.data.data, entityType, entityId });
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.SET_CITY_ELECTION_ROLE_ACTIVIST_GEO_DATA, entityType, currentEntity });

    }, function (error) {
        displayErrorMessage(error, dispatch);

    });
}
/*
    Load city municipal directors data.
*/
export function loadCityMunicipalCoordinators(dispatch, cityKey) {
    return Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/${cityKey}/activists/municipal-coordinators`,
        method: 'get'
    }).then(function (response) {
        // console.log('municipalCoordinators', response.data.data)
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_MUNICIPAL_ACTIVISTS_COORDINATORS, data: response.data.data });
        
    }, function (error) {

    });
}
/*
    Load city municipal directors data.
*/
export function loadCityClustersByQuarters(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/${cityKey}/clusters`,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_CITY_ACTIVISTS_CLUSTERS, data: response.data.data });
    }, function (error) {

    });
}
/*
    Load city municipal directors data.
*/
//TODO::remove after finish arrange allocation
export function loadCityClustersAvailableAllocations(dispatch, cityKey, election_role_id) {
    Axios({
        url: window.Laravel.baseURL + `api/elections/activists/city/${cityKey}/allocations/available-clusters`,
        method: 'get',
        params: {election_role_id}
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.MODAL_UPDATE_ALLOCATION.LOADED_AVAILABLE_CLUSTERS_ALLOCATIONS, data: response.data.data });
    }, function (error) {

    });
}
/*
/*
    Load city municipal directors data.
*/
//TODO::remove after finish arrange allocation
export function loadCityBallotsAvailableAllocations(dispatch, cityKey, election_role_id) {
    Axios({
        url: window.Laravel.baseURL + `api/elections/activists/city/${cityKey}/allocations/available-ballots`,
        method: 'get',
        params: {election_role_id}
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.MODAL_UPDATE_ALLOCATION.LOADED_AVAILABLE_BALLOTS_ALLOCATIONS, data: response.data.data });
    }, function (error) {

    });
}
/*
    Load city municipal directors data.
*/
// export function loadCityQuarters(dispatch, cityKey, cityId) {
//     Axios({
//         url: window.Laravel.baseURL + `api/elections/management/city_view/${cityKey}/quarters`,
//         method: 'get'
//     }).then(function (response) {
//         console.log('LOADED_CITY_QUARTERS', response.data.data)
//         dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_CITY_QUARTERS, data: response.data.data });

//     }, function (error) {

//     });
// }
/************************ Quarters actions: */

/**
 * @function saveCityQuarter
 * 1. Update city quarter data. 
 * Or
 * 2. add new quarter to city.
 * -> quarter name
 * -> quarter clusters
 */
export function saveCityQuarter(dispatch, cityKey, quarterData, quarterId = null) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

    let method = (quarterId == null) ? 'post' : 'put';
    let path=`api/elections/management/city_view/${cityKey}/quarters`;
    if(quarterId)
    path=`api/elections/management/city_view/quarters/`+quarterId;
    

    return Axios({
        url: window.Laravel.baseURL + path,
        method: method  ,
        data: quarterData
    }).then(function (response) {
        loadCityClustersByQuarters(dispatch , cityKey);
        loadCityBallotsFullData(dispatch , cityKey);
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });   
}


/**
 * @function deleteCityQuarter
 */
 export function deleteCityQuarter(dispatch,quarterId) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    return Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/quarters/`  + quarterId,
        method: 'delete'  
    }).then(function (response) {
        //  loadCityClustersByQuarters(dispatch , cityKey);
        //  loadCityBallotsFullData(dispatch , cityKey);
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        return true;
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });   
}

export function loadActivistQuarters(dispatch,quarterId){

    return Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/quarter/`  + quarterId+'/activists',
        method: 'get'  
    }).then(function (response) {
        return response.data.data;
    }, function (error) {
        displayErrorMessage(error, dispatch)
      
    });  
}

/************************ Cluster Activists actions: */

/**
 * @function loadClustersActivists
 * Get cluster activists
 */
export function loadClustersActivists(dispatch, clusterId) {
    dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_CLUSTER_ACTIVIST, data: [] });

    Axios({
        url: window.Laravel.baseURL + `api/elections/management/city_view/clusters/activists/${clusterId}`  ,
        method: 'get'  ,
    }).then(function (response) {
        dispatch({ type: ActionTypes.MANAGEMENT_CITY_VIEW.LOADED_CLUSTER_ACTIVIST, data: response.data.data });

        // loadCityClustersByQuarters(dispatch , cityKey);
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });   
}

/*
Get clusters minimal data by city key

@param dispatch
@param cityKey
*/
export function getClustersOnlyByCity(dispatch, cityKey, module = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/' + cityKey + '/clusters',
        method: 'get',

    }).then(function (response) {
        let actionName = (module === 'electionDay') ? ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE : ActionTypes.REPORTS.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE;
        dispatch({ type: actionName, fieldName: 'clusters', fieldValue: response.data.data })
    }, function (error) {

    }
    );

}


/*
Search for captain50 voters by parameters :

@param dispatch
@param params - search params - city_key/cluster_key/personal_identity/first_name/last_name
*/
export function searchCaptains50VotersByParams(dispatch, params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/activist',
        method: 'get',
        params
    }).then(function (response) {

        dispatch({ type: ActionTypes.REPORTS.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE, fieldName: 'foundVoters', fieldValue: response.data.data })
    }, function (error) {
		
    }
    );

}

/*
Search for captain50 voters by personal_identity number only :

@param dispatch
@param personal_identity
*/
export function searchCap50VoterById(dispatch, personalIdentity) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/activist',
        method: 'get',
        params: { personal_identity: personalIdentity }
    }).then(function (response) {
        if (response.data.data.length == 1) {
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ministerID', fieldValue: response.data.data[0].personal_identity });
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ministerFirstName', fieldValue: response.data.data[0].first_name });
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ministerLastName', fieldValue: response.data.data[0].last_name });
        }
        else {
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ministerFirstName', fieldValue: '' });
            dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ministerLastName', fieldValue: '' });
            dispatch({ type: ActionTypes.REPORTS.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: true, modalHeader: 'שגיאה', modalContent: 'לא נמצאו תוצאות' });
        }
    }, function (error) {
			let response = error.response || false;
			if (response) {
				let data = response.data || false;
				if (data) {
					let errorCode = data.error_code || false;
					if (errorCode) {
						dispatch({ type: ActionTypes.REPORTS.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: true, modalHeader: 'שגיאה', modalContent: errors[errorCode] });
					}
				}
			}
	}
    );
}

/*
Get clusters minimal data by city key. can get screenName that will indicate to reducer which screen to change

@param dispatch
@param cityKey
*/
export function getClustersNeighborhoodsBallotsByCity(dispatch, cityKey, screenName = null) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/cities/' + cityKey,
        method: 'get',

    }).then(function (response) {
        switch (screenName) {
            case 'electionDayWalkerReport':
                dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'clusters', fieldValue: response.data.data.clusters });
                dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'neighborhoods', fieldValue: response.data.data.neighborhoods });
                dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ballotBoxes', fieldValue: response.data.data.ballotBoxes });
                break
            case 'captain50walkerReport':
                dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'clusters', fieldValue: response.data.data.clusters });
                dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'neighborhoods', fieldValue: response.data.data.neighborhoods });
                dispatch({ type: ActionTypes.REPORTS.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ballotBoxes', fieldValue: response.data.data.ballotBoxes });
                break
            case 'captainScreen':
                dispatch({ type: ActionTypes.REPORTS.CAPTAIN.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'neighborhoods', fieldValue: response.data.data.neighborhoods });
                break
            case 'GeneralWalkerReport':
            dispatch({ type: ActionTypes.REPORTS.WALKERS.GENERAL_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'clusters', fieldValue: response.data.data.clusters });
            dispatch({ type: ActionTypes.REPORTS.WALKERS.GENERAL_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'ballotBoxes', fieldValue: response.data.data.ballotBoxes });
                break
        }

    }, function (error) {

    }
    );

}


export function loadCap50ReportResults(dispatch, reportRequestData, withEditingOption, showCurrentBranchStatus, showPreviousBranchStatus, isNewSearch) {
    
	dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'loadingSearchResults', fieldValue: true });
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers',
        method: 'get',
        params: reportRequestData

    }).then(function (response) {

        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'regularFiltersSearchQuery', fieldValue: reportRequestData.regular_search_filters });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'displayWithEditOption', fieldValue: withEditingOption });
        dispatch({ type: ActionTypes.REPORTS.LOADED_CAP50_WALKER_SEARCH_RESULTS, data: response.data.data, isNewSearch:isNewSearch });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'loadingSearchResults', fieldValue: false });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'showCurrentSupportStatus', fieldValue: showCurrentBranchStatus });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'showPreviousSupportStatus', fieldValue: showPreviousBranchStatus });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'isEditingVoter', fieldValue: false })
        //console.log(response.data.data);
    }, function (error) {

    }
    );

    /*
	dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: true });
    generalReportSource = generalReportCancelToken.source();
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers',
        method: 'get',
        params: reportRequestData

    }).then(function (response) {

        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'regularFiltersSearchQuery', fieldValue: reportRequestData.regular_search_filters });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'displayWithEditOption', fieldValue: withEditingOption });
        dispatch({ type: ActionTypes.REPORTS.LOADED_CAP50_WALKER_SEARCH_RESULTS, data: response.data.data });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'loadingSearchResults', fieldValue: false });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'showCurrentSupportStatus', fieldValue: showCurrentBranchStatus });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'showPreviousSupportStatus', fieldValue: showPreviousBranchStatus });
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'isEditingVoter', fieldValue: false })
        //console.log(response.data.data);
    }, function (error) {

    }
    );

    /*
	dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: true });
    generalReportSource = generalReportCancelToken.source();
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/general',
        method: 'get',
        params: reportRequestData,
        cancelToken: generalReportSource.token
    }).then(
        result => {
            dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
            dispatch({ type: ActionTypes.REPORTS.SET_GENERAL_REPORT_RESULTS, data: result.data.data, reportType: reportRequestData.report_type });
        }, function (error) {
            dispatch({ type: ActionTypes.REPORTS.LOADING_REPORT_RESULTS_STATUS_CHANGED, isLoadingResults: false });
        });
		*/
}
/*
    load  captain-50 ballots : 
*/
export function getCaptainBallots(dispatch, captainKey) {
    dispatch({ type: ActionTypes.REPORTS.REPORTS_SUPPORT_STATUS_FETCH_DATA_END, captain_ballots: [] });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/captain50-ballots/' + captainKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CAPTAIN.DISPLAY_CAPTAIN50_BALLOTS, captain_ballots: response.data.data });
    }, function (error) {

    }
    );
}

/*
load all support statuses for captain-50 walker report : 
*/
export function loadAllSupportStatusesForReport(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/voter/support/statuses',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.REPORTS_SUPPORT_STATUS_FETCH_DATA_END, supportStatuses: response.data.data });
    }, function (error) {

    }
    );
}

/*
load all support statuses for captain-50 walker report : 
*/
export function loadStreetsByCityKey(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/streets',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CHANGE_GLOBAL_REPORT_FIELD_VALUE, fieldName: 'dynamicStreets', fieldValue: response.data.data });

    }, function (error) {
    }
    );
}
/**
 * @method Update voter by key in captain-50 walker report: 
 *  -> save only details:
 * 1. not_at_home
 * 2. support_status
 * @param {string} voterKey 
 * @param {object} data - data object to save 
 * -> {fieldName:value}
 * @param {int} mainArrayIndex - household index in captain index ?
 * @param {int} subArrayIndex  - voter index in household ?
*/
export function updateVoterByKeyInCap50ReportRow(dispatch, voterKey, data, rowIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/captain_of_50_walker_row/' + voterKey,
        method: 'put',
        data
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: true, modalHeader: 'הצלחה', modalContent: 'העדכון בוצע בהצלחה!' });
    }, function (error) {
    console.log(error);
    });
}
/**
 * @method Update voter by key in captain-50 walker report : 
 * 
 * @param {string} voterKey 
 * @param {object} data - data object to save 
 * -> {fieldName:value}
 * @param {int} mainArrayIndex - household index in captain index ?
 * @param {int} subArrayIndex  - voter index in household ?
*/
export function updateVoterByKeyInCap50Report(dispatch, voterKey, data, rowIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/captain_of_50_walker/' + voterKey,
        method: 'put',
        data
    }).then(function (response) {

        dispatch({ type: ActionTypes.REPORTS.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: true, modalHeader: 'הצלחה', modalContent: 'העדכון בוצע בהצלחה!' });
        let specialUpdateObject = {};
        let specialUpdatesCount = 0;
        if (data.household_update_additional_care == '1') {
            specialUpdatesCount++;
            specialUpdateObject.additional_care = data.additional_care;
        }
        if (data.isResetCorrectAddress == true) {
            specialUpdatesCount++;
            specialUpdateObject.actual_address_correct = null;
        }
        if (data.household_update_not_at_home == '1') {
            specialUpdatesCount++;
            specialUpdateObject.not_at_home = data.not_at_home;
        }
        if (data.household_update_actual_address == '1') {
            specialUpdatesCount++;
            specialUpdateObject.city_name = data.city_name;
            specialUpdateObject.street = data.street;
            specialUpdateObject.house = data.house;
            specialUpdateObject.house_entry = data.house_entry;
            specialUpdateObject.flat = data.flat;
            specialUpdateObject.zip = data.zip;
        }
        if (data.household_update_support_status == '1') {
            specialUpdatesCount++;
            specialUpdateObject.support_status_name = data.support_status_name;
        }
        if (data.household_update_contact_info == '1') {
            specialUpdatesCount++;
            if (data.first_phone && data.first_phone.split(' ').join('') != '' && !data.first_phone.startsWith('05')) {
                specialUpdateObject.first_phone = data.first_phone;
            }
            else if (data.second_phone && data.second_phone.split(' ').join('') != '' && !data.second_phone.startsWith('05')) {
                specialUpdateObject.second_phone = data.second_phone;
            }
        }
        if (specialUpdatesCount > 0) {
            dispatch({ type: ActionTypes.REPORTS.COLLECTIVE_HOUSEHOLD_UPDATES, rowIndex, specialUpdateObject });

        }

        let updateObject = {};
        updateObject['household_update_support_status'] = undefined;
        updateObject['household_update_additional_care'] = undefined;
        updateObject['household_update_contact_info'] = undefined;
        updateObject['household_update_actual_address'] = undefined;
        updateObject['household_update_not_at_home'] = undefined;
        dispatch({ type: ActionTypes.REPORTS.REPORT_RESTORE_OLD_VALUES, rowIndex, updateObject });
    }, function (error) {
    }
    );
}

export function loadSupportStatusesForStatusReport(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/support/status',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.STATUSES.LOAD_SUPPORT_STATUSES, supportStatuses: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadSupportStatusesForCaptainActivity(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/support/status',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CAPTAIN.LOAD_SUPPORT_STATUSES, supportStatuses: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadSupportStatusesForBallotsPolling(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/support/status',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_SUPPORT_STATUSES, supportStatuses: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadClusterElectionRoles(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.LOAD_CLUSTER_ELECTION_ROLES, election_roles: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityClustersForClusterActivity(dispatch, cityKey) {
    dispatch({ type: ActionTypes.REPORTS.CLUSTERS.RESET_CITY_CLUSTERS });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist/cities/' + cityKey + '/clusters',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.LOAD_CITY_CLUSTERS, clusters: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityNeighborhoodsForStatusReport(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/neighborhoods',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.STATUSES.LOAD_CITY_NEIGHBORHOODS, neighborhoods: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityClustersForStatusReport(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/clusters',
        method: "get"
    }).then(function (result) {
        dispatch({ type: ActionTypes.REPORTS.STATUSES.LOAD_CITY_CLUSTERS, clusters: result.data.data });
    }, function (error) {
        console.log(error);
    });
}


export function loadClusterBallotBoxesForStatusReport(dispatch, clusterKey) { //good
    Axios({
        url: window.Laravel.baseURL + 'api/system/clusters/' + clusterKey + '/ballots',
        method: 'get',
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.STATUSES.LOAD_CLUSTER_BALLOTS, ballots: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadSearchClusterLeaderClusters(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist/cities/' + cityKey + '/clusters',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.LOAD_MODAL_SEARCH_LEADER_CLUSTERS, clusters: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCampaignsForBallotPolling(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/ballots-summary/last-campaigns',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_ELECTION_CAMPAIGNS, electionCampaigns: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function loadCityNeighborhoodsForClusterActivity(dispatch, cityKey , loadFromLists=true) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/'+(loadFromLists?'lists/':'')+'cities/' + cityKey + '/neighborhoods',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.LOAD_CITY_NEIGHBORHOODS, neighborhoods: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

export function displayCaptain50Activity(dispatch, searchObj) {
    captain50Source = captain50CancelToken.source();

    dispatch({ type: ActionTypes.REPORTS.CAPTAIN.RESET_SUMMARY_RESULT });

    dispatch({ type: ActionTypes.REPORTS.CAPTAIN.SET_LOADING_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/captain50-activity',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            neighborhood_id: searchObj.neighborhood_id
        },
        cancelToken: captain50Source.token
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.CAPTAIN.LOAD_SUMMARY_RESULT, records: response.data.data.records,
            total_records: response.data.data.total_records, row_total_sums: response.data.data.summary, searchObj
        });
        dispatch({ type: ActionTypes.REPORTS.CAPTAIN.SET_LOADED_FIRST_RESULT, data: true });
    }, function (error) {
        console.log(error);
    });
}
/*
Household status change service screen - Get clusters minimal data by city key

@param dispatch
@param cityKey
*/
export function householdStatusClustersNeighborhoodsBallotsByCity(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/cities/' + cityKey,
        method: 'get',
    }).then(function (response) {
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'clusters', fieldValue: response.data.data.clusters });
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'neighborhoods', fieldValue: response.data.data.neighborhoods });
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'ballotBoxes', fieldValue: response.data.data.ballotBoxes });
    }, function (error) {

    }
    );

}


/*
Household status change service screen - load all support statuses : 
*/
export function householdStatusChangeLoadAllSupportStatuses(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/voter/support/statuses',
        method: 'get'
    }).then(function (response) {

        let arrDefinedVoterSupportStatuses = [];
        let arrActualVoterSupportStatuses = [];
        for (let i = 0; i < response.data.data.length; i++) {
            arrDefinedVoterSupportStatuses.push(false);
            arrActualVoterSupportStatuses.push(false);
        }
        arrDefinedVoterSupportStatuses.push(false);
        arrActualVoterSupportStatuses.push(false);

        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'definedVoterSupportStatuses', fieldValue: arrDefinedVoterSupportStatuses });
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'actualVoterSupportStatuses', fieldValue: arrActualVoterSupportStatuses });

        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'supportStatuses', fieldValue: response.data.data });

    }, function (error) {

    }
    );
}

/*
get all user's/admin's jobs list
*/
export function getUsersJobsList(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/household_status_change',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.CHANGE_FIELD_VALUE, fieldName: 'usersJobsList', fieldValue: response.data.data });

    }, function (error) {

    }
    );
}

/*
search for counts stats in household-status-change screen
*/
export function searchForRowsCountsStats(dispatch, data) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/household_status_change/search',
        method: 'get',
        params: data
    }).then(function (response) {
        dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.FINAL_STAGE_UPDATE_STATS_DATA, data: response.data.data });

    }, function (error) {

    }
    );

}

/*
	Do real addition  of household-update-support-status-task via api
*/
export function addNewUpdateHouseholdStatusTask(dispatch, router, data) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/household_status_change',
        method: 'post',
        data
    }).then(function (response) {
        router.push('elections/household_status_change');
        dispatch({
            type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'תהליך העדכון', modalText: 'משימת עדכון סטטוסי תושב לבית אב בתהליך'
        });

        //dispatch({type:ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.FINAL_STAGE_UPDATE_STATS_DATA , data:response.data.data });

    }, function (error) {

    }
    );
}

/*
get update-row information
*/
export function getUpdateRowInfo(dispatch, router, updateKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/household_status_change/' + updateKey,
        method: 'get'
    }).then(function (response) {
        if (response.data.data) {
            dispatch({ type: ActionTypes.HOUSE_STATUS_CHANGE_SERVICE.FINAL_STAGE_UPDATE_STATS_DATA, data: response.data.data, isExistingUpdate: true });
        }
        else {
            router.push('elections/household_status_change');
            dispatch({
                type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'שורת עדכון לא קיימת'
            });
        }

    }, function (error) {

    }
    );
}

export function displayBallotsPollingSummary(dispatch, searchObj) {
    ballotSource = ballotCancelToken.source();

    dispatch({ type: ActionTypes.REPORTS.BALLOTS.RESET_SUMMARY_RESULT });
    dispatch({ type: ActionTypes.REPORTS.BALLOTS.SET_LOADING_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/ballots-summary',
        method: 'get',
        params: searchObj,
        cancelToken: ballotSource.token
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.BALLOTS.LOAD_SUMMARY_RESULT, records: response.data.data.campaigns,
            total_records: response.data.data.count_records, row_total_sums: response.data.data.summary, searchObj
        });
    }, function (error) {
        console.log(error);
    });
}
export function searchLeadersForClusterActivity(dispatch, personal_identity) {
    dispatch({type: ActionTypes.REPORTS.CLUSTERS.CHANGE_LOADED_LEADER_FLAG, flag: false});

    Axios({ 
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist/find-leader',
        method: 'get',
        params: {personal_identity: personal_identity}
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.CLUSTERS.FIND_CLUSTER_LEADER_RESULT, records: response.data.data,
            leaderData: response.data.data
        });

        dispatch({type: ActionTypes.REPORTS.CLUSTERS.CHANGE_LOADED_LEADER_FLAG, flag: true});
    }, function (error) {
        console.log(error);
    });
}
export function searchLeadersForClusterActivityModal(dispatch, searchObj) {
    dispatch({ type: ActionTypes.REPORTS.CLUSTERS.MODAL_SEARCH_RESET_SUMMARY_RESULT });
    dispatch({ type: ActionTypes.REPORTS.CLUSTERS.MODAL_SEARCH_SET_LOADING_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist/leaders',
        method: 'get',
        params: {
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,

            first_name: searchObj.first_name,
            last_name: searchObj.last_name,
            personal_identity: searchObj.personal_identity
        }
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.CLUSTERS.MODAL_SEARCH_LOAD_SUMMARY_RESULT, records: response.data.data.records,
            total_records: response.data.data.total_records, searchObj
        });
    }, function (error) {
        console.log(error);
    });
}

export function displayStatusChangeReport(dispatch, searchObj, sortByField = null, sortDirection = null) {
    statusSource = statusCancelToken.source();

    dispatch({ type: ActionTypes.REPORTS.STATUSES.RESET_SUMMARY_RESULT });

    dispatch({ type: ActionTypes.REPORTS.STATUSES.SET_LOADING_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/status-change',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            summary_by_id: searchObj.summary_by_id,

            start_date: searchObj.start_date,
            end_date: searchObj.end_date,

            selected_statuses: (searchObj.selected_statuses.length > 0) ? searchObj.selected_statuses : null,

            sort_by_field: sortByField,
            sort_direction: sortDirection
        },
        cancelToken: statusSource.token
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.STATUSES.LOAD_SUMMARY_RESULT, records: response.data.data.records,
            total_records: response.data.data.total_records, row_total_sums: response.data.data.summary, searchObj
        });
    }, function (error) {
        console.log(error);
    });
}

export function cancelStatusChangeReport() {
    statusSource.cancel('Operation canceled by the user, cancelStatusChangeReport.');
}

export function loadMoreStatusChangesReport(dispatch, searchObj, currentPage, sortByField = null, sortDirection = null) {
    dispatch({ type: ActionTypes.REPORTS.BALLOTS.SET_LOADING_DATA_FLAG, });
    
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/status-change',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            summary_by_id: searchObj.summary_by_id,

            start_date: searchObj.start_date,
            end_date: searchObj.end_date,

            selected_statuses: searchObj.selected_statuses,

            current_page: currentPage,

            sort_by_field: sortByField,
            sort_direction: sortDirection
        },
        cancelToken: statusSource.token
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.STATUSES.LOAD_MORE_SUMMARY_RESULT, records: response.data.data.records });
    }, function (error) {
        console.log(error);
    });
}

export function displayClusterActivistReport(dispatch, searchObj) {
    clusterReportSource = clusterReportCancelToken.source();

    dispatch({ type: ActionTypes.REPORTS.CLUSTERS.RESET_SUMMARY_RESULT });
    dispatch({ type: ActionTypes.REPORTS.CLUSTERS.SET_LOADING_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            neighborhood_id: searchObj.neighborhood_id,

            first_name: searchObj.first_name,
            last_name: searchObj.last_name,
            personal_identity: searchObj.personal_identity,

            selected_roles: searchObj.selected_roles
        },
        cancelToken: clusterReportSource.token
    }).then(function (response) {
        dispatch({
            type: ActionTypes.REPORTS.CLUSTERS.LOAD_SUMMARY_RESULT, records: response.data.data.records,
            total_records: response.data.data.total_records, searchObj
        });
    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.UNSET_LOADING_DATA_FLAG });
    });
}

export function cancelClusterActivistReport() {
    clusterReportSource.cancel('Operation canceled by the user, cancelClusterActivistReport.');
}

export function loadMoreClusterActivistReport(dispatch, searchObj, currentPage) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/cluster-activist',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            neighborhood_id: searchObj.neighborhood_id,

            first_name: searchObj.first_name,
            last_name: searchObj.last_name,
            personal_identity: searchObj.personal_identity,

            selected_roles: searchObj.selected_roles,

            current_page: currentPage
        }
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CLUSTERS.LOAD_MORE_SUMMARY_RESULT, records: response.data.data.records });
    }, function (error) {
        console.log(error);
    });
}

export function cancelCaptain50ActivityReport() {
    captain50Source.cancel('Operation canceled by the user, cancelCaptain50ActivityReport.');
}

export function loadMoreCaptain50Activity(dispatch, searchObj, currentPage) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/captain50-activity',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,

            current_page: currentPage
        },
        cancelToken: statusSource.token
    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.CAPTAIN.LOAD_MORE_SUMMARY_RESULT, records: response.data.data.records });
    }, function (error) {
        console.log(error);
    });
}

export function cancelBallotsPollingSummary() {
    ballotSource.cancel('Operation canceled by the user, cancelBallotsPollingSummary.');
}

export function loadMoreBallotsPollingSummary(dispatch, searchObj, currentPage , loadPageRows) {
    dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOADING_MORE_DATA_FLAG });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/ballots-summary',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,
			
			selected_statuses: searchObj.selected_statuses,
            selected_cities: JSON.stringify(searchObj.selected_cities),
            selected_neighborhoods: JSON.stringify(searchObj.selected_neighborhoods),
            selected_clusters: JSON.stringify(searchObj.selected_clusters),
            selected_ballots: JSON.stringify(searchObj.selected_ballots),
			
            summary_by_id: searchObj.summary_by_id,

            selected_campaigns: searchObj.selected_campaigns,

            is_district_city: searchObj.is_district_city,
            is_ballot_strictly_orthodox: searchObj.is_ballot_strictly_orthodox,
            is_entity_in_current_election: searchObj.is_entity_in_current_election,

            display_num_of_votes: searchObj.display_num_of_votes,
            display_vote_statistics: searchObj.display_vote_statistics,
            display_statuses_statistics: searchObj.display_statuses_statistics,

            current_page: currentPage
        },
    }).then(function (response) {
		if(loadPageRows){
			loadPageRows(currentPage);
		}
        dispatch({ type: ActionTypes.REPORTS.BALLOTS.LOAD_MORE_SUMMARY_RESULT, records: response.data.data.campaigns });
    }, function (error) {
    });
}


/*
Search for captain50/cluster leader voters by personal_identity number only :

@param dispatch
@param personal_identity
*/
export function searchByCap50OrClusterLeaderIdentityNumber(dispatch, personalIdentity, isCap50VoterSearch) {

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/election_day/search_voter',
        method: 'get',
        params: { personal_identity: personalIdentity, search_type: (isCap50VoterSearch ? '1' : '0') } //search type : 1 - by cap 50 , 0-cluster leader
    }).then(function (response) {
        if (response.data.data.length == 1) {
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: (isCap50VoterSearch ? 'ministerID' : 'clusterLeaderID'), fieldValue: response.data.data[0].personal_identity });
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: (isCap50VoterSearch ? 'ministerFirstName' : 'clusterLeaderFirstName'), fieldValue: response.data.data[0].first_name });
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: (isCap50VoterSearch ? 'ministerLastName' : 'clusterLeaderLastName'), fieldValue: response.data.data[0].last_name });
        }
        else {
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: true, modalHeader: 'שגיאה', modalContent: 'תושב לא נמצא' });
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: (isCap50VoterSearch ? 'ministerFirstName' : 'clusterLeaderFirstName'), fieldValue: '' });
            dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: (isCap50VoterSearch ? 'ministerLastName' : 'clusterLeaderLastName'), fieldValue: '' });

        }
    }, function (error) {

    }
    );
}

/*
Election day walker report - Search for captain50/cluster leader voters by parameters :

@param dispatch
@param params - search params - city_key/cluster_key/personal_identity/first_name/last_name
param include search_type
*/
export function searchByCap50OrClusterLeaderByParams(dispatch, params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/election_day/search_voter',
        method: 'get',
        params
    }).then(function (response) {

        dispatch({ type: ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_MODAL_SEARCH_VOTER_IN_SEARCH_REPORT_FIELD_VALUE, fieldName: 'foundVoters', fieldValue: response.data.data })
    }, function (error) {

    }
    );

}

/*
Get search results of election-day-walker report by search params
*/
export function loadElectionDayWalkerReportResults(dispatch, reportRequestData, skipRows) {
    let actionGlobalType = ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_GLOBAL_REPORT_FIELD_VALUE;
    let actionSearchType = ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE;
    let actionResultCaptainType = ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.LOADED_ELECTION_DAY_WALKER_SEARCH_RESULTS.CAPTAIN_VOTERS;
    let actionResultBallotsType = ActionTypes.REPORTS.WALKERS.ELECTION_DAILY_REPORT.LOADED_ELECTION_DAY_WALKER_SEARCH_RESULTS.BALLOTS;
    
    let isCaptainFiftiesFormat = reportRequestData.order_by_captain_fifties == '1' ? true : false;
    let isNewSearch = skipRows > 0 ? false : true;
    reportRequestData.skip_rows = skipRows;
    dispatch({ type: actionGlobalType, fieldName: 'loadingSearchResults', fieldValue: true });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/election_day',
        method: 'get',
        params: reportRequestData

    }).then(function (response) {
        let data = response.data.data;

        let actionType = isCaptainFiftiesFormat ? actionResultCaptainType : actionResultBallotsType;
        dispatch({
            type: actionType, total_voters_count: data.total_voters_count,
            voters_list: data.voters_list, items_hash: data.items_hash, isNewSearch
        });

        dispatch({ type: actionGlobalType, fieldName: 'loadingSearchResults', fieldValue: false });
        dispatch({ type: actionSearchType, fieldName: 'clustersButtonDisabled', fieldValue: !isCaptainFiftiesFormat });
        dispatch({ type: actionSearchType, fieldName: 'caps50ButtonDisabled', fieldValue: isCaptainFiftiesFormat });
    }, function (error) {

    }
    );
}
export function getVotersByBallotBoxes(dispatch, reportRequestData, isNewSearch, skipRows = 0) {
    dispatch({ type: ActionTypes.REPORTS.WALKERS.GENERAL_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'loadingSearchResults', fieldValue: true });
    reportRequestData.skip_rows = skipRows;
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/walkers/general',
        method: 'get',
        params: reportRequestData

    }).then(function (response) {
        dispatch({ type: ActionTypes.REPORTS.WALKERS.GENERAL_REPORT.GET_SEARCH_RESULT, data: response.data.data, skipRows: skipRows, isNewSearch: isNewSearch });
        dispatch({ type: ActionTypes.REPORTS.WALKERS.GENERAL_REPORT.CHANGE_SEARCH_REPORT_FIELD_VALUE, fieldName: 'loadingSearchResults', fieldValue: false });

    }, function (error) {
        console.log(error);
    }
    );
}


/*
Module : Form1000 search-screen
Action : Load clusters and ballots by city key
Author : Pnina Alon
*/
export function loadClustersAndBallotsByCity(dispatch, cityKey) {

    Axios({
        url: window.Laravel.baseURL + 'api/elections/form1000/city_data/' + cityKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.FORM1000.SEARCH_SCREEN_ITEM_VALUE_CHANGE, fieldName: 'clusters', fieldValue: response.data.data });


    }, function (error) {

    }
    );
}

/*
Dashboard pre election day screen - load ballot box by param

*/
export function loadDashboardBallotBoxesByParams(dispatch, paramType, paramKey, globalScreenName, requestData = {}) {
    let url = window.Laravel.baseURL;
    if (paramType == 'city') {
        url += 'api/system/cities/' + paramKey + '/ballots';
    } else if (paramType == 'neighborhood') {
        url += 'api/system/neighborhoods/' + paramKey + '/ballots';
    } else if (paramType == 'cluster') {
        url += 'api/system/clusters/' + paramKey + '/ballots';
    } else {
        return;
    }
    Axios({
        url,
        method: 'get',
        params: requestData
    }).then(function (response) {
        if (globalScreenName == 'electionsDashboard') {
            dispatch({ type: ActionTypes.ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'searchScreen', fieldName: 'ballotBoxes', fieldValue: response.data.data });
        }
		else if (globalScreenName == 'votesDashboard') {
            dispatch({ type: ActionTypes.VOTES_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'searchScreen', fieldName: 'ballotBoxes', fieldValue: response.data.data });
        }
        else {
            dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'searchScreen', fieldName: 'ballotBoxes', fieldValue: response.data.data });
        }
    }, function (error) {

    }
    );
}

/*
Module : Form1000 screen
Action : Load ballot-boxes voters and votes data by ballotbox key
Author : Pnina Alon
*/
export function loadBallotboxVotersVotesData(dispatch , router, ballotboxKey , loadedByBallotKey){
	dispatch({type: ActionTypes.FORM1000.SEARCH_SCREEN_ITEM_VALUE_CHANGE, fieldName:'isLoadingSearchResults' , fieldValue:true});
	let params = {};
	if(loadedByBallotKey){
		params.extended = '1';
	}
    Axios({
        url: window.Laravel.baseURL + 'api/elections/form1000/' + ballotboxKey,
        method: 'get' , 
		params 
    }).then(function (response) {
        let responseData = response.data.data;
        // console.log(responseData.extended_data);
        let resultChangeType = ActionTypes.FORM1000.SEARCH_RESULTS_SCREEN_ITEM_VALUE_CHANGE;
        let changeType = ActionTypes.FORM1000.SEARCH_SCREEN_ITEM_VALUE_CHANGE;

		   if(loadedByBallotKey){
			    dispatch({type: changeType, fieldName:'selectedCity' , fieldValue:{selectedValue:responseData.extended_data.selected_city.name , selectedItem:responseData.extended_data.selected_city}});
			    dispatch({type: changeType, fieldName:'clusters' , fieldValue:responseData.extended_data.clusters});
			    dispatch({type: changeType, fieldName:'selectedCluster' , fieldValue:{selectedValue:responseData.extended_data.selected_cluster.name , selectedItem:responseData.extended_data.selected_cluster}});
			    dispatch({type: changeType, fieldName:'ballotBoxes' , fieldValue:responseData.extended_data.selected_cluster.ballot_boxes});
			    dispatch({type: changeType, fieldName:'selectedBallotbox' , fieldValue:{selectedValue:responseData.extended_data.selected_ballotBox.name , selectedItem:responseData.extended_data.selected_ballotBox}});  
		   }
		   dispatch({type: changeType, fieldName:'isLoadingSearchResults' , fieldValue:false});
		   dispatch({type: changeType, fieldName:'showSearchResults' , fieldValue:true});
		   dispatch({type: resultChangeType, fieldName:'ballotbox_voters_array' , fieldValue:responseData.ballotbox_voters_array});
		   dispatch({type: resultChangeType, fieldName:'voted_support_status_percentage' , fieldValue:responseData.voted_support_status_percentage});
		   dispatch({type: resultChangeType, fieldName:'last_vote_date' , fieldValue:(responseData.last_voted_voter_data?responseData.last_voted_voter_data.vote_date:'')});
		   dispatch({type: resultChangeType, fieldName:'last_vote_voter' , fieldValue:(responseData.last_voted_voter_data?(responseData.last_voted_voter_data.first_name + ' ' + responseData.last_voted_voter_data.last_name):'')});
		   dispatch({type: resultChangeType, fieldName:'role_shifts' , fieldValue:responseData.voters_roles_shifts});
           dispatch({type: resultChangeType, fieldName:'city_name' , fieldValue:responseData.city_name});
           dispatch({type: resultChangeType, fieldName:'cluster_name' , fieldValue:responseData.cluster_name});
           dispatch({type: resultChangeType, fieldName:'cluster_address' , fieldValue:responseData.cluster_address}); 
  
  },function(error) {
           dispatch({type: ActionTypes.FORM1000.SET_ERROR_MODAL_WINDOW_PARAMS, fieldName:'isLoadingSearchResults' , displayErrorMessage:true,modalErrorTitle :'שגיאה' ,modalErrorContent :'קלפי לא קיים'});
           dispatch({type:ActionTypes.FORM1000.CLEAN_SEARCH_SCREEN});
		   dispatch({type:ActionTypes.FORM1000.CLEAN_RESULTS_SCREEN});
		   router.push('elections/form1000');     
	 }
    );
}

/*
Module : Form1000 screen
Action : update votes for ballot-boxes by ballotbox key and voters array
Author : Pnina Alon
*/
export function createNewVotesForBallotBox(dispatch , ballotboxKey , votersArray){
	let resultChangeType=ActionTypes.FORM1000.SEARCH_RESULTS_SCREEN_ITEM_VALUE_CHANGE;
	 dispatch({type: resultChangeType, fieldName:'isSavingData' , fieldValue:true});
    Axios({
      url: window.Laravel.baseURL + 'api/elections/form1000/'+ballotboxKey,
      method: 'post' , 
      data:{
          voters:JSON.stringify(votersArray)
      } 
  }).then(function (response) {
      let responseData=response.data.data;
      
         dispatch({type: resultChangeType, fieldName:'voted_support_status_percentage' , fieldValue:responseData.voted_support_status_percentage});
          dispatch({type: resultChangeType, fieldName:'ballotbox_voters_array' , fieldValue:responseData.ballot_boxes});
          dispatch({type: resultChangeType, fieldName:'last_vote_date' , fieldValue:responseData.last_vote_date.date.substr(0,19)});
          dispatch({type: resultChangeType, fieldName:'last_vote_voter' , fieldValue:responseData.last_vote_voter});
          dispatch({type: resultChangeType, fieldName:'isSavingData' , fieldValue:false});
		  dispatch({ type: SystemActions.ActionTypes.CLEAR_DIRTY, target: 'elections.form1000' });
        
 },function(error) {
         dispatch({type: resultChangeType, fieldName:'isSavingData' , fieldValue:false});
   }
  );
}

/*
Manual votes screen - get voter details and vote by voter key
*/
export function loadManualVotesScreenVoter(dispatch, router, voterKey) {

    dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'loadingResults', fieldValue: true });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/manual/' + voterKey,
        method: 'get'

    }).then(function (response) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'foundVoterData', fieldValue: response.data.data });
        dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'loadingResults', fieldValue: false });
    }, function (error) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'loadingResults', fieldValue: false });
        dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'תושב לא קיים' });
        router.push('elections/votes/manual');
    }
    );
}

/*
Dashboard pre elections screen - load counts data for search header and speedometer graph
*/
export function loadDashboardGeographicSumsStatistics(dispatch, entityType, entityKey) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/stats'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_key: entityKey
        }
    }).then(function (response) {
        let result = response.data.data;
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'searchScreen', fieldName: 'totalVoters', fieldValue: result.total_voters_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'searchScreen', fieldName: 'totalHouseholds', fieldValue: result.total_households_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'speedometerScreen', fieldName: 'totalSupporters', fieldValue: result.total_supporters_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'speedometerScreen', fieldName: 'totalPotential', fieldValue: result.total_potentials_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'speedometerScreen', fieldName: 'previousVotesCount', fieldValue: result.previous_votes_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'speedometerScreen', fieldName: 'previousSupportersCount', fieldValue: result.previous_supporters_count });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'measureSupportScreen', fieldName: 'current_campaign_start_date', fieldValue: result.last_campaign_start_date });
    }, function (error) {

    }
    );
}

/*
Load all support statuses count by geographic entity type and entity id
*/
export function loadDashboardSupportStatusesCount(dispatch, entityType, entityKey) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/supportStatuses'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_key: entityKey
        }
    }).then(function (response) {
        let result = response.data.data;

        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'votersDistributionBySupportStatusScreen', fieldName: 'resultDataObject', fieldValue: result });

    }, function (error) {

    }
    );
}

/*
Dashboard pre elections screen - get specific support statuses changes from existing service
*/
export function dashboardPreElectSupportsMeasurements(dispatch, searchObj) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/status-change',
        method: 'get',
        params: {
            area_id: searchObj.area_id,
            sub_area_id: searchObj.sub_area_id,
            city_id: searchObj.city_id,
            cluster_id: searchObj.cluster_id,
            ballot_id: searchObj.ballot_id,

            summary_by_id: searchObj.summary_by_id,
            entity_id: searchObj.entity_id,
            start_date: searchObj.start_date,
            end_date: searchObj.end_date,

            selected_statuses: (searchObj.selected_statuses.length > 0) ? searchObj.selected_statuses : null,
        },

    }).then(function (response) {
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'measureSupportScreen', fieldName: 'resultsArray', fieldValue: response.data.data });
    }, function (error) {
        console.log(error);
    });
}

/*
	Load all election campaigns for dashboard pre elections screen
*/
export function loadPreElectionsDayElectionCampaigns(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/cities/municipal_elections/campaigns',
        method: 'get'
    }).then(function (result) {
        let sortedList = result.data.data.campaigns_list;
        sortedList = _.sortBy(sortedList, 'id').reverse();

        // sortedList = sortedList.filter(item => item.type == 0);
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'generalLists', fieldName: 'electionCampaigns', fieldValue: sortedList });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'officialsRolesScreen', fieldName: 'selectedCampaign', fieldValue: { selectedValue: sortedList[0].name, selectedItem: sortedList[0] } });
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'supportsComparisonScreen', fieldName: 'selectedCampaign', fieldValue: { selectedValue: sortedList[1].name, selectedItem: sortedList[1] } });
    }, function (error) {

    });
}

/*
Manual votes screen - handles adding new vote to voter 
*/
export function addManualVoteToVoter(dispatch, voterKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/manual/' + voterKey,
        method: 'post'

    }).then(function (response) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'foundVoterData', fieldValue: response.data.data });
        dispatch({ type: ActionTypes.MANUAL_VOTES.ADD_TEMP_USER_UPDATE, voteData: response.data.data });

    }, function (error) {

    });
}


/*
Load official roles  by geographic entity type and entity id
*/
export function loadDashboardSupportOfficialRoles(dispatch, entityType, entityKey, electionCampaignKey) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/roles'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_key: entityKey,
            campaign_key: electionCampaignKey,
        }
    }).then(function (response) {
        let result = response.data.data;
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'officialsRolesScreen', fieldName: 'resultDataObject', fieldValue: result });

    }, function (error) {

    });
}


/*
Manual votes screen - handles adding new vote to voter 
*/
export function deleteManualVoteToVoter(dispatch, voterKey, tempVotesArrayIndex) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/manual/' + voterKey,
        method: 'delete'

    }).then(function (response) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.GLOBAL_SCREEN_SET_PARAM_VALUE, fieldName: 'foundVoterData', fieldValue: response.data.data });
        dispatch({ type: ActionTypes.MANUAL_VOTES.REMOVE_TEMP_USER_UPDATE, tempVotesArrayIndex });

    }, function (error) {

    });
}


/*
Load all current trasportations data  by geographic entity type and entity id
*/
export function loadDashboardTransportation(dispatch, entityType, entityKey) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/transportations'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_key: entityKey
        }
    }).then(function (response) {
        let result = response.data.data;

        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'transportationsScreenScreen', fieldName: 'resultDataObject', fieldValue: result });

    }, function (error) {

    });
}

/*
Manual votes screen - load ballotboxes by city key
*/
export function loadBallotsByCity(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/ballots',
        method: 'get'

    }).then(function (response) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.SEARCH_SCREEN_SET_PARAM_VALUE, fieldName: 'ballotBoxes', fieldValue: response.data.data });


    }, function (error) {

    }
    );
}
/*
Manual votes screen - load electors by ballotbox key
*/
export function loadElectorsOfBallots(dispatch, ballotKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/ballots/' + ballotKey + '/electors',
        method: 'get'

    }).then(function (response) {
        dispatch({ type: ActionTypes.MANUAL_VOTES.SEARCH_SCREEN_SET_PARAM_VALUE, fieldName: 'possibleVoters', fieldValue: response.data.data });


    }, function (error) {

    });
}

/*
Function that load support statuses comparison 
*/
export function loadSupportStatusesComparison(dispatch, entityType, entityKey, previousCampKey) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/supporters_comparison'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_key: entityKey,
            previous_camp_key: previousCampKey
        }
    }).then(function (response) {
        let result = response.data.data;
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'supportsComparisonScreen', fieldName: 'resultDataObject', fieldValue: result });

    }, function (error) {

    }
    );
}


/*
Function that load cities stats of areas panel screen 
*/
export function loadAreasPanel(dispatch) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/areas_panel/cities_stats'),
        method: 'get',
        params: {

        }
    }).then(function (response) {
        let result = response.data.data;

        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'areasPanel', fieldName: 'areasCitiesStats', fieldValue: result });

    }, function (error) {

    }
    );
}

/*
Function that load global inter-contry stats of areas panel screen 
*/
export function loadGlobalStatsAreasPanel(dispatch) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/areas_panel/global_stats'),
        method: 'get',
        params: {

        }
    }).then(function (response) {
        let result = response.data.data;

        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.SET_SUBSCREEN_VALUE_BY_NAME, screenName: 'areasPanel', fieldName: 'globalCountryStats', fieldValue: result });

    }, function (error) {

    });
}


/*
Manual votes screen - search voter by personal identity
*/
export function manualScreenSearchVoterByIdentity(dispatch, router, personalIdentity) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/manual/search_voter',
        method: 'get',
        params: {
            personal_identity: personalIdentity
        }

    }).then(function (response) {
        router.push('elections/votes/manual/' + response.data.data.key);
        // dispatch({type:ActionTypes.MANUAL_VOTES.CLEAN_SEARCH_SCREEN});
        loadManualVotesScreenVoter(dispatch, router, response.data.data.key);
    }, function (error) {
        dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'תושב לא קיים' });
    });
}

/*
	Function that returns stats of area by area key :
*/
export function loadStatsByAreaOrCity(dispatch, entityKey, areaIndex, cityIndex, isCity) {
    if (isCity) {
        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_CITY_PARAM, areaIndex, cityIndex, paramName: 'isLoadingAreaStats', paramValue: true });
    }
    else {

        dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_AREA_PARAM, areaIndex, paramName: 'isLoadingAreaStats', paramValue: true });
    }
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/pre_elections_day/areas_panel/area_or_city_stats_only'),
        method: 'get',
        params: {
            entity_key: entityKey,
            is_city: (isCity ? '1' : '0')
        }
    }).then(function (response) {
        if (isCity) {
            dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_CITY_PARAM, areaIndex, cityIndex, paramName: 'isLoadingAreaStats', paramValue: 'false' });
            dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_CITY_PARAM, areaIndex, cityIndex, paramName: 'stats', paramValue: response.data.data });

        } else {
            dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_AREA_PARAM, areaIndex, paramName: 'isLoadingAreaStats', paramValue: 'false' });
            dispatch({ type: ActionTypes.PRE_ELECTIONS_DASHBOARD.AREAS_PANEL_SET_AREA_PARAM, areaIndex, paramName: 'stats', paramValue: response.data.data });
        }

    }, function (error) {
        dispatch({ type: ActionTypes.SET_MODAL_DIALOG_DATA, visible: true, headerText: 'שגיאה', modalText: 'תושב לא קיים' });
    });
}


/*
	Function that loads basic stats for all-areas screen of elections-day dashboard screen : 
*/
export function loadElectionDayAllCountryBasicStats(dispatch, hot){
	Axios({
        url:(window.Laravel.baseURL + 'api/elections/dashboard/elections_day/stats'),
        method: 'get',
        params: {
			 search_type:'all_country_stats',
             hot
		}		
     }).then(function (response) {
            let responseData = response.data.data;
            let count_entities_output = responseData.count_entities_output;
            dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.CREATE_AREA_CITIES_HASH_TABLE , generalCountryAreasStats : responseData.areas});

            dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'ballots_count_data' , fieldValue : count_entities_output.ballots_count_data || []});
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'ballots_reporting_count_data' , fieldValue : count_entities_output.ballots_reporting_count_data || []});

            dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'votingUpdatedDate' , fieldValue : responseData.voting_updated_date});
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'geoEntitySupportersVotersPercents' , fieldValue : responseData.geo_supporters_votes});
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'geoEntityAllVotersPercents' , fieldValue : responseData.geo_all_voters_votes});
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'geoEntitySupportersVotersPercentsPrev' , fieldValue : responseData.geo_supporters_votes_prev});
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'geoEntityAllVotersPercentsPrev' , fieldValue : responseData.geo_all_voters_votes_prev});
            dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'VoteElectionsHours' , fieldValue : responseData.vote_election_hours});
            
            // For all country counts (not hot ballots)
            // dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'all_voters_count' , fieldValue : responseData.all_voters_count});
            // dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'all_supporters_count' , fieldValue : responseData.all_supporters_count});
            // dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'global_votes_count' , fieldValue : responseData.global_votes_count});

 
	},function(error) {
         
  });
}

/*
	Function that loads votes predictions for all-areas screen of elections-day dashboard screen : 
*/
export function loadElectionDayAllVotesPredictions(dispatch, hot){
		Axios({
        url:(window.Laravel.baseURL + 'api/elections/dashboard/elections_day/stats'),
        method: 'get',
        params: {
			 search_type:'all_votes_predictions',
             hot
		}		
     }).then(function (response) {
			dispatch({type:ActionTypes.ELECTIONS_DASHBOARD.SET_GLOBAL_VALUE_BY_NAME, fieldName:'generalPredictedVotesPercents' , fieldValue : response.data.data});
 
	},function(error) {
         
	}); 
}

/*
	Function that load per city the neighborhoods+clusters inner ballots structure : 
*/
export function loadElectionDayCityNeighborhoodsClustersBallotsTree(dispatch, cityKey, cityId, hot) {

    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/elections_day/stats'),
        method: 'get',
        params: {
            city_key: cityKey,
            search_type: 'sub_entities',
            hot
        }
    }).then(function (response) {

        let subEntities = response.data.data.city_sub_entities
        if (subEntities.length > 0) {
            dispatch({ type: ActionTypes.ELECTIONS_DASHBOARD.SET_CITY_SUB_ENTITIES, cityId, subEntities });
        }
    }, function (error) {

    });

}

/*
	Function that loads basic stats for all-areas screen of elections-day dashboard screen : 
*/
export function loadElectionDayEntityStatsByTypeAndKey(dispatch  , entityType , entityKeyArray , parentEntityId = null, hot = false ){	
 
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/elections_day/stats'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_id: parentEntityId,
            entity_arrays_keys: entityKeyArray,
            search_type: 'geographical_stats',
            hot
        }
    }).then(function (response) {
        let count_entities_output = response.data.data.count_entities_output;
        count_entities_output.forEach(function (itemData) {
            dispatch({ type: ActionTypes.ELECTIONS_DASHBOARD.SET_GEO_ENTITY_FIELD_VALUE,
             fieldName: 'voteStats', fieldValue:itemData, entityType, entityId: itemData.id });
        })
    }, function (error) {

    });


}

export function downloadExcelDashboardArrivalDate(dispatch  , entityType , entityKey){	
    let urlPage= window.Laravel.baseURL + "api/elections/votes/dashboard/excel_entity/"+entityType+"/"+entityKey;
    window.open(urlPage, '_blank');
}

export function downloadExcelDashboardArrivalDateGroupBallotBox(dispatch  , entityType , entityKey){	
    let urlPage= window.Laravel.baseURL + "api/elections/votes/dashboard/ballot_excel_entity/"+entityType+"/"+entityKey;
    window.open(urlPage, '_blank');
}



/*
	Function that loads votes predictions for all-areas screen of elections-day dashboard screen : 
*/
export function loadElectionDayEntityVotesPredictionsByTypeAndKey(dispatch, entityType, entityKeyArray, parentEntityId = null, hot = false) {
    Axios({
        url: (window.Laravel.baseURL + 'api/elections/dashboard/elections_day/stats'),
        method: 'get',
        params: {
            entity_type: entityType,
            entity_arrays_keys: entityKeyArray,
            entity_id: parentEntityId,
            search_type: 'geographical_hourly_stats',
            hot
        }
    }).then(function (response) {
        let count_entities_output = response.data.data.count_entities_output;
        let count_entities_outputPrev = response.data.data.count_entities_output_prev;
        // console.log('count_entities_outputPrev', count_entities_outputPrev)
        count_entities_output.forEach(function (itemData) {
            dispatch({
                type: ActionTypes.ELECTIONS_DASHBOARD.SET_GEO_ENTITY_FIELD_VALUE,
                fieldName: 'voteHourlyStats', fieldValue: itemData, entityType, entityId: itemData.id  
            });
        })
        count_entities_outputPrev.forEach(function (itemData) {
            dispatch({
                type: ActionTypes.ELECTIONS_DASHBOARD.SET_GEO_ENTITY_FIELD_VALUE,
                fieldName: 'voteHourlyStatsPrev', fieldValue: itemData, entityType, entityId: itemData.id  
            });
        })
    }, function (error) {

    }); 
}

/*
   function that returns the csv sources list :
*/
export function getCsvSourcesForVotersManual(dispatch) {
    var actionURL = window.Laravel.baseURL + 'api/elections/voters/manual/sources';

    Axios({
        url: actionURL,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.VOTERS_MANUAL.LOAD_CSV_SOURCES, csvSources: response.data.data });

    }, function (error) {

    });
}

export function loadSupportStatusesForVotersManual(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/support/status',
        method: 'get'
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTERS_MANUAL.LOAD_SUPPORT_STATUSES, supportStatuses: response.data.data});
    }, function (error) {
        console.log(error);
    });
}

export function getVoterByIdentityOrKey(dispatch, fieldValue, fieldName, currentTab) {
    switch(currentTab) {
        case 1:
            dispatch({type: ActionTypes.VOTERS_MANUAL.DATA_SOURCE.RESET_VOTER});
            dispatch({type: ActionTypes.VOTERS_MANUAL.DATA_SOURCE.CHANGE_LOADED_VOTER_FLAG, loadedVoter: false});
            break;

        case 2:
            dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.RESET_VOTER});
            dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_VOTER_FLAG, loadedVoter: false});
            break;
    }
    let params = {};
    params[fieldName] = fieldValue;
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/manual/source/voter',
        method: 'get',
        params: params,
    }).then(function (response) {
        switch(currentTab) {
            case 1:
				if(response.data.data){
					dispatch({type: ActionTypes.VOTERS_MANUAL.DATA_SOURCE.LOAD_VOTER, voter: response.data.data});
				}
                dispatch({type: ActionTypes.VOTERS_MANUAL.DATA_SOURCE.CHANGE_LOADED_VOTER_FLAG, loadedVoter: true});
                break;

            case 2:
				if(response.data.data){
					dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.LOAD_VOTER, voter: response.data.data});
				}
                dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_VOTER_FLAG, loadedVoter: true});
                break;
        }
    }, function (error) {
        switch(currentTab) {
            case 1:
                dispatch({type: ActionTypes.VOTERS_MANUAL.DATA_SOURCE.CHANGE_LOADED_VOTER_FLAG, loadedVoter: true});
                break;

            case 2:
                dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_VOTER_FLAG, loadedVoter: true});
                break;
        }
    });
}

export function loadInstituteRolesForVotersManual(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/manual/institutes/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.VOTERS_MANUAL.LOAD_INSTITUTE_ROLES, instituteRoles: response.data.data });
    }, function (error) {

    });
}

export function loadEthnicGroupsForVotersManual(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/ethnic',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.VOTERS_MANUAL.LOAD_ETHNIC_GROUPS, ethnicGroups: response.data.data });
    }, function (error) {

    });
}

export function loadReligiousGroupsForVotersManual(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/lists/religious_groups',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.VOTERS_MANUAL.LOAD_RELIGIOUS_GROUPS, religiousGroups: response.data.data });
    }, function (error) {

    });
}

export function getSelectedVoter(dispatch, voterKey) {
    dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_SELECTED_VOTER_FLAG, loadedSelectedVoter: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/manual/voter/' + voterKey,
        method: 'get'
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.LOAD_SELECTED_VOTER, voter: response.data.data});
        dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_SELECTED_VOTER_FLAG, loadedSelectedVoter: true});
    }, function (error) {
        dispatch({type: ActionTypes.VOTERS_MANUAL.SECOND_TAB.CHANGE_LOADED_SELECTED_VOTER_FLAG, loadedSelectedVoter: true});
    });
}

export function loadCityStreetsForVotersManual(dispatch, cityKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/cities/' + cityKey + '/streets',
        method: 'get'
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTERS_MANUAL.LOAD_STREETS, streets: response.data.data});
    }, function (error) {
        console.log(error);
    });
}

export function loadInstitutesForVotersManual(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/institutes',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.VOTERS_MANUAL.LOAD_INSTITUTES, institutes: response.data.data });
    }, function (error) {

    });
}

export function saveVotersManualSelectedVoters(dispatch, updateData){
    dispatch({type: ActionTypes.VOTERS_MANUAL.CHANGE_SAVED_SELECTED_VOTER_FLAG, savedSelectedVotersFlag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/voters/manual',
        method: 'put'  ,
        data: updateData
    }).then(function (response) {
		dispatch({type:ActionTypes.VOTERS_MANUAL.CHANGE_FILED_VALUE_BY_NAME , fieldName:'showSuccessMessageWindow' , fieldValue:true});
        dispatch({type: ActionTypes.VOTERS_MANUAL.CHANGE_SAVED_SELECTED_VOTER_FLAG, savedSelectedVotersFlag: true});
    }, function (error) {

    });
}

export function loadElectionCampaignsForManagement(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/all',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.LOAD_ELECTIONS_CAMPAIGNS, campaigns: response.data.data.campaigns_list });
    }, function (error) {

    });
}

export function loadCurrentCampaignForManagement(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/current',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.LOAD_CURRENT_CAMPAIGN, currentCampaign : response.data.data });
    }, function (error) {

    });
}

export function addElectionCampaign(router, formFields) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns',
        method: 'post',
        data: formFields
    }).then(function (response) {
        router.push('elections/campaigns');
    }, function (error) {

    });
}

export function getCampaignDetails(dispatch, campaignKey) {
    dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.CHANGE_LOADED_CAMPAIGN_FLAG, flag: false });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.LOAD_ELECTION_CAMPAIGN_DETAILS, campaign: response.data.data });
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.CHANGE_LOADED_CAMPAIGN_FLAG, flag: true });
    }, function (error) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.CHANGE_LOADED_CAMPAIGN_FLAG, flag: true });
    });
}

export function editCampaignDetails(dispatch, campaignKey, campaignFields) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey,
        method: 'put',
        data: campaignFields
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.EDIT_ELECTION_CAMPAIGN_DETAILS, campaign : response.data.data });
    }, function (error) {

    });
}

export function loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/statuses',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.LOAD_SUPPORT_STATUSES, supportStatuses: response.data.data });
    }, function (error) {

    });
}

export function updateElectionCampaignSupportStatus(dispatch, 
                                        campaignKey,
                                        supportStatusKey,
                                        name,
                                        active,
                                        level,
                                        connectedSupportStatusKey) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/'+ campaignKey +'/support/statuses/' + supportStatusKey,
        method: 'put',
        data: {
            active,
            name,
            level,
            connected_support_status_key: connectedSupportStatusKey
        }
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey);
    }, function (error) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey);
    });
}


/**
 * Delete support status from election campaign edit
 *
 * @param function dispatch
 * @param string campaignKey
 * @param string supportStatusKey
 * @return void
 */
export function deleteElectionCampaignSupportStatus(dispatch, campaignKey, supportStatusKey) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/'+ campaignKey +'/support/statuses/' + supportStatusKey,
        method: 'delete',
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey); 
    }, function (error) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: SystemActions.ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey); 
    });   
}

/**
 * Add support status from election campaign edit
 *
 * @param function dispatch
 * @param string campaignKey
 * @param string name
 * @param integer level
 * @return void
 */
export function addElectionCampaignSupportStatus(dispatch, campaignKey, name, level) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/'+ campaignKey +'/support/statuses',
        method: 'post',
        data: {
            name: name,
            level: level
        }
    }).then(function (response) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey); 
    }, function (error) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        let response = error.response || false;
        if (response) {
            let data = response.data || false;
            if (data) {
                let errorCode = data.error_code || false;

                if (errorCode) {
                    dispatch({ type: SystemActions.ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
                }
            }
        }
        //load status list
        loadSupportStatusesForElectionsCampaigns(dispatch, campaignKey); 
    });   
}

/**
 * Load support status list for support status update
 *
 * @param function dispatch
 * @param string campaignKey
 * @return void
 */
export function loadSupportStatusesForSupportStatusUpdate(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/statuses',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.LOAD_SUPPORT_STATUS,
                    campaignKey: campaignKey,
                    supportStatus: response.data.data });
    }, function (error) {

    });
}

/**
 * Load previous support status list for support status edit
 *
 * @param function dispatch
 * @param string campaignKey
 * @return void
 */
export function loadSupportStatusesForSupportStatusEdit(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/statuses',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.SUPPORT_STATUS.LOAD_PREVIOUS_SUPPORT_STATUS,
                    supportStatus: response.data.data });
    }, function (error) {

    });
}

export function loadCampaignVoterBooks(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/voter/books',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTER_BOOKS.LOAD_VOTER_BOOKS, voterBooks: response.data.data });
    }, function (error) {

    });
}

export function getVoterDashboardMainScreen(dispatch , params) {
	dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMainScreenScreen' , fieldValue: true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard' ,
        method: 'get',
		params
    }).then(function (response) {
		dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMainScreenScreen' , fieldValue: false});
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'mainScreenData' , fieldValue: response.data.data});
    }, function (error) {
		dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMainScreenScreen' , fieldValue: false});
    });
}

export function getCampaignVoterBook(dispatch, campaignKey, voterBookKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/voter/books/' + voterBookKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTER_BOOKS.LOAD_VOTER_BOOK, voterBook: response.data.data });
    }, function (error) {

    });
}

export function getVoterDashboardEnrolledActivists(dispatch , params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/enrolled' ,
        method: 'get',
		params
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'enrolledData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function uploadCampaignVoterBook(dispatch, campaignKey, formFields) {
    let data = new FormData();
    data.append('file_upload', formFields.file);

    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADING_FLAG, flag: true});
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: false});

    const config = {
        onUploadProgress: function(progressEvent) {
            let percents = Math.round( (progressEvent.loaded * 100) / progressEvent.total );
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.UPDATE_PERCENTS, percents});
        }
    };

    Axios.post(window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/voter/books/upload', data, config)
        .then(function (response) {
            loadCampaignVoterBooks(dispatch, campaignKey);
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        }, function (error) {
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        });
}

export function loadCampaignBudgetFiles(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/budgets/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.LOAD_BUDGET_FILES, budgetFiles: response.data.data });
    }, function (error) {

    });
}

export function uploadCampaignBudgetFile(dispatch, campaignKey, formFields) {
    let data = new FormData();
    data.append('file_upload', formFields.file);

    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADING_FLAG, flag: true});
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: false});

    const config = {
        onUploadProgress: function(progressEvent) {
            let percents = Math.round( (progressEvent.loaded * 100) / progressEvent.total );
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.UPDATE_PERCENTS, percents});
        }
    };

    Axios.post(window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/budgets/files/upload', data, config)
        .then(function (response) {
            loadCampaignBudgetFiles(dispatch, campaignKey);
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        }, function (error) {
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        });
}

export function loadElectionRolesCampaignBudget(dispatch, campaignKey) {
   return Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/budgets/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ACTIVIST.LOAD_ELECTION_ROLES_BUDGET, electionRolesBudget: response.data.data });
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.LOAD_ELECTION_ROLES_SHIFTS, electionRolesShiftsBudgets: response.data.data });
        return response.data.data;
    }, function (error) {
    });
}

export function loadCurrentElectionRolesCampaignBudget(dispatch) {
    return Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/budgets/shift/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.LOAD_CURRENT_ELECTION_ROLES_SHIFTS, electionRolesShiftsBudgets: response.data.data });
        return response.data.data;
    }, function (error) {
    });
}

export function loadCityRoleBudget(dispatch){
  return  Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/city/budgets/roles',
        method: 'get'
    }).then(function (response) {
        return response.data.data;
    }, function (error) {
    });
    
}


export function loadElectionRolesForElectionsCampaigns(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/roles',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.LOAD_ELECTION_ROLES, electionRoles: response.data.data });
    }, function (error) {
    });
}

export function editCampaignElectionRoleBudget(dispatch, campaignKey, roleShiftKey, electionRoleId, formFields) {
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.CHANGE_EDITED_ROLE_FLAG, flag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/budgets/roles/' + roleShiftKey,
        method: 'put',
        data: formFields
    }).then(function (response) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.EDIT_ROLE_BUDGET, roleShiftKey, electionRoleId , budget: formFields.budget});
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.CHANGE_EDITED_ROLE_FLAG, flag: true});
    }, function (error) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.BUDGET.CHANGE_EDITED_ROLE_FLAG, flag: true});
    });
}

export function loadCampaignVoteFiles(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/vote/files',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTE_FILES.LOAD_VOTE_FILES, voteFiles: response.data.data });
    }, function (error) {

    });
}

export function loadMoreEnrolledActivists(dispatch , params) {
	dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreActivists' , fieldValue: true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/enrolled' ,
        method: 'get',
		params
    }).then(function (response) {
		if(response.data.data.activists_list.length > 0){
			dispatch({type: ActionTypes.VOTES_DASHBOARD.LOAD_MORE_ENROLLED_ACTIVISTS,   data: response.data.data.activists_list});
		}
    }, function (error) {

    });
	 dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreActivists' , fieldValue: false});
}

export function getVoterDashboardWrongActivists(dispatch , params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/wrong' ,
        method: 'get' , 
		params
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'wrongData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function deleteWrongRowByKey(dispatch , rowKey , data){
	 Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/wrong/'+rowKey ,
        method: 'delete',
		data
    }).then(function (response) {
		console.log(response.data.data);
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'wrongData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function getCampaignVoteFile(dispatch, campaignKey, voteFileKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/vote/files/' + voteFileKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTE_FILES.LOAD_VOTE_FILE, voteFile: response.data.data });
    }, function (error) {

    });
}

export function fixExistingWrongRowByKey(dispatch , rowKey , data){
	 Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/wrong/'+rowKey ,
        method: 'put' , 
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'wrongData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function uploadCampaignVoteFile(dispatch, campaignKey, formFields) {
    let data = new FormData();
    data.append('file_upload', formFields.file);

    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADING_FLAG, flag: true});
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: false});

    const config = {
        onUploadProgress: function(progressEvent) {
            let percents = Math.round( (progressEvent.loaded * 100) / progressEvent.total );
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.UPDATE_PERCENTS, percents});
        }
    };

    Axios.post(window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/vote/files/upload', data, config)
        .then(function (response) {
            loadCampaignVoteFiles(dispatch, campaignKey);
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        }, function (error) {
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        });
}

export function loadCampaignVotesPercents(dispatch, campaignKey) {
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PERCENTS.CHANGE_LOADED_PERCENTS_FLAG, flag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/percents',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.PERCENTS.LOAD_PREDICTED_PERCENTS, campaignVotesPercents: response.data.data });
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PERCENTS.CHANGE_LOADED_PERCENTS_FLAG, flag: true});
    }, function (error) {

    });
}

export function addCampaignVotePercentage(dispatch, campaignKey, formFields) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/percents',
        method: 'post',
        data: formFields
    }).then(function (response) {
        loadCampaignVotesPercents(dispatch, campaignKey);
    }, function (error) {

    });
}

export function getVoterDashboardMissedActivists(dispatch , params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/missed' ,
        method: 'get' , 
		params
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'missedData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function editCampaignVotePercentage(dispatch, campaignKey, percentKey, formFields) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/percents/' + percentKey,
        method: 'put',
        data: formFields
    }).then(function (response) {
        loadCampaignVotesPercents(dispatch, campaignKey);
    }, function (error) {

    });
}

export function deleteMissingActivistRowByKey(dispatch , rowKey , data) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/missed/'+rowKey ,
        method: 'delete' ,
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'missedData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function deleteCampaignVotePercentage(dispatch, campaignKey, percentKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/percents/' + percentKey,
        method: 'delete'
    }).then(function (response) {
        loadCampaignVotesPercents(dispatch, campaignKey);
    }, function (error) {

    });
}

export function loadCampaignBallotBoxesFiles(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/ballots/files',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.LOAD_BALLOT_BOXES_FILES,
                   ballotBoxesFiles: response.data.data });
    }, function (error) {

    });
}
 
export function loadMoreMissedActivists(dispatch , params) {
	dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreMissedActivists' , fieldValue: true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/missed' ,
        method: 'get',
		params
    }).then(function (response) {
		if(response.data.data.activists_list.length > 0){
			dispatch({type: ActionTypes.VOTES_DASHBOARD.LOAD_MORE_MISSED_ACTIVISTS,   data: response.data.data.activists_list});
		}
    }, function (error) {

    });
	 dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreMissedActivists' , fieldValue: false});
}
 
 
export function getVoterDashboardUnverifiedActivists(dispatch , params) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/unverified' ,
        method: 'get',
		params
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'unverifiedData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function getCampaignBallotBoxFile(dispatch, campaignKey, ballotBoxFileKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/ballots/files/' + ballotBoxFileKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.LOAD_BALLOT_BOX_FILE,
                   ballotBoxFile: response.data.data });
    }, function (error) {

    });
}

export function deleteVoterDashboardUnverifiedActivists(dispatch , data) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/unverified' ,
        method: 'delete',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'unverifiedData' , fieldValue: response.data.data});
    }, function (error) {

    });
}

export function uploadCampaignBallotBoxFile(dispatch, campaignKey, formFields) {
    let data = new FormData();
    data.append('file_upload', formFields.file);

    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADING_FLAG, flag: true});
    dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: false});

    const config = {
        onUploadProgress: function(progressEvent) {
            let percents = Math.round( (progressEvent.loaded * 100) / progressEvent.total );
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.UPDATE_PERCENTS, percents});
        }
    };

    Axios.post(window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/ballots/files/upload', data, config)
        .then(function (response) {
            loadCampaignBallotBoxesFiles(dispatch, campaignKey);
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        }, function (error) {
            dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.PROGRESS_BAR.CHANGE_LOADED_FLAG, flag: true});
        });
}

export function loadCampaignSupportStatusUpdates(dispatch, campaignKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/status/updates',
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.LOAD_SUPPORT_STATUS_UPDATES,
                   supportStatusUpdates: response.data.data });
    }, function (error) {

    });
}

export function addCampaignSupportStatusUpdate(dispatch, campaignKey, updateType, selectedSupportStatus, supportStatusType) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/status/updates',
        method: 'post',
        data: {
            update_type: updateType,
            conversion_list: selectedSupportStatus,
            source_support_status_type: supportStatusType
        }
    }).then(function (response) {
        loadCampaignSupportStatusUpdates(dispatch, campaignKey);
    }, function (error) {

    });
}

export function editCampaignSupportStatusUpdate(dispatch, campaignKey, updateKey, data={}) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/status/updates/' + updateKey,
        method: 'put',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.EDIT_SUPPORT_STATUS_UPDATE, updateKey});
    }, function (error) {

    });
}

export function editCampaignVoterBookUpdate(dispatch, campaignKey, updateKey, data={}) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/voter/books/' + updateKey,
        method: 'put',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTER_BOOKS.EDIT_SUPPORT_STATUS_UPDATE, updateKey});
    }, function (error) {

    });
}


export function editCampaignBallotBoxFile(dispatch, campaignKey, itemKey, data={}) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/ballots/files/' + itemKey,
        method: 'put',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.BALLOT_BOXES.FILES.EDIT_BALLOT_BOX_FILE, itemKey});
    }, function (error) {

    });
}

export function editCampaignVotesFile(dispatch, campaignKey, itemKey, data={}) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/vote/files/' + itemKey,
        method: 'put',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.ELECTIONS_CAMPAIGNS.VOTE_FILES.EDIT_VOTE_FILE, itemKey});
    }, function (error) {

    });
}

export function editCsvFileStatus(dispatch, itemKey , data={}) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/user_files/' + itemKey ,
        method: 'put',
		data
    }).then(function (response) {
        dispatch({type: ActionTypes.DASHBOARD.UPDATE_CSV_FILE_STATUS, itemKey});
    }, function (error) {

    });
}


export function deleteCsvFile(dispatch, itemKey , endDeletingAsyncFunction ) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/imports/user_files/' + itemKey ,
        method: 'delete',
		 
    }).then(function (response) {
		endDeletingAsyncFunction();
        //dispatch({type: ActionTypes.DASHBOARD.UPDATE_CSV_FILE_STATUS, itemKey});
    }, function (error) {

    });
}

export function getCampaignSupportStatusUpdate(dispatch, campaignKey, updateKey) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/campaigns/' + campaignKey + '/support/status/updates/' + updateKey,
        method: 'get'
    }).then(function (response) {
        dispatch({ type: ActionTypes.ELECTIONS_CAMPAIGNS.SUPPORT_STATUS_UPDATE.GET_SUPPORT_STATUS_UPDATE,
                   supportStatusUpdate: response.data.data });
    }, function (error) {

    });
}

/* Transportations */
export function getTransportationsData(dispatch, requestData, isNewSearch){
    dispatch({ type: ActionTypes.TRANSPORTATIONS.SET_LOADING_DATA_FLAG, bool: false });

    dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADED_FLAG, flag: false });
    dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.RESET_CLUSTERS_DATA });

    dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADED_FLAG, flag: false });
    dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.RESET_DRIVERS_DATA });

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations',
        method: 'get'  ,
        params: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.TRANSPORTATIONS.GET_SEARCH_RESULT, data: response.data.data, isNewSearch: isNewSearch });
    }, function (error) {

    });
}
export function getTransportationsCityData(dispatch, requestData){
    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations/city',
        method: 'get'  ,
        params: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.TRANSPORTATIONS.CITY_DATA, data: response.data.data, cityKey: requestData.city_key});
    }, function (error) {});
}

export function getTransportationsClustersData(dispatch, requestData) {
    dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADING_FLAG, flag: true});
    dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADED_FLAG, flag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations/city/clusters',
        method: 'get'  ,
        params: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.LOAD_CLUSTERS_DATA, clusters: response.data.data, requestData});
        dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADING_FLAG, flag: false});
        dispatch({ type: ActionTypes.TRANSPORTATIONS.CLUSTERS_DATA.CHANGE_LOADED_FLAG, flag: true});
    }, function (error) {});
}

export function getTransportationsDriversData(dispatch, requestData) {
    dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADING_FLAG, flag: true});
    dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADED_FLAG, flag: false});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations/city/drivers',
        method: 'get'  ,
        params: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.LOAD_DRIVERS_DATA, drivers: response.data.data, requestData});
        dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADING_FLAG, flag: false});
        dispatch({ type: ActionTypes.TRANSPORTATIONS.DRIVERS_DATA.CHANGE_LOADED_FLAG, flag: true});
    }, function (error) {});
}

export function addVoteToVoter(dispatch, voterKey, index){
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportation/' + voterKey + '/vote',
        method: 'put',
    }).then(function (response) {
        if (response.data.data) {
            dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
            dispatch({ type: ActionTypes.TRANSPORTATIONS.UPDATE_ROW_DATA, index: index, 'param': 'has_voted', 'value': true });
        }else{
            dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        }
    }, function (error) {
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });
}
export function updateVoterComment(dispatch, commentRowData, newComment) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportation/' + commentRowData.voterKey + '/comment',
        method: 'put',
        params: { comment: newComment }
    }).then(function (response) {
        if (response.data.data) {
            dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
            dispatch({ type: ActionTypes.TRANSPORTATIONS.UPDATE_ROW_DATA, index: commentRowData.rowIndex, 'param': 'comment', 'value': newComment });
        }
    }, function (error) {});
}
export function updateTransportation(dispatch, requestData, key, param, rowIndex) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportation/' + key,
        method: 'put',
        params: requestData
    }).then(function (response) {
        let data = response.data.data;
        if (data) {
            dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
            let value = data[param] || false;
            dispatch({ type: ActionTypes.TRANSPORTATIONS.UPDATE_ROW_DATA, index: rowIndex, 'param': param, 'value': value });
        }else{
            dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        }
    }, function (error) {
        dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        displayErrorMessage(error, dispatch)
    });
}
export function updateTransportations(dispatch, requestData, cityKey, rowsSelectedIndexList ){
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});

    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations',
        method: 'put',
        params: requestData
    }).then(function (response) {
        let data = response.data.data;
        if (data) {
            dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
            let action = requestData.action;
            dispatch({ type: ActionTypes.TRANSPORTATIONS.UPDATE_ROWS_DATA, action: action, rowsSelectedIndexList: rowsSelectedIndexList });
            if (action != 'mark_as_executed') {
                getTransportationsCityData(dispatch, { city_key: cityKey });
            }
        }else{
            dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        }
    }, function (error) {
        dispatch({type: SystemActions.ActionTypes.CHANGES_NOT_SAVED});
        displayErrorMessage(error, dispatch)
    });
}
export function searchForDrivers(dispatch, requestData) {
	dispatch({ type: ActionTypes.TRANSPORTATIONS.SEARCH_DRIVERS_RESULTS, drivers: [] });
	dispatch({ type: ActionTypes.TRANSPORTATIONS.SET_DRIVERS_LOADING_SEARCH_RESULT, data:true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportations/drivers',
        method: 'get',
        params: requestData
    }).then(function (response) {
        dispatch({ type: ActionTypes.TRANSPORTATIONS.SEARCH_DRIVERS_RESULTS, drivers: response.data.data });
		dispatch({ type: ActionTypes.TRANSPORTATIONS.SET_DRIVERS_LOADING_SEARCH_RESULT, data:false});
    }, function (error) {
		dispatch({ type: ActionTypes.TRANSPORTATIONS.SET_DRIVERS_LOADING_SEARCH_RESULT, data:false});
    });
}
export function updateTransportationDriver(dispatch, requestData, cityKey, voterRowDetails, newDriverData){
    let key = voterRowDetails.transportationsKey
    let rowIndex = voterRowDetails.rowIndex
    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportation/' + key,
        method: 'put'  ,
        params: requestData
    }).then(function (response) {
        let data = response.data.data;
        if (data) {
            let dataObjectToUpdate = {
                driver_first_name: newDriverData.first_name,
                driver_last_name: newDriverData.last_name,
                driver_phone_number: newDriverData.phone_number,
                voter_driver_id: newDriverData.id
            }
            dispatch({ type: ActionTypes.TRANSPORTATIONS.UPDATE_ROW_DATA, index: rowIndex, dataObjectToUpdate: dataObjectToUpdate });
        }
        dispatch({ type: ActionTypes.TRANSPORTATIONS.SHOW_HIDE_GLOBAL_MODAL_DIALOG, show: false, modalName: 'Driver' });
        getTransportationsCityData(dispatch, { city_key: cityKey });
    }, function (error) {

    });
}
export function addDriverToCluster(dispatch, cityKey, voterKey, allocationObj, requestData ) {
    dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/transportation/' + cityKey + '/drivers/' + voterKey ,
        method: 'post',
        data: allocationObj
    }).then(function (response) {
        getTransportationsDriversData(dispatch, requestData);
        dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });

    }, function (error) {
        displayErrorMessage(error, dispatch)
        dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    });
}
/* End Transportations */

export function loadMoreUnverifiedActivists(dispatch , params) {
	dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreUnverifiedActivists' , fieldValue: true});
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/unverified' ,
        method: 'get',
		params
    }).then(function (response) {
		if(response.data.data.activists_list.length > 0){
			dispatch({type: ActionTypes.VOTES_DASHBOARD.LOAD_MORE_UNVERIFIED_ACTIVISTS,   data: response.data.data.activists_list});
		}
    }, function (error) {

    });
	 dispatch({type: ActionTypes.VOTES_DASHBOARD.SET_VALUE_BY_NAME, fieldName:'loadingMoreUnverifiedActivists' , fieldValue: false});
} 

export function sendSMSFromVotesDashboards(dispatch, data) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/votes/dashboard/message',
        method: 'post',
        data
    }).then(function (response) {
    
    }, function (error) {
        console.log(error);
    });
}
export function sendSms(dispatch, reportRequestData, message) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/sms',
        method: 'get',
        params: { ...reportRequestData, sms_message: message }
    }).then(function (response) {
         dispatch({ type: ActionTypes.REPORTS.SEND_SMS.SHOW_SMS_MODAL, show: false })
    }, function (error) {
        displayErrorMessage(error, dispatch);
        console.log(error);
        dispatch({ type: ActionTypes.REPORTS.SEND_SMS.SHOW_SMS_MODAL, show: false })
    });
}
export function countSmsVoters(dispatch, reportRequestData) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/sms/count',
        method: 'get',
        params: reportRequestData
    }).then(function (response) {
     dispatch({type: ActionTypes.REPORTS.SEND_SMS.VOTERS_COUNTER, votersCounter:response.data.data});
     
    }, function (error) {
        console.log(error);

    });
}

/**
 * Load phone types for saved report in general report
 *
 * @param function dispatch
 * @return void
 */
export function loadGeneralReportPhoneTypes(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/system/phoneTypes',
        method: 'get'
    }).then(function (response) {
     dispatch({type: ActionTypes.REPORTS.CHANGE_SAVED_REPORT_VALUE, fieldName: 'phoneTypes', fieldValue:response.data.data});
     
    }, function (error) {
        console.log(error);

    });
}

/**
 * Load support status for general report
 *
 * @param function dispatch
 * @return void
 */
export function loadSupportStatusesForGeneralReport(dispatch) {
    Axios({
        url: window.Laravel.baseURL + 'api/elections/reports/general/support_status',
        method: 'get'
    }).then(function (response) {
        dispatch({type: ActionTypes.REPORTS.GENERAL.LOAD_SUPPORT_STATUS, supportStatus: response.data.data});
    }, function (error) {
        console.log(error);
    });
}

/**
 * Update election activist sum
 * 
 * @param function dispatch
 * @param string electionRoleKey
 * @param integer sum
 * @return void
 */

export function updateElectionRoleSum(dispatch, activistPaymentItemId, sum, fromActivistScreen = false,namedispatchType=false) {
    //TODO updateActivist details by new method dto 03-09-21
    // dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
    // Axios({
    //     url: window.Laravel.baseURL + 'api/elections/activists/' + activistPaymentItemId  + "/sum",
    //     method: 'put'  ,
    //     data: {
    //         field_name: 'sum', 
    //         field_value: sum 
    //     }
    // }).then(function (response) {
    //     dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
        
    //     if(!fromActivistScreen){
    //         dispatch({ type: ActionTypes.ACTIVIST.UPDATE_ACTIVIST_SUM, activistPaymentItemId, sum: sum});
    //     } 
    //     if(namedispatchType){
    //         dispatch({ type: ActionTypes.ACTIVIST[namedispatchType], activistPaymentItemId, sum: sum});
    //     }
    //     else {
    //         dispatch({ type: ActionTypes.ACTIVIST.UPDATE_ACTIVIST_GEO_SUM, activistPaymentItemId, sum: sum});
    //     }
    // }, function (error) {
    //     displayErrorMessage(error, dispatch)
    //     dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
    // });   
}

    export function getAssignmentDetailsByAllocationId(allocationId){
      
       return Axios({
            url: window.Laravel.baseURL + 'api/elections/activists/allocation/assignment/' + allocationId,
            method: 'get' 
        }).then(function (response) {
            return response.data.data;
        }, function (error) {
          console.log(error);
        }); 
    }

    export function getRoleVoterByKey(electionRoleVoterKey){
        return Axios({
             url: window.Laravel.baseURL + 'api/elections/role_voter_activist/' + electionRoleVoterKey,
             method: 'get' 
         }).then(function (response) {
             return response.data.data;
         }, function (error) {
           console.log(error);
         }); 
     }
 

    /**
     * 
     * @param  dispatch 
     * @param {ActivistUpdateDto} activistUpdateDto 
     * @param {boolean} displaySaveSucsess 
     * @returns Axios
     */
    export function updateActivistDto(dispatch, activistUpdateDto,displaySaveSucsess=true) {
       
        dispatch({type: SystemActions.ActionTypes.SAVING_CHANGES});
       return Axios({
            url: window.Laravel.baseURL + 'api/elections/activists/update',
            method: 'put'  ,
            data: activistUpdateDto
        }).then(function (response) {
            if(displaySaveSucsess)
            dispatch({ type: SystemActions.ActionTypes.CHANGES_SAVED });
            return response.data.data;
        }, function (error) {
            displayErrorMessage(error, dispatch)
            dispatch({ type: SystemActions.ActionTypes.CHANGES_NOT_SAVED });
        });   
    }

/**
 * @function
 * display error message modal
 * @param error - error data;
 * Need to replace all the errors with this function.
 * @returns void.
 */
function displayErrorMessage(error, dispatch){
    let response = error.response || false;
    if (response) {
        let data = response.data || false;
        // console.log(data);
        if (data) {
            let errorCode = data.error_code || false;
            if (errorCode && errors[errorCode]) {
                dispatch({ type: SystemActions.ActionTypes.TOGGLE_ERROR_MSG_MODAL_DIALOG_DISPLAY, displayError: true, errorMessage: errors[errorCode] });
            }
        }
    }

}
